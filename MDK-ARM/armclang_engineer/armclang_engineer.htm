<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [armclang_engineer\armclang_engineer.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image armclang_engineer\armclang_engineer.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6210000: Last Updated: Fri May  2 15:59:42 2025
<BR><P>
<H3>Maximum Stack Usage =        880 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
OS_RemoteCtrlTask &rArr; RemoteCtrlTask() &rArr; Interact::update_roboArm(RoboArm&) &rArr; Interact::receive_xyz(RoboArm&) &rArr; RoboArm::ikine(std::__2::array&lang;float, 3u&rang; const&) &rArr; slove_q2(float, float, float, float, float) &rArr; roboarm_dep::arm_atan2_f32(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[11e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[89]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89]">ADC3_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[89]">ADC3_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[32]">ADC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[8b]">BDMA_Channel0_IRQHandler</a> from stm32h7xx_it.o(.text.BDMA_Channel0_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[8c]">BDMA_Channel1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[8d]">BDMA_Channel2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[8e]">BDMA_Channel3_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[8f]">BDMA_Channel4_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[90]">BDMA_Channel5_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[91]">BDMA_Channel6_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[92]">BDMA_Channel7_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[1a]">BusFault_Handler</a> from stm32h7xx_it.o(.text.BusFault_Handler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[13]">CDC_Control_HS</a> from usbd_cdc_if.o(.text.CDC_Control_HS) referenced 2 times from usbd_cdc_if.o(.data.USBD_Interface_fops_HS)
 <LI><a href="#[12]">CDC_DeInit_HS</a> from usbd_cdc_if.o(.text.CDC_DeInit_HS) referenced 2 times from usbd_cdc_if.o(.data.USBD_Interface_fops_HS)
 <LI><a href="#[11]">CDC_Init_HS</a> from usbd_cdc_if.o(.text.CDC_Init_HS) referenced 2 times from usbd_cdc_if.o(.data.USBD_Interface_fops_HS)
 <LI><a href="#[14]">CDC_Receive_HS</a> from usbd_cdc_if.o(.text.CDC_Receive_HS) referenced 2 times from usbd_cdc_if.o(.data.USBD_Interface_fops_HS)
 <LI><a href="#[15]">CDC_TransmitCplt_HS</a> from usbd_cdc_if.o(.text.CDC_TransmitCplt_HS) referenced 2 times from usbd_cdc_if.o(.data.USBD_Interface_fops_HS)
 <LI><a href="#[77]">CEC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[93]">COMP1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[a0]">CORDIC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[99]">CRS_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[69]">DCMI_PSSI_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[7c]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[7d]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[7e]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[7f]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream0_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream0_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream1_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream1_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream2_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream2_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream3_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream3_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Stream4_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream4_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[30]">DMA1_Stream5_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream5_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[31]">DMA1_Stream6_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream6_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[4e]">DMA1_Stream7_IRQHandler</a> from stm32h7xx_it.o(.text.DMA1_Stream7_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[74]">DMA2D_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream0_IRQHandler</a> from stm32h7xx_it.o(.text.DMA2_Stream0_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream1_IRQHandler</a> from stm32h7xx_it.o(.text.DMA2_Stream1_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream2_IRQHandler</a> from stm32h7xx_it.o(.text.DMA2_Stream2_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream3_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream4_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream5_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream6_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream7_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[7b]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[8a]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[9c]">DTS_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[1d]">DebugMon_Handler</a> from stm32h7xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[9a]">ECC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[5c]">ETH_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[5d]">ETH_WKUP_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[26]">EXTI0_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[48]">EXTI15_10_IRQHandler</a> from stm32h7xx_it.o(.text.EXTI15_10_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[27]">EXTI1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[28]">EXTI2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[29]">EXTI3_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[2a]">EXTI4_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[37]">EXTI9_5_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[33]">FDCAN1_IT0_IRQHandler</a> from stm32h7xx_it.o(.text.FDCAN1_IT0_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[35]">FDCAN1_IT1_IRQHandler</a> from stm32h7xx_it.o(.text.FDCAN1_IT1_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[34]">FDCAN2_IT0_IRQHandler</a> from stm32h7xx_it.o(.text.FDCAN2_IT0_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[36]">FDCAN2_IT1_IRQHandler</a> from stm32h7xx_it.o(.text.FDCAN2_IT1_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[a5]">FDCAN3_IT0_IRQHandler</a> from stm32h7xx_it.o(.text.FDCAN3_IT0_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[a6]">FDCAN3_IT1_IRQHandler</a> from stm32h7xx_it.o(.text.FDCAN3_IT1_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[5e]">FDCAN_CAL_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[24]">FLASH_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[9f]">FMAC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[4f]">FMC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[6b]">FPU_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[88]">HSEM1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[18]">HardFault_Handler</a> from stm32h7xx_it.o(.text.HardFault_Handler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[40]">I2C1_ER_IRQHandler</a> from stm32h7xx_it.o(.text.I2C1_ER_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[3f]">I2C1_EV_IRQHandler</a> from stm32h7xx_it.o(.text.I2C1_EV_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[42]">I2C2_ER_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[41]">I2C2_EV_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[64]">I2C3_ER_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[63]">I2C3_EV_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[79]">I2C4_ER_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[78]">I2C4_EV_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[a4]">I2C5_ER_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[a3]">I2C5_EV_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[b4]">I2C_DMAAbort</a> from stm32h7xx_hal_i2c.o(.text.I2C_DMAAbort) referenced 4 times from stm32h7xx_hal_i2c.o(.text.I2C_ITError)
 <LI><a href="#[b3]">I2C_Slave_ISR_IT</a> from stm32h7xx_hal_i2c.o(.text.I2C_Slave_ISR_IT) referenced 2 times from stm32h7xx_hal_i2c.o(.text.I2C_ITError)
 <LI><a href="#[b6]">IMU_QuaternionEKF_F_Linearization_P_Fading</a> from quaternionekf.o(.text.IMU_QuaternionEKF_F_Linearization_P_Fading) referenced 2 times from quaternionekf.o(.text.IMU_QuaternionEKF_Init)
 <LI><a href="#[b5]">IMU_QuaternionEKF_Observe</a> from quaternionekf.o(.text.IMU_QuaternionEKF_Observe) referenced 2 times from quaternionekf.o(.text.IMU_QuaternionEKF_Init)
 <LI><a href="#[b7]">IMU_QuaternionEKF_SetH</a> from quaternionekf.o(.text.IMU_QuaternionEKF_SetH) referenced 2 times from quaternionekf.o(.text.IMU_QuaternionEKF_Init)
 <LI><a href="#[b8]">IMU_QuaternionEKF_xhatUpdate</a> from quaternionekf.o(.text.IMU_QuaternionEKF_xhatUpdate) referenced 2 times from quaternionekf.o(.text.IMU_QuaternionEKF_Init)
 <LI><a href="#[76]">LPTIM1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[94]">LPTIM2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[95]">LPTIM3_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[96]">LPTIM4_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[97]">LPTIM5_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[98]">LPUART1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[73]">LTDC_ER_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[72]">LTDC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[85]">MDIOS_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[84]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[86]">MDMA_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[19]">MemManage_Handler</a> from stm32h7xx_it.o(.text.MemManage_Handler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[17]">NMI_Handler</a> from stm32h7xx_it.o(.text.NMI_Handler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[75]">OCTOSPI1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[9e]">OCTOSPI2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[e0]">OS_ArmInitTask</a> from thread.o(.text.OS_ArmInitTask) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_ARM_INIT_TASK)
 <LI><a href="#[e1]">OS_ArmTask</a> from thread.o(.text.OS_ArmTask) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_ARM_TASK)
 <LI><a href="#[e2]">OS_BuzzerTask</a> from thread.o(.text.OS_BuzzerTask) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_BUZZER_TASK)
 <LI><a href="#[e3]">OS_ChassisTask</a> from thread.o(.text.OS_ChassisTask) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_CHASSIS_TASK)
 <LI><a href="#[e4]">OS_DebugTask</a> from thread.o(.text.OS_DebugTask) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_DEBUG_TASK)
 <LI><a href="#[e5]">OS_ErrorTask</a> from thread.o(.text.OS_ErrorTask) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_ERROR_TASK)
 <LI><a href="#[e7]">OS_IMUTask</a> from thread.o(.text.OS_IMUTask) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_IMU_TASK)
 <LI><a href="#[e6]">OS_ImageTransTask</a> from thread.o(.text.OS_ImageTransTask) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_IMAGEATRANS_TAS)
 <LI><a href="#[e8]">OS_JudgeTask</a> from thread.o(.text.OS_JudgeTask) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_JUDGE_TASK)
 <LI><a href="#[e9]">OS_KbTask</a> from thread.o(.text.OS_KbTask) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_KB_TASK)
 <LI><a href="#[ea]">OS_LedTask</a> from thread.o(.text.OS_LedTask) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_LED_TASK)
 <LI><a href="#[eb]">OS_OneStepGetTask</a> from thread.o(.text.OS_OneStepGetTask) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_OSG_TASK)
 <LI><a href="#[ec]">OS_PCTask</a> from thread.o(.text.OS_PCTask) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_PC_Task)
 <LI><a href="#[ed]">OS_RemoteCtrlTask</a> from thread.o(.text.OS_RemoteCtrlTask) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_REMOTE_CTRL_TAS)
 <LI><a href="#[ee]">OS_SubBoardTask</a> from thread.o(.text.OS_SubBoardTask) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_SUB_TASK)
 <LI><a href="#[66]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[65]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[68]">OTG_HS_IRQHandler</a> from stm32h7xx_it.o(.text.OTG_HS_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[67]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[21]">PVD_AVD_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[1e]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[25]">RCC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[6a]">RNG_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[49]">RTC_Alarm_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[23]">RTC_WKUP_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[16]">Reset_Handler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[71]">SAI1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[9b]">SAI4_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[50]">SDMMC1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[87]">SDMMC2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[7a]">SPDIF_RX_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[43]">SPI1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[44]">SPI2_IRQHandler</a> from stm32h7xx_it.o(.text.SPI2_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[52]">SPI3_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[6e]">SPI4_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[6f]">SPI5_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[70]">SPI6_IRQHandler</a> from stm32h7xx_it.o(.text.SPI6_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[ab]">SPI_DMAAbortOnError</a> from stm32h7xx_hal_spi.o(.text.SPI_DMAAbortOnError) referenced 4 times from stm32h7xx_hal_spi.o(.text.HAL_SPI_IRQHandler)
 <LI><a href="#[ae]">SPI_DMAError</a> from stm32h7xx_hal_spi.o(.text.SPI_DMAError) referenced 2 times from stm32h7xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA)
 <LI><a href="#[ac]">SPI_DMAHalfTransmitCplt</a> from stm32h7xx_hal_spi.o(.text.SPI_DMAHalfTransmitCplt) referenced 2 times from stm32h7xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA)
 <LI><a href="#[ad]">SPI_DMATransmitCplt</a> from stm32h7xx_hal_spi.o(.text.SPI_DMATransmitCplt) referenced 2 times from stm32h7xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA)
 <LI><a href="#[1c]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[80]">SWPMI1_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[ef]">StartDefaultTask</a> from thread.o(.text.StartDefaultTask) referenced from freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_defaultTask)
 <LI><a href="#[1f]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[a9]">SystemInit</a> from system_stm32h7xx.o(.text.SystemInit) referenced from startup_stm32h723xx.o(.text)
 <LI><a href="#[22]">TAMP_STAMP_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[81]">TIM15_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[82]">TIM16_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[83]">TIM17_IRQHandler</a> from stm32h7xx_it.o(.text.TIM17_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[38]">TIM1_BRK_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[3b]">TIM1_CC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[3a]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[39]">TIM1_UP_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[a7]">TIM23_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[a8]">TIM24_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[3c]">TIM2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[3d]">TIM3_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[3e]">TIM4_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[51]">TIM5_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[55]">TIM6_DAC_IRQHandler</a> from stm32h7xx_it.o(.text.TIM6_DAC_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[56]">TIM7_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[4a]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[4d]">TIM8_CC_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[4c]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[4b]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[53]">UART4_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[54]">UART5_IRQHandler</a> from stm32h7xx_it.o(.text.UART5_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[6c]">UART7_IRQHandler</a> from stm32h7xx_it.o(.text.UART7_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[6d]">UART8_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[a1]">UART9_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[af]">UART_DMAAbortOnError</a> from stm32h7xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[b2]">UART_DMAError</a> from stm32h7xx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[b2]">UART_DMAError</a> from stm32h7xx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[b9]">UART_DMAReceiveCplt</a> from stm32h7xx_hal_uart.o(.text.UART_DMAReceiveCplt) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[ba]">UART_DMARxHalfCplt</a> from stm32h7xx_hal_uart.o(.text.UART_DMARxHalfCplt) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
 <LI><a href="#[b0]">UART_DMATransmitCplt</a> from stm32h7xx_hal_uart.o(.text.UART_DMATransmitCplt) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[b1]">UART_DMATxHalfCplt</a> from stm32h7xx_hal_uart.o(.text.UART_DMATxHalfCplt) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[a2]">USART10_IRQHandler</a> from stm32h7xx_it.o(.text.USART10_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[45]">USART1_IRQHandler</a> from stm32h7xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[46]">USART2_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[47]">USART3_IRQHandler</a> from stm32h7xx_it.o(.text.USART3_IRQHandler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[62]">USART6_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[b]">USBD_CDC_DataIn</a> from usbd_cdc.o(.text.USBD_CDC_DataIn) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[c]">USBD_CDC_DataOut</a> from usbd_cdc.o(.text.USBD_CDC_DataOut) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[8]">USBD_CDC_DeInit</a> from usbd_cdc.o(.text.USBD_CDC_DeInit) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[a]">USBD_CDC_EP0_RxReady</a> from usbd_cdc.o(.text.USBD_CDC_EP0_RxReady) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[10]">USBD_CDC_GetDeviceQualifierDescriptor</a> from usbd_cdc.o(.text.USBD_CDC_GetDeviceQualifierDescriptor) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[e]">USBD_CDC_GetFSCfgDesc</a> from usbd_cdc.o(.text.USBD_CDC_GetFSCfgDesc) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[d]">USBD_CDC_GetHSCfgDesc</a> from usbd_cdc.o(.text.USBD_CDC_GetHSCfgDesc) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[f]">USBD_CDC_GetOtherSpeedCfgDesc</a> from usbd_cdc.o(.text.USBD_CDC_GetOtherSpeedCfgDesc) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[7]">USBD_CDC_Init</a> from usbd_cdc.o(.text.USBD_CDC_Init) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[9]">USBD_CDC_Setup</a> from usbd_cdc.o(.text.USBD_CDC_Setup) referenced 2 times from usbd_cdc.o(.data.USBD_CDC)
 <LI><a href="#[5]">USBD_HS_ConfigStrDescriptor</a> from usbd_desc.o(.text.USBD_HS_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data.HS_Desc)
 <LI><a href="#[0]">USBD_HS_DeviceDescriptor</a> from usbd_desc.o(.text.USBD_HS_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data.HS_Desc)
 <LI><a href="#[6]">USBD_HS_InterfaceStrDescriptor</a> from usbd_desc.o(.text.USBD_HS_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data.HS_Desc)
 <LI><a href="#[1]">USBD_HS_LangIDStrDescriptor</a> from usbd_desc.o(.text.USBD_HS_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data.HS_Desc)
 <LI><a href="#[2]">USBD_HS_ManufacturerStrDescriptor</a> from usbd_desc.o(.text.USBD_HS_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data.HS_Desc)
 <LI><a href="#[3]">USBD_HS_ProductStrDescriptor</a> from usbd_desc.o(.text.USBD_HS_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data.HS_Desc)
 <LI><a href="#[4]">USBD_HS_SerialStrDescriptor</a> from usbd_desc.o(.text.USBD_HS_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data.HS_Desc)
 <LI><a href="#[1b]">UsageFault_Handler</a> from stm32h7xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[9d]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[20]">WWDG_IRQHandler</a> from startup_stm32h723xx.o(.text) referenced from startup_stm32h723xx.o(RESET)
 <LI><a href="#[f1]">_GLOBAL__sub_I_JudgeTask.cpp</a> from judgetask.o(.text._GLOBAL__sub_I_JudgeTask.cpp) referenced from judgetask.o(.init_array)
 <LI><a href="#[f0]">_GLOBAL__sub_I_Vari.cpp</a> from vari.o(.text._GLOBAL__sub_I_Vari.cpp) referenced from vari.o(.init_array)
 <LI><a href="#[c6]">air_left_callback(KeyEventType)</a> from keycallback.o(.text._Z17air_left_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[c7]">air_right_callback(KeyEventType)</a> from keycallback.o(.text._Z18air_right_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[c0]">chassis_a_callback(KeyEventType)</a> from keycallback.o(.text._Z18chassis_a_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[c2]">chassis_d_callback(KeyEventType)</a> from keycallback.o(.text._Z18chassis_d_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[c3]">chassis_q_callback(KeyEventType)</a> from keycallback.o(.text._Z18chassis_q_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[c1]">chassis_s_callback(KeyEventType)</a> from keycallback.o(.text._Z18chassis_s_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[bf]">chassis_w_callback(KeyEventType)</a> from keycallback.o(.text._Z18chassis_w_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[be]">remote_ctrl_recover()</a> from interact.o(.text._Z19remote_ctrl_recoverv) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[ce]">one_step_get_c_callback(KeyEventType)</a> from keycallback.o(.text._Z23one_step_get_c_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[d0]">one_step_get_v_callback(KeyEventType)</a> from keycallback.o(.text._Z23one_step_get_v_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[cc]">one_step_get_x_callback(KeyEventType)</a> from keycallback.o(.text._Z23one_step_get_x_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[ca]">one_step_get_z_callback(KeyEventType)</a> from keycallback.o(.text._Z23one_step_get_z_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[c5]">robo_arm_ctrl_q_callback(KeyEventType)</a> from keycallback.o(.text._Z24robo_arm_ctrl_q_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[c8]">robo_arm_shift_f_callback(KeyEventType)</a> from keycallback.o(.text._Z25robo_arm_shift_f_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[c4]">robo_arm_shift_q_callback(KeyEventType)</a> from keycallback.o(.text._Z25robo_arm_shift_q_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[c9]">robo_arm_shift_r_callback(KeyEventType)</a> from keycallback.o(.text._Z25robo_arm_shift_r_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[d4]">one_step_get_ctrl_c_callback(KeyEventType)</a> from keycallback.o(.text._Z28one_step_get_ctrl_c_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[d5]">one_step_get_ctrl_v_callback(KeyEventType)</a> from keycallback.o(.text._Z28one_step_get_ctrl_v_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[d3]">one_step_get_ctrl_x_callback(KeyEventType)</a> from keycallback.o(.text._Z28one_step_get_ctrl_x_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[d2]">one_step_get_ctrl_z_callback(KeyEventType)</a> from keycallback.o(.text._Z28one_step_get_ctrl_z_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[cf]">one_step_get_shift_c_callback(KeyEventType)</a> from keycallback.o(.text._Z29one_step_get_shift_c_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[d1]">one_step_get_shift_v_callback(KeyEventType)</a> from keycallback.o(.text._Z29one_step_get_shift_v_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[cd]">one_step_get_shift_x_callback(KeyEventType)</a> from keycallback.o(.text._Z29one_step_get_shift_x_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[cb]">one_step_get_shift_z_callback(KeyEventType)</a> from keycallback.o(.text._Z29one_step_get_shift_z_callback12KeyEventType) referenced 2 times from starttask.o(.text._Z9StartTaskv)
 <LI><a href="#[d8]">OneStepGet::~OneStepGet__sub_object()</a> from vari.o(.text._ZN10OneStepGetD2Ev) referenced 2 times from vari.o(.text.__cxx_global_var_init.18)
 <LI><a href="#[d8]">OneStepGet::~OneStepGet__sub_object()</a> from vari.o(.text._ZN10OneStepGetD2Ev) referenced 2 times from vari.o(.text.__cxx_global_var_init.19)
 <LI><a href="#[bb]">CountManager::~CountManager__sub_object()</a> from count.o(.text._ZN12CountManagerD2Ev) referenced 2 times from count.o(.text._Z20CountManagerInstancev)
 <LI><a href="#[bc]">DetectManager&lang;Detect&rang;::~DetectManager__sub_object()</a> from detect.o(.text._ZN13DetectManagerI6DetectED2Ev) referenced 2 times from detect.o(.text._Z21DetectManagerInstancev)
 <LI><a href="#[bd]">DetectManager&lang;TimDetect&rang;::~DetectManager__sub_object()</a> from detect.o(.text._ZN13DetectManagerI9TimDetectED2Ev) referenced 2 times from detect.o(.text._Z24TimDetectManagerInstancev)
 <LI><a href="#[d7]">UI::~UI__sub_object()</a> from vari.o(.text._ZN2UID2Ev) referenced 2 times from vari.o(.text.__cxx_global_var_init.17)
 <LI><a href="#[da]">Chassis::~Chassis__sub_object()</a> from vari.o(.text._ZN7ChassisD2Ev) referenced 2 times from vari.o(.text.__cxx_global_var_init.8)
 <LI><a href="#[db]">RoboArm::~RoboArm__sub_object()</a> from vari.o(.text._ZN7RoboArmD2Ev) referenced 2 times from vari.o(.text.__cxx_global_var_init.9)
 <LI><a href="#[d6]">Interact::~Interact__sub_object()</a> from vari.o(.text._ZN8InteractD2Ev) referenced 2 times from vari.o(.text.__cxx_global_var_init.13)
 <LI><a href="#[d9]">SuperCan::~SuperCan__sub_object()</a> from vari.o(.text._ZN8SuperCanD2Ev) referenced 2 times from vari.o(.text.__cxx_global_var_init.5)
 <LI><a href="#[d9]">SuperCan::~SuperCan__sub_object()</a> from vari.o(.text._ZN8SuperCanD2Ev) referenced 2 times from vari.o(.text.__cxx_global_var_init.6)
 <LI><a href="#[d9]">SuperCan::~SuperCan__sub_object()</a> from vari.o(.text._ZN8SuperCanD2Ev) referenced 2 times from vari.o(.text.__cxx_global_var_init.7)
 <LI><a href="#[aa]">__main</a> from __main.o(!!!main) referenced from startup_stm32h723xx.o(.text)
 <LI><a href="#[dd]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[dc]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[df]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
 <LI><a href="#[de]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from event_groups.o(.text.xEventGroupSetBitsFromISR)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[aa]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(.text)
</UL>
<P><STRONG><a name="[f3]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[f5]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[4c1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4c2]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4c3]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[4c4]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[4c5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[4c6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[100]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[f6]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[f8]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4c7]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[4c8]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[4c9]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[4ca]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[4cb]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[4cc]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[4cd]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[4ce]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[4cf]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[4d0]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4d1]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[4d2]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[4d3]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[4d4]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[4d5]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[4d6]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[4d7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[4d8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[4d9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[4da]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[4db]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[105]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[fb]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[4dc]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[4dd]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[4de]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[4df]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[4e0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[4e1]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[4e2]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[f4]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[4e3]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[fd]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ff]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[4e4]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[101]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4e5]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[11f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[104]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[4e6]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[106]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[16]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DCMI_PSSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>DTS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>I2C5_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>I2C5_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>OCTOSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>OCTOSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>TIM23_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>TIM24_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>UART9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h723xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h723xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2b7]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[4e7]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManagerInstance()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetectManagerInstance()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManagerInstance()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.19
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.18
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.17
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.13
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
</UL>

<P><STRONG><a name="[381]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::transmit()
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::UI__sub_object(unsigned short, unsigned short, __UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[10a]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[4e8]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Observe
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Measure
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H_K_R_Adjustment
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[4e9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4ea]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4eb]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[4ec]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::UI__sub_object(unsigned short, unsigned short, __UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[4ed]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[246]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::read_id()
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_SetH
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Measure
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H_K_R_Adjustment
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotor::LKMotor__sub_object(unsigned short, unsigned int, float)
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[4ee]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[4ef]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4f0]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4f1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[10f]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[112]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[113]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[115]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[110]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[116]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[4f2]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[4f3]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[4f4]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[4f5]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[4f6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4f7]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[118]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[f9]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[11a]"></a>__Heap_Initialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4f8]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[fc]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[107]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[4f9]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4fa]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[117]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[4fb]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[11c]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[119]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[4fc]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4fd]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4fe]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[120]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[122]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[123]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[124]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[125]"></a>ADC_ConfigureBoostMode</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, stm32h7xx_hal_adc.o(.text.ADC_ConfigureBoostMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ADC_ConfigureBoostMode &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[8b]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.BDMA_Channel0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BDMA_Channel0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>BMI088_ACCEL_NS_H</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bmi088middleware.o(.text.BMI088_ACCEL_NS_H))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BMI088_ACCEL_NS_H &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088_accel_init
</UL>

<P><STRONG><a name="[12b]"></a>BMI088_ACCEL_NS_L</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bmi088middleware.o(.text.BMI088_ACCEL_NS_L))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BMI088_ACCEL_NS_L &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088_accel_init
</UL>

<P><STRONG><a name="[131]"></a>BMI088_GPIO_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bmi088middleware.o(.text.BMI088_GPIO_init))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_init
</UL>

<P><STRONG><a name="[12c]"></a>BMI088_GYRO_NS_H</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bmi088middleware.o(.text.BMI088_GYRO_NS_H))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BMI088_GYRO_NS_H &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_read
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088_gyro_init
</UL>

<P><STRONG><a name="[12d]"></a>BMI088_GYRO_NS_L</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bmi088middleware.o(.text.BMI088_GYRO_NS_L))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BMI088_GYRO_NS_L &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_read
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088_gyro_init
</UL>

<P><STRONG><a name="[132]"></a>BMI088_com_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bmi088middleware.o(.text.BMI088_com_init))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_init
</UL>

<P><STRONG><a name="[12e]"></a>BMI088_delay_ms</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bmi088middleware.o(.text.BMI088_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BMI088_delay_ms &rArr; BMI088_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088_gyro_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088_accel_init
</UL>

<P><STRONG><a name="[12f]"></a>BMI088_delay_us</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, bmi088middleware.o(.text.BMI088_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BMI088_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_delay_ms
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088_gyro_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088_accel_init
</UL>

<P><STRONG><a name="[130]"></a>BMI088_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bmi088driver.o(.text.BMI088_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BMI088_init &rArr; bmi088_accel_init &rArr; BMI088_write_single_reg &rArr; BMI088_read_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088_gyro_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088_accel_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_com_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_GPIO_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::init()
</UL>

<P><STRONG><a name="[135]"></a>BMI088_read</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, bmi088driver.o(.text.BMI088_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BMI088_read &rArr; BMI088_read_muli_reg &rArr; BMI088_read_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_GYRO_NS_H
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_GYRO_NS_L
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_ACCEL_NS_H
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_read_write_byte
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_ACCEL_NS_L
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_read_muli_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::update_raw_data()
</UL>

<P><STRONG><a name="[136]"></a>BMI088_read_write_byte</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bmi088middleware.o(.text.BMI088_read_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BMI088_read_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088_accel_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_read_muli_reg
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_read_single_reg
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_write_single_reg
</UL>

<P><STRONG><a name="[1a]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[13d]"></a>CDC_ReceiveCallBack</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cdccallback.o(.text.CDC_ReceiveCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CDC_ReceiveCallBack &rArr; Interact::receive_cdc(unsigned char*) &rArr; std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_cdc(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_HS
</UL>

<P><STRONG><a name="[140]"></a>CDC_Transmit_HS</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, usbd_cdc_if.o(.text.CDC_Transmit_HS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CDC_Transmit_HS &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_TransmitPacket
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::transmit_relative_pos(std::__2::array&lang;float, 6u&rang; const&)
</UL>

<P><STRONG><a name="[2b]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.DMA1_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA1_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.DMA1_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA1_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.DMA1_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA1_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.DMA1_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA1_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.DMA1_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA1_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[15f]"></a>Error_Handler</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG1_Init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN3_Init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OCTOSPI2_Init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART10_UART_Init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI6_Init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::filter_config(unsigned short, can_dep::filter_mode, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[33]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.FDCAN1_IT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = FDCAN1_IT0_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.FDCAN1_IT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = FDCAN1_IT1_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.FDCAN2_IT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = FDCAN2_IT0_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.FDCAN2_IT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = FDCAN2_IT1_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>FDCAN3_IT0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.FDCAN3_IT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = FDCAN3_IT0_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>FDCAN3_IT1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.FDCAN3_IT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = FDCAN3_IT1_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[408]"></a>Get_Pitch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, quaternionekf.o(.text.Get_Pitch))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::update()
</UL>

<P><STRONG><a name="[409]"></a>Get_Roll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, quaternionekf.o(.text.Get_Roll))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::update()
</UL>

<P><STRONG><a name="[40a]"></a>Get_Yaw</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, quaternionekf.o(.text.Get_Yaw))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::update()
</UL>

<P><STRONG><a name="[146]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 2976 bytes, Stack size 312 bytes, stm32h7xx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; LL_ADC_SetOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCommonPathInternalCh
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetCommonPathInternalCh
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSingleDiff
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetState
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetOffsetChannel
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetDataRightShift
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetSignedSaturation
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetSaturation
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetSign
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffset
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerRanks
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>

<P><STRONG><a name="[156]"></a>HAL_ADC_Init</STRONG> (Thumb, 1282 bytes, Stack size 72 bytes, stm32h7xx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigureBoostMode
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCommonClock
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_EnableInternalRegulator
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsInternalRegulatorEnabled
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DisableDeepPowerDown
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsDeepPowerDownEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>

<P><STRONG><a name="[157]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 118 bytes, Stack size 208 bytes, adc.o(.text.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[160]"></a>HAL_DMA_Abort</STRONG> (Thumb, 2424 bytes, Stack size 48 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[20d]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 1706 bytes, Stack size 32 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[2ab]"></a>HAL_DMA_GetError</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_GetError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_DMA_GetError
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
</UL>

<P><STRONG><a name="[24d]"></a>HAL_DMA_GetState</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_DMA_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[128]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 4544 bytes, Stack size 72 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDMA_Channel0_IRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream7_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream2_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[162]"></a>HAL_DMA_Init</STRONG> (Thumb, 2400 bytes, Stack size 64 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[167]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 1794 bytes, Stack size 40 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
</UL>

<P><STRONG><a name="[169]"></a>HAL_Delay</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32h7xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Buzzer::delay&lang;(Buzzer::delay_pl)1&rang;(unsigned int)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorTask()
</UL>

<P><STRONG><a name="[455]"></a>HAL_FDCAN_ActivateNotification</STRONG> (Thumb, 254 bytes, Stack size 20 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_ActivateNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_FDCAN_ActivateNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::start()
</UL>

<P><STRONG><a name="[16a]"></a>HAL_FDCAN_AddMessageToTxFifoQ</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_AddMessageToTxFifoQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_CopyMessageToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::transmit(unsigned int, short, short, short, short)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::transmit_pdata(unsigned int, unsigned char*)
</UL>

<P><STRONG><a name="[170]"></a>HAL_FDCAN_ClockCalibrationCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_ClockCalibrationCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_ClockCalibrationCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[452]"></a>HAL_FDCAN_ConfigFifoWatermark</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_ConfigFifoWatermark))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_FDCAN_ConfigFifoWatermark
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::filter_config(unsigned short, can_dep::filter_mode, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[450]"></a>HAL_FDCAN_ConfigFilter</STRONG> (Thumb, 278 bytes, Stack size 28 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_FDCAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::filter_config(unsigned short, can_dep::filter_mode, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[451]"></a>HAL_FDCAN_ConfigGlobalFilter</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_ConfigGlobalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_FDCAN_ConfigGlobalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::filter_config(unsigned short, can_dep::filter_mode, unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[17d]"></a>HAL_FDCAN_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[16c]"></a>HAL_FDCAN_ErrorStatusCallback</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cancallback.o(.text.HAL_FDCAN_ErrorStatusCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_FDCAN_ErrorStatusCallback &rArr; Count::operator++()
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::operator++()
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[456]"></a>HAL_FDCAN_GetRxMessage</STRONG> (Thumb, 760 bytes, Stack size 40 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FDCAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::receive()
</UL>

<P><STRONG><a name="[16e]"></a>HAL_FDCAN_HighPriorityMessageCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_HighPriorityMessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_HighPriorityMessageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>HAL_FDCAN_IRQHandler</STRONG> (Thumb, 1506 bytes, Stack size 88 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorCallback
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TT_GlobalTimeCallback
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TT_StopWatchCallback
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TT_TimeMarkCallback
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TT_ScheduleSyncCallback
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TimeoutOccurredCallback
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TimestampWraparoundCallback
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxBufferNewMessageCallback
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferCompleteCallback
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxFifoEmptyCallback
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo1Callback
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxEventFifoCallback
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ClockCalibrationCallback
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferAbortCallback
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_HighPriorityMessageCallback
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorStatusCallback
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN3_IT1_IRQHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN3_IT0_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN2_IT1_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN1_IT1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN2_IT0_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN1_IT0_IRQHandler
</UL>

<P><STRONG><a name="[17e]"></a>HAL_FDCAN_Init</STRONG> (Thumb, 992 bytes, Stack size 104 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN_CalcultateRamBlockAddresses
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN3_Init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
</UL>

<P><STRONG><a name="[17f]"></a>HAL_FDCAN_MspInit</STRONG> (Thumb, 660 bytes, Stack size 288 bytes, fdcan.o(.text.HAL_FDCAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = HAL_FDCAN_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[176]"></a>HAL_FDCAN_RxBufferNewMessageCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_RxBufferNewMessageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_RxBufferNewMessageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[172]"></a>HAL_FDCAN_RxFifo0Callback</STRONG> (Thumb, 480 bytes, Stack size 64 bytes, cancallback.o(.text.HAL_FDCAN_RxFifo0Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = HAL_FDCAN_RxFifo0Callback &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBitsFromISR
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508Pos::get_feedback(unsigned short, unsigned char const*)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006Speed::get_feedback(unsigned short, unsigned char*)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::UpdateMotor()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006DiffPos::get_feedback(unsigned short, unsigned char*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorSingle::get_feedback(unsigned short, unsigned char*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::receive()
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[173]"></a>HAL_FDCAN_RxFifo1Callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_RxFifo1Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_RxFifo1Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[454]"></a>HAL_FDCAN_Start</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::start()
</UL>

<P><STRONG><a name="[17c]"></a>HAL_FDCAN_TT_GlobalTimeCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TT_GlobalTimeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_TT_GlobalTimeCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>HAL_FDCAN_TT_ScheduleSyncCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TT_ScheduleSyncCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_TT_ScheduleSyncCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[17b]"></a>HAL_FDCAN_TT_StopWatchCallback</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TT_StopWatchCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_FDCAN_TT_StopWatchCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>HAL_FDCAN_TT_TimeMarkCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TT_TimeMarkCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_TT_TimeMarkCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[178]"></a>HAL_FDCAN_TimeoutOccurredCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TimeoutOccurredCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_TimeoutOccurredCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>HAL_FDCAN_TimestampWraparoundCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TimestampWraparoundCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_TimestampWraparoundCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>HAL_FDCAN_TxBufferAbortCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TxBufferAbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_TxBufferAbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[175]"></a>HAL_FDCAN_TxBufferCompleteCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TxBufferCompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_TxBufferCompleteCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>HAL_FDCAN_TxEventFifoCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TxEventFifoCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_TxEventFifoCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[174]"></a>HAL_FDCAN_TxFifoEmptyCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TxFifoEmptyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_FDCAN_TxFifoEmptyCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[181]"></a>HAL_GPIO_Init</STRONG> (Thumb, 936 bytes, Stack size 60 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[12a]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_GYRO_NS_H
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_GYRO_NS_L
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_ACCEL_NS_H
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_ACCEL_NS_L
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperGPIO::WriteUp()
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperGPIO::WriteDown()
</UL>

<P><STRONG><a name="[161]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AutoPolling
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Transmit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardUpdate(Key*, KeyBoard&)
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetect::getSysTime()
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::getSysTime()
</UL>

<P><STRONG><a name="[279]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, stm32h7xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[27a]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[27b]"></a>HAL_I2CEx_EnableFastModePlus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32h7xx_hal_i2c_ex.o(.text.HAL_I2CEx_EnableFastModePlus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2CEx_EnableFastModePlus
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[255]"></a>HAL_I2C_AbortCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_AbortCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_AbortCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TreatErrorCallback
</UL>

<P><STRONG><a name="[24a]"></a>HAL_I2C_AddrCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_AddrCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_AddrCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
</UL>

<P><STRONG><a name="[18c]"></a>HAL_I2C_ER_IRQHandler</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
</UL>

<P><STRONG><a name="[247]"></a>HAL_I2C_EV_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_I2C_EV_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[256]"></a>HAL_I2C_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TreatErrorCallback
</UL>

<P><STRONG><a name="[18e]"></a>HAL_I2C_Init</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[24f]"></a>HAL_I2C_ListenCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_ListenCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_ListenCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[190]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 650 bytes, Stack size 40 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperIIC::mem_block_read_bytes(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short, unsigned int)
</UL>

<P><STRONG><a name="[195]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperIIC::mem_block_write_bytes(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short, unsigned int)
</UL>

<P><STRONG><a name="[18f]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 212 bytes, Stack size 240 bytes, i2c.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[252]"></a>HAL_I2C_SlaveRxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_SlaveRxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_SlaveRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[253]"></a>HAL_I2C_SlaveTxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_i2c.o(.text.HAL_I2C_SlaveTxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_SlaveTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
</UL>

<P><STRONG><a name="[198]"></a>HAL_IWDG_Init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32h7xx_hal_iwdg.o(.text.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG1_Init
</UL>

<P><STRONG><a name="[351]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32h7xx_hal_iwdg.o(.text.HAL_IWDG_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_IWDG_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugTask()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorTask()
</UL>

<P><STRONG><a name="[22a]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[199]"></a>HAL_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32h7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19c]"></a>HAL_InitTick</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, stm32h7xx_hal_timebase_tim.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[19d]"></a>HAL_MspInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32h7xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[183]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_BDMA_Init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[182]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_BDMA_Init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[19a]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SystemReset))
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorTask()
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_OSPIM_Config</STRONG> (Thumb, 2074 bytes, Stack size 80 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPIM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_OSPIM_Config &rArr; OSPIM_GetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPIM_GetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OCTOSPI2_Init
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_OSPI_AutoPolling</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_AutoPolling))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_OSPI_AutoPolling &rArr; OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::write_enable()
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::OSPI_W25Qxx_AutoPollingMemReady()
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_OSPI_Command</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_ConfigCmd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::raed_buffer(unsigned int, unsigned char*, unsigned int)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::write_page(unsigned int, unsigned char*, unsigned int)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::erase_sector_4(unsigned int)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::write_enable()
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::OSPI_W25Qxx_AutoPollingMemReady()
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::read_id()
</UL>

<P><STRONG><a name="[1af]"></a>HAL_OSPI_Init</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = HAL_OSPI_Init &rArr; HAL_OSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_SetTimeout
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OCTOSPI2_Init
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_OSPI_MspInit</STRONG> (Thumb, 496 bytes, Stack size 272 bytes, octospi.o(.text.HAL_OSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = HAL_OSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_OSPI_Receive</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_OSPI_Receive &rArr; OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::raed_buffer(unsigned int, unsigned char*, unsigned int)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::read_id()
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_OSPI_SetTimeout</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_SetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_OSPI_SetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
</UL>

<P><STRONG><a name="[1b3]"></a>HAL_OSPI_Transmit</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, stm32h7xx_hal_ospi.o(.text.HAL_OSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_OSPI_Transmit &rArr; OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::write_page(unsigned int, unsigned char*, unsigned int)
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_PCDEx_ActivateLPM</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32h7xx_hal_pcd_ex.o(.text.HAL_PCDEx_ActivateLPM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCDEx_ActivateLPM
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_PCDEx_LPM_Callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32h7xx_hal_pcd_ex.o(.text.HAL_PCDEx_LPM_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCDEx_LPM_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2d6]"></a>HAL_PCDEx_SetRxFiFo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32h7xx_hal_pcd_ex.o(.text.HAL_PCDEx_SetRxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCDEx_SetRxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[2d7]"></a>HAL_PCDEx_SetTxFiFo</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32h7xx_hal_pcd_ex.o(.text.HAL_PCDEx_SetTxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_conf.o(.text.HAL_PCD_ConnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCD_ConnectCallback &rArr; USBD_LL_DevConnected
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbd_conf.o(.text.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbd_conf.o(.text.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_conf.o(.text.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_DisconnectCallback &rArr; USBD_LL_DevDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_PCD_EP_Abort</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32h7xx_hal_pcd.o(.text.HAL_PCD_EP_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_PCD_EP_Abort &rArr; USB_EPStopXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStopXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1be]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32h7xx_hal_pcd.o(.text.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, stm32h7xx_hal_pcd.o(.text.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[2d5]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32h7xx_hal_pcd.o(.text.HAL_PCD_EP_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, stm32h7xx_hal_pcd.o(.text.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32h7xx_hal_pcd.o(.text.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, stm32h7xx_hal_pcd.o(.text.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[1c9]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32h7xx_hal_pcd.o(.text.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[1ca]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 2184 bytes, Stack size 56 bytes, stm32h7xx_hal_pcd.o(.text.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = HAL_PCD_IRQHandler &rArr; PCD_EP_OutSetupPacket_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Abort
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetTurnaroundTime
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_IRQHandler
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbd_conf.o(.text.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PCD_ISOINIncompleteCallback &rArr; USBD_LL_IsoINIncomplete
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbd_conf.o(.text.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PCD_ISOOUTIncompleteCallback &rArr; USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_PCD_Init</STRONG> (Thumb, 570 bytes, Stack size 56 bytes, stm32h7xx_hal_pcd.o(.text.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_ActivateLPM
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 120 bytes, Stack size 208 bytes, usbd_conf.o(.text.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUSBVoltageDetector
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1de]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usbd_conf.o(.text.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_conf.o(.text.HAL_PCD_ResumeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCD_ResumeCallback &rArr; USBD_LL_Resume
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1df]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usbd_conf.o(.text.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1ef]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32h7xx_hal_pcd.o(.text.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_PCD_SetAddress &rArr; USB_SetDevAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[1f1]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbd_conf.o(.text.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
</UL>

<P><STRONG><a name="[1f3]"></a>HAL_PCD_Start</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32h7xx_hal_pcd.o(.text.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_Start &rArr; USB_DevConnect
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[1da]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_conf.o(.text.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCD_SuspendCallback &rArr; USBD_LL_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1ea]"></a>HAL_PWREx_EnableUSBVoltageDetector</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableUSBVoltageDetector))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1f8]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_RCCEx_GetPLL1ClockFreq</STRONG> (Thumb, 668 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_GetPLL1ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[1fa]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 668 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1fb]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 668 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[127]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 2770 bytes, Stack size 104 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL1ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigureBoostMode
</UL>

<P><STRONG><a name="[15e]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 4076 bytes, Stack size 112 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_MspInit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 1176 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[19e]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[126]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigureBoostMode
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[19f]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[19b]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 768 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[200]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 2592 bytes, Stack size 56 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[201]"></a>HAL_RS485Ex_Init</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_RS485Ex_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = HAL_RS485Ex_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
</UL>

<P><STRONG><a name="[209]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
</UL>

<P><STRONG><a name="[206]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 912 bytes, Stack size 40 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_SuspendCallback
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI6_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
</UL>

<P><STRONG><a name="[20e]"></a>HAL_SPI_Init</STRONG> (Thumb, 658 bytes, Stack size 32 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetPacketSize
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI6_Init
</UL>

<P><STRONG><a name="[210]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 674 bytes, Stack size 280 bytes, spi.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[20b]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[207]"></a>HAL_SPI_SuspendCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_SuspendCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 1796 bytes, Stack size 72 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_read_write_byte
</UL>

<P><STRONG><a name="[212]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 682 bytes, Stack size 24 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperSPI::transmit_dma(unsigned char const*, unsigned short)
</UL>

<P><STRONG><a name="[20c]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[2ac]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_TxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitCplt
</UL>

<P><STRONG><a name="[20a]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_SPI_TxRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[21b]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_Break2Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[21a]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[21d]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_CommutCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[281]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 380 bytes, Stack size 20 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
</UL>

<P><STRONG><a name="[213]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 296 bytes, Stack size 12 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[216]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[215]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 592 bytes, Stack size 24 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; UserTimCallback &rArr; TimDetectManagerInstance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM17_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[21e]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, tim.o(.text.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[217]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[21f]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[226]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; HAL_TIM_PWM_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[227]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, tim.o(.text.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[218]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[228]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 674 bytes, Stack size 72 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::init()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::Start()
</UL>

<P><STRONG><a name="[219]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; UserTimCallback &rArr; TimDetectManagerInstance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTimCallback
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[21c]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_TriggerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[285]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART10_UART_Init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
</UL>

<P><STRONG><a name="[22c]"></a>HAL_UARTEx_ReceiveToIdle_DMA</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_ReceiveToIdle_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::receive_dma_idle(unsigned short)
</UL>

<P><STRONG><a name="[22e]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 838 bytes, Stack size 80 bytes, uartcallback.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = HAL_UARTEx_RxEventCallback &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc::verify_crc16_check_sum(unsigned char*, unsigned int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl::update(KeyBoard&)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBitsFromISR
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_custom(unsigned char*)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::operator++()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::get_feedback()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::start_receive()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::update(KeyBoard&)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::receive_dma_idle(unsigned short)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::start_receive()
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[242]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UARTEx_RxFifoFullCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[238]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART10_UART_Init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
</UL>

<P><STRONG><a name="[23a]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART10_UART_Init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
</UL>

<P><STRONG><a name="[241]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UARTEx_TxFifoEmptyCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[23f]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UARTEx_WakeupCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[23b]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, uartcallback.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = HAL_UART_ErrorCallback &rArr; SubBoard::start_receive() &rArr; SuperUart::receive_dma_idle(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::operator++()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::start_receive()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::get_feedback()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::receive_dma_idle(unsigned short)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::start_receive()
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[23d]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1736 bytes, Stack size 80 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_UARTEx_RxEventCallback &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART10_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[243]"></a>HAL_UART_Init</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART10_UART_Init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
</UL>

<P><STRONG><a name="[202]"></a>HAL_UART_MspInit</STRONG> (Thumb, 1748 bytes, Stack size 376 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2b3]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, uartcallback.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[2b4]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[244]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::transmit(unsigned short)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::transmit_dma_pdata(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[2b5]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[2b6]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[18]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.I2C1_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C1_ER_IRQHandler &rArr; HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.I2C1_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C1_EV_IRQHandler &rArr; HAL_I2C_EV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[258]"></a>IMU_QuaternionEKF_Init</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = IMU_QuaternionEKF_Init &rArr; Kalman_Filter_Init &rArr; user_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::init()
</UL>

<P><STRONG><a name="[25b]"></a>IMU_QuaternionEKF_Update</STRONG> (Thumb, 1348 bytes, Stack size 80 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = IMU_QuaternionEKF_Update &rArr; Kalman_Filter_Update &rArr; Kalman_Filter_SetK &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_atan2_f32
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::ekf_update()
</UL>

<P><STRONG><a name="[259]"></a>Kalman_Filter_Init</STRONG> (Thumb, 1610 bytes, Stack size 48 bytes, kalman_filter.o(.text.Kalman_Filter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = Kalman_Filter_Init &rArr; user_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_malloc
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Init
</UL>

<P><STRONG><a name="[267]"></a>Kalman_Filter_Measure</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, kalman_filter.o(.text.Kalman_Filter_Measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Kalman_Filter_Measure &rArr; H_K_R_Adjustment &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H_K_R_Adjustment
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
</UL>

<P><STRONG><a name="[268]"></a>Kalman_Filter_P_Update</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, kalman_filter.o(.text.Kalman_Filter_P_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Kalman_Filter_P_Update &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
</UL>

<P><STRONG><a name="[269]"></a>Kalman_Filter_PminusUpdate</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, kalman_filter.o(.text.Kalman_Filter_PminusUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Kalman_Filter_PminusUpdate &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
</UL>

<P><STRONG><a name="[26a]"></a>Kalman_Filter_SetK</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, kalman_filter.o(.text.Kalman_Filter_SetK))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Kalman_Filter_SetK &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
</UL>

<P><STRONG><a name="[25c]"></a>Kalman_Filter_Update</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, kalman_filter.o(.text.Kalman_Filter_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Kalman_Filter_Update &rArr; Kalman_Filter_SetK &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_P_Update
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatUpdate
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_PminusUpdate
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatMinusUpdate
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Measure
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update
</UL>

<P><STRONG><a name="[26b]"></a>Kalman_Filter_xhatMinusUpdate</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, kalman_filter.o(.text.Kalman_Filter_xhatMinusUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Kalman_Filter_xhatMinusUpdate &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
</UL>

<P><STRONG><a name="[26c]"></a>Kalman_Filter_xhatUpdate</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, kalman_filter.o(.text.Kalman_Filter_xhatUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Kalman_Filter_xhatUpdate &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
</UL>

<P><STRONG><a name="[26d]"></a>MX_ADC3_Init</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, adc.o(.text.MX_ADC3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = MX_ADC3_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26e]"></a>MX_BDMA_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bdma.o(.text.MX_BDMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_BDMA_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26f]"></a>MX_DMA_Init</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, dma.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[270]"></a>MX_FDCAN1_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fdcan.o(.text.MX_FDCAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = MX_FDCAN1_Init &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[271]"></a>MX_FDCAN2_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, fdcan.o(.text.MX_FDCAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = MX_FDCAN2_Init &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[272]"></a>MX_FDCAN3_Init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, fdcan.o(.text.MX_FDCAN3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = MX_FDCAN3_Init &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[273]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 1062 bytes, Stack size 488 bytes, freertos.o(.text.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[277]"></a>MX_GPIO_Init</STRONG> (Thumb, 470 bytes, Stack size 104 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[278]"></a>MX_I2C1_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, i2c.o(.text.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_EnableFastModePlus
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27c]"></a>MX_IWDG1_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, iwdg.o(.text.MX_IWDG1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_IWDG1_Init &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27d]"></a>MX_OCTOSPI2_Init</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, octospi.o(.text.MX_OCTOSPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = MX_OCTOSPI2_Init &rArr; HAL_OSPI_Init &rArr; HAL_OSPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPIM_Config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27e]"></a>MX_SPI2_Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, spi.o(.text.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27f]"></a>MX_SPI6_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, spi.o(.text.MX_SPI6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = MX_SPI6_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[280]"></a>MX_TIM12_Init</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, tim.o(.text.MX_TIM12_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MX_TIM12_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[282]"></a>MX_TIM3_Init</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, tim.o(.text.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[283]"></a>MX_TIM6_Init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tim.o(.text.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[284]"></a>MX_UART5_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, usart.o(.text.MX_UART5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = MX_UART5_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[286]"></a>MX_UART7_Init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, usart.o(.text.MX_UART7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = MX_UART7_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[287]"></a>MX_USART10_UART_Init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, usart.o(.text.MX_USART10_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = MX_USART10_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[288]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[289]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, usart.o(.text.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_RS485Ex_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28a]"></a>MX_USB_DEVICE_Init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, usb_device.o(.text.MX_USB_DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUSBVoltageDetector
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_RegisterInterface
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask()
</UL>

<P><STRONG><a name="[28f]"></a>MahonyAHRSinit</STRONG> (Thumb, 934 bytes, Stack size 120 bytes, mahonyahrs.o(.text.MahonyAHRSinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MahonyAHRSinit &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mahony_invSqrt
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::mahony_start()
</UL>

<P><STRONG><a name="[295]"></a>MahonyAHRSupdateIMU</STRONG> (Thumb, 1068 bytes, Stack size 88 bytes, mahonyahrs.o(.text.MahonyAHRSupdateIMU))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MahonyAHRSupdateIMU &rArr; invSqrt &rArr; Mahony_invSqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mahony_update
</UL>

<P><STRONG><a name="[407]"></a>Mahony_Init</STRONG> (Thumb, 130 bytes, Stack size 4 bytes, mahonyahrs.o(.text.Mahony_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Mahony_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::init()
</UL>

<P><STRONG><a name="[296]"></a>Mahony_computeAngles</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, mahonyahrs.o(.text.Mahony_computeAngles))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Mahony_computeAngles &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_atan2_f32
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::mahony_update()
</UL>

<P><STRONG><a name="[294]"></a>Mahony_invSqrt</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, mahonyahrs.o(.text.Mahony_invSqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mahony_invSqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSinit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
</UL>

<P><STRONG><a name="[297]"></a>Mahony_update</STRONG> (Thumb, 1844 bytes, Stack size 176 bytes, mahonyahrs.o(.text.Mahony_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Mahony_update &rArr; MahonyAHRSupdateIMU &rArr; invSqrt &rArr; Mahony_invSqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdateIMU
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::mahony_update()
</UL>

<P><STRONG><a name="[19]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>OS_ArmInitTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, thread.o(.text.OS_ArmInitTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = OS_ArmInitTask &rArr; ArmInitTask() &rArr; roboarm_dep::Differentiator::init(std::__2::array&lang;float, 6u&rang;&) &rArr; roboarm_dep::Differentiator::read_fram() &rArr; Fram::block_read(unsigned short, unsigned char*, unsigned short, unsigned short) &rArr; SuperIIC::mem_block_read_bytes(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short, unsigned int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmInitTask()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_ARM_INIT_TASK)
</UL>
<P><STRONG><a name="[e1]"></a>OS_ArmTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, thread.o(.text.OS_ArmTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = OS_ArmTask &rArr; ArmTask() &rArr; roboarm_dep::Differentiator::write_fram() &rArr; Fram::block_write(unsigned short, unsigned char*, unsigned short, unsigned short) &rArr; SuperIIC::mem_block_write_bytes(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short, unsigned int) &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmTask()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_ARM_TASK)
</UL>
<P><STRONG><a name="[e2]"></a>OS_BuzzerTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, thread.o(.text.OS_BuzzerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = OS_BuzzerTask &rArr; BuzzerTask() &rArr; bool Buzzer::StartMusic&lang;(Buzzer::delay_pl)0&rang;() &rArr; void Buzzer::delay&lang;(Buzzer::delay_pl)0&rang;(unsigned int) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerTask()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_BUZZER_TASK)
</UL>
<P><STRONG><a name="[e3]"></a>OS_ChassisTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, thread.o(.text.OS_ChassisTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = OS_ChassisTask &rArr; ChassisTask() &rArr; Chassis::update_slope(interact_dep::chassis_mode) &rArr; Chassis::load_speed(interact_dep::chassis_mode) &rArr; float my_abs&lang;float&rang;(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisTask()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_CHASSIS_TASK)
</UL>
<P><STRONG><a name="[e4]"></a>OS_DebugTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, thread.o(.text.OS_DebugTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = OS_DebugTask &rArr; DebugTask() &rArr; osDelayUntil &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugTask()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_DEBUG_TASK)
</UL>
<P><STRONG><a name="[e5]"></a>OS_ErrorTask</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, thread.o(.text.OS_ErrorTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = OS_ErrorTask &rArr; ErrorTask() &rArr; RGBLED::SetColor(unsigned char, unsigned char, unsigned char) &rArr; RGBLED::load() &rArr; SuperSPI::transmit_dma(unsigned char const*, unsigned short) &rArr; HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorTask()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_ERROR_TASK)
</UL>
<P><STRONG><a name="[e7]"></a>OS_IMUTask</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, thread.o(.text.OS_IMUTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = OS_IMUTask &rArr; IMUTask() &rArr; W25Q64::write_buffer(unsigned int, unsigned char*, unsigned int) &rArr; W25Q64::write_page(unsigned int, unsigned char*, unsigned int) &rArr; W25Q64::write_enable() &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUTask()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_IMU_TASK)
</UL>
<P><STRONG><a name="[e6]"></a>OS_ImageTransTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, thread.o(.text.OS_ImageTransTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = OS_ImageTransTask &rArr; ImageTransTask() &rArr; ImageTrans::transmit() &rArr; SuperUart::transmit_dma_pdata(unsigned char*, unsigned short) &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTransTask()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_IMAGEATRANS_TAS)
</UL>
<P><STRONG><a name="[e8]"></a>OS_JudgeTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, thread.o(.text.OS_JudgeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = OS_JudgeTask &rArr; JudgeTask() &rArr; UI::update() &rArr; SuperUart::transmit_dma_pdata(unsigned char*, unsigned short) &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTask()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_JUDGE_TASK)
</UL>
<P><STRONG><a name="[e9]"></a>OS_KbTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, thread.o(.text.OS_KbTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OS_KbTask &rArr; xEventGroupWaitBits &rArr; vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbTask()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_KB_TASK)
</UL>
<P><STRONG><a name="[ea]"></a>OS_LedTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, thread.o(.text.OS_LedTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = OS_LedTask &rArr; LedTask() &rArr; RGBLED::update() &rArr; RGBLED::SetColor() &rArr; RGBLED::load() &rArr; SuperSPI::transmit_dma(unsigned char const*, unsigned short) &rArr; HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTask()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_LED_TASK)
</UL>
<P><STRONG><a name="[eb]"></a>OS_OneStepGetTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, thread.o(.text.OS_OneStepGetTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = OS_OneStepGetTask &rArr; OneStepGetTask() &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGetTask()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_OSG_TASK)
</UL>
<P><STRONG><a name="[ec]"></a>OS_PCTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, thread.o(.text.OS_PCTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = OS_PCTask &rArr; PCTask() &rArr; Interact::transmit_relative_pos(std::__2::array&lang;float, 6u&rang; const&) &rArr; CDC_Transmit_HS &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCTask()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_PC_Task)
</UL>
<P><STRONG><a name="[ed]"></a>OS_RemoteCtrlTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, thread.o(.text.OS_RemoteCtrlTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = OS_RemoteCtrlTask &rArr; RemoteCtrlTask() &rArr; Interact::update_roboArm(RoboArm&) &rArr; Interact::receive_xyz(RoboArm&) &rArr; RoboArm::ikine(std::__2::array&lang;float, 3u&rang; const&) &rArr; slove_q2(float, float, float, float, float) &rArr; roboarm_dep::arm_atan2_f32(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlTask()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_REMOTE_CTRL_TAS)
</UL>
<P><STRONG><a name="[ee]"></a>OS_SubBoardTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, thread.o(.text.OS_SubBoardTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = OS_SubBoardTask &rArr; SubBoardTask() &rArr; SubBoard::transmit() &rArr; SuperUart::transmit(unsigned short) &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoardTask()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_SUB_TASK)
</UL>
<P><STRONG><a name="[68]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.OTG_HS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = OTG_HS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; PCD_EP_OutSetupPacket_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SPI2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI2_IRQHandler &rArr; HAL_SPI_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SPI6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.SPI6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI6_IRQHandler &rArr; HAL_SPI_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>StartDefaultTask</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, thread.o(.text.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = StartDefaultTask &rArr; StartTask() &rArr; MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.rodata..L__const.MX_FREERTOS_Init.os_thread_def_defaultTask)
</UL>
<P><STRONG><a name="[1f]"></a>SysTick_Handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, port.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[2af]"></a>SystemClock_Config</STRONG> (Thumb, 210 bytes, Stack size 128 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>SystemInit</STRONG> (Thumb, 314 bytes, Stack size 0 bytes, system_stm32h7xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>TIM17_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.TIM17_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = TIM17_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; UserTimCallback &rArr; TimDetectManagerInstance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; UserTimCallback &rArr; TimDetectManagerInstance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[214]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 464 bytes, Stack size 12 bytes, stm32h7xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[229]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(.text.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[221]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 364 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(.text.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[54]"></a>UART5_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = UART5_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UARTEx_RxEventCallback &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_c
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>UART7_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = UART7_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UARTEx_RxEventCallback &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[203]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 328 bytes, Stack size 4 bytes, stm32h7xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[205]"></a>UART_CheckIdleState</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, stm32h7xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[204]"></a>UART_SetConfig</STRONG> (Thumb, 2638 bytes, Stack size 128 bytes, stm32h7xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RS485Ex_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[22d]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>

<P><STRONG><a name="[2b1]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[a2]"></a>USART10_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.USART10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = USART10_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UARTEx_RxEventCallback &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UARTEx_RxEventCallback &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USART3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_it.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UARTEx_RxEventCallback &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>USBD_CDC_GetDeviceQualifierDescriptor</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, usbd_cdc.o(.text.USBD_CDC_GetDeviceQualifierDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_CDC_GetDeviceQualifierDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[13f]"></a>USBD_CDC_ReceivePacket</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, usbd_cdc.o(.text.USBD_CDC_ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_HS
</UL>

<P><STRONG><a name="[28d]"></a>USBD_CDC_RegisterInterface</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, usbd_cdc.o(.text.USBD_CDC_RegisterInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_CDC_RegisterInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[13c]"></a>USBD_CDC_SetRxBuffer</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_cdc.o(.text.USBD_CDC_SetRxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_SetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_HS
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_HS
</UL>

<P><STRONG><a name="[13b]"></a>USBD_CDC_SetTxBuffer</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, usbd_cdc.o(.text.USBD_CDC_SetTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_CDC_SetTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Transmit_HS
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_HS
</UL>

<P><STRONG><a name="[141]"></a>USBD_CDC_TransmitPacket</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, usbd_cdc.o(.text.USBD_CDC_TransmitPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Transmit_HS
</UL>

<P><STRONG><a name="[2e2]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_core.o(.text.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[2d3]"></a>USBD_CoreFindEP</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(.text.USBD_CoreFindEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CoreFindEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[2d4]"></a>USBD_CoreFindIF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(.text.USBD_CoreFindIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CoreFindIF
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
</UL>

<P><STRONG><a name="[2c5]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_ioreq.o(.text.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[2c6]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_ioreq.o(.text.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[2c2]"></a>USBD_CtlError</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbd_ctlreq.o(.text.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2c1]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, usbd_ioreq.o(.text.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
</UL>

<P><STRONG><a name="[2c8]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_ioreq.o(.text.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[2c0]"></a>USBD_CtlSendData</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, usbd_ioreq.o(.text.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[2c4]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_ioreq.o(.text.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
</UL>

<P><STRONG><a name="[2bc]"></a>USBD_GetEpDesc</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, usbd_core.o(.text.USBD_GetEpDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_GetEpDesc &rArr; USBD_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetNextDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_GetOtherSpeedCfgDesc
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_GetFSCfgDesc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_GetHSCfgDesc
</UL>

<P><STRONG><a name="[2cb]"></a>USBD_GetNextDesc</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, usbd_core.o(.text.USBD_GetNextDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_GetNextDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>

<P><STRONG><a name="[2cd]"></a>USBD_GetString</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, usbd_ctlreq.o(.text.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_GetString &rArr; USBD_GetLen
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetLen
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HS_InterfaceStrDescriptor
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HS_ConfigStrDescriptor
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HS_ProductStrDescriptor
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HS_ManufacturerStrDescriptor
</UL>

<P><STRONG><a name="[2d1]"></a>USBD_Get_USB_Status</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, usbd_conf.o(.text.USBD_Get_USB_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[5]"></a>USBD_HS_ConfigStrDescriptor</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_desc.o(.text.USBD_HS_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_HS_ConfigStrDescriptor &rArr; USBD_GetString &rArr; USBD_GetLen
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.HS_Desc)
</UL>
<P><STRONG><a name="[0]"></a>USBD_HS_DeviceDescriptor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_desc.o(.text.USBD_HS_DeviceDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_HS_DeviceDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.HS_Desc)
</UL>
<P><STRONG><a name="[6]"></a>USBD_HS_InterfaceStrDescriptor</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_desc.o(.text.USBD_HS_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_HS_InterfaceStrDescriptor &rArr; USBD_GetString &rArr; USBD_GetLen
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.HS_Desc)
</UL>
<P><STRONG><a name="[1]"></a>USBD_HS_LangIDStrDescriptor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_desc.o(.text.USBD_HS_LangIDStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_HS_LangIDStrDescriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.HS_Desc)
</UL>
<P><STRONG><a name="[2]"></a>USBD_HS_ManufacturerStrDescriptor</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, usbd_desc.o(.text.USBD_HS_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_HS_ManufacturerStrDescriptor &rArr; USBD_GetString &rArr; USBD_GetLen
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.HS_Desc)
</UL>
<P><STRONG><a name="[3]"></a>USBD_HS_ProductStrDescriptor</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_desc.o(.text.USBD_HS_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_HS_ProductStrDescriptor &rArr; USBD_GetString &rArr; USBD_GetLen
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.HS_Desc)
</UL>
<P><STRONG><a name="[4]"></a>USBD_HS_SerialStrDescriptor</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_desc.o(.text.USBD_HS_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_HS_SerialStrDescriptor &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data.HS_Desc)
</UL>
<P><STRONG><a name="[28b]"></a>USBD_Init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, usbd_core.o(.text.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[2d0]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_conf.o(.text.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall &rArr; USB_EPClearStall
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[2ba]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_conf.o(.text.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
</UL>

<P><STRONG><a name="[1b7]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, usbd_core.o(.text.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindEP
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RunTestMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[1b9]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 434 bytes, Stack size 48 bytes, usbd_core.o(.text.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindEP
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindIF
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[1b5]"></a>USBD_LL_DevConnected</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, usbd_core.o(.text.USBD_LL_DevConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>

<P><STRONG><a name="[1bb]"></a>USBD_LL_DevDisconnected</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbd_core.o(.text.USBD_LL_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
</UL>

<P><STRONG><a name="[2b9]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbd_conf.o(.text.USBD_LL_GetRxDataSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_GetRxDataSize &rArr; HAL_PCD_EP_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataOut
</UL>

<P><STRONG><a name="[2cf]"></a>USBD_LL_Init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, usbd_conf.o(.text.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetTxFiFo
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetRxFiFo
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[2e4]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_conf.o(.text.USBD_LL_IsStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_IsStallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1e0]"></a>USBD_LL_IsoINIncomplete</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, usbd_core.o(.text.USBD_LL_IsoINIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
</UL>

<P><STRONG><a name="[1e1]"></a>USBD_LL_IsoOUTIncomplete</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, usbd_core.o(.text.USBD_LL_IsoOUTIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
</UL>

<P><STRONG><a name="[2be]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, usbd_conf.o(.text.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
</UL>

<P><STRONG><a name="[2bf]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, usbd_conf.o(.text.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[1ec]"></a>USBD_LL_Reset</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, usbd_core.o(.text.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[1ed]"></a>USBD_LL_Resume</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, usbd_core.o(.text.USBD_LL_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[1ee]"></a>USBD_LL_SOF</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_core.o(.text.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[1eb]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(.text.USBD_LL_SetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[2d8]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_conf.o(.text.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress &rArr; USB_SetDevAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
</UL>

<P><STRONG><a name="[1f2]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, usbd_core.o(.text.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[2c7]"></a>USBD_LL_StallEP</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_conf.o(.text.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[2dd]"></a>USBD_LL_Start</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_conf.o(.text.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[1f6]"></a>USBD_LL_Suspend</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, usbd_core.o(.text.USBD_LL_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[2b8]"></a>USBD_LL_Transmit</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, usbd_conf.o(.text.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_TransmitPacket
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataIn
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>

<P><STRONG><a name="[2d9]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, usbd_ctlreq.o(.text.USBD_ParseSetupRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_ParseSetupRequest &rArr; SWAPBYTE
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWAPBYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[28c]"></a>USBD_RegisterClass</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, usbd_core.o(.text.USBD_RegisterClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_RegisterClass
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[2d2]"></a>USBD_RunTestMode</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, usbd_core.o(.text.USBD_RunTestMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_RunTestMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[2e1]"></a>USBD_SetClassConfig</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbd_core.o(.text.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[28e]"></a>USBD_Start</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usbd_core.o(.text.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[2da]"></a>USBD_StdDevReq</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, usbd_ctlreq.o(.text.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrFeature
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetFeature
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetStatus
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetConfig
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[2dc]"></a>USBD_StdEPReq</STRONG> (Thumb, 940 bytes, Stack size 56 bytes, usbd_ctlreq.o(.text.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindEP
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[2db]"></a>USBD_StdItfReq</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, usbd_ctlreq.o(.text.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindIF
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[2bb]"></a>USBD_static_free</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, usbd_conf.o(.text.USBD_static_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_static_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
</UL>

<P><STRONG><a name="[2bd]"></a>USBD_static_malloc</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, usbd_conf.o(.text.USBD_static_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_static_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
</UL>

<P><STRONG><a name="[1c3]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32h7xx_ll_usb.o(.text.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[1db]"></a>USB_ActivateSetup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32h7xx_ll_usb.o(.text.USB_ActivateSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ActivateSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1e5]"></a>USB_CoreInit</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, stm32h7xx_ll_usb.o(.text.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_CoreInit &rArr; USB_CoreReset
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1bf]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, stm32h7xx_ll_usb.o(.text.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[1f5]"></a>USB_DevConnect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32h7xx_ll_usb.o(.text.USB_DevConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[1e9]"></a>USB_DevDisconnect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32h7xx_ll_usb.o(.text.USB_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DevDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1e7]"></a>USB_DevInit</STRONG> (Thumb, 656 bytes, Stack size 56 bytes, stm32h7xx_ll_usb.o(.text.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevSpeed
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1e4]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32h7xx_ll_usb.o(.text.USB_DisableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1c8]"></a>USB_EP0_OutStart</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, stm32h7xx_ll_usb.o(.text.USB_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutSetupPacket_int
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1c1]"></a>USB_EPClearStall</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32h7xx_ll_usb.o(.text.USB_EPClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[1c7]"></a>USB_EPSetStall</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32h7xx_ll_usb.o(.text.USB_EPSetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EPSetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[1c5]"></a>USB_EPStartXfer</STRONG> (Thumb, 1000 bytes, Stack size 40 bytes, stm32h7xx_ll_usb.o(.text.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
</UL>

<P><STRONG><a name="[1bd]"></a>USB_EPStopXfer</STRONG> (Thumb, 284 bytes, Stack size 20 bytes, stm32h7xx_ll_usb.o(.text.USB_EPStopXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_EPStopXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Abort
</UL>

<P><STRONG><a name="[1f4]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, stm32h7xx_ll_usb.o(.text.USB_EnableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_EnableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[2e7]"></a>USB_FlushRxFifo</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32h7xx_ll_usb.o(.text.USB_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[1d5]"></a>USB_FlushTxFifo</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32h7xx_ll_usb.o(.text.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1dc]"></a>USB_GetDevSpeed</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_ll_usb.o(.text.USB_GetDevSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_GetDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1cb]"></a>USB_GetMode</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32h7xx_ll_usb.o(.text.USB_GetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1d3]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, stm32h7xx_ll_usb.o(.text.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ReadDevAllInEpInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1ce]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, stm32h7xx_ll_usb.o(.text.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ReadDevAllOutEpInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1d4]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32h7xx_ll_usb.o(.text.USB_ReadDevInEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_ReadDevInEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1cf]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32h7xx_ll_usb.o(.text.USB_ReadDevOutEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ReadDevOutEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1cc]"></a>USB_ReadInterrupts</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_ll_usb.o(.text.USB_ReadInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1cd]"></a>USB_ReadPacket</STRONG> (Thumb, 180 bytes, Stack size 36 bytes, stm32h7xx_ll_usb.o(.text.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1e6]"></a>USB_SetCurrentMode</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, stm32h7xx_ll_usb.o(.text.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[1f0]"></a>USB_SetDevAddress</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32h7xx_ll_usb.o(.text.USB_SetDevAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[2e6]"></a>USB_SetDevSpeed</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32h7xx_ll_usb.o(.text.USB_SetDevSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_SetDevSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[1dd]"></a>USB_SetTurnaroundTime</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, stm32h7xx_ll_usb.o(.text.USB_SetTurnaroundTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_SetTurnaroundTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2a9]"></a>USB_WritePacket</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, stm32h7xx_ll_usb.o(.text.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
</UL>

<P><STRONG><a name="[1b]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h723xx.o(RESET)
</UL>
<P><STRONG><a name="[22b]"></a>UserTimCallback</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timcallback.o(.text.UserTimCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = UserTimCallback &rArr; TimDetectManagerInstance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;TimDetect&rang;::JudgeLost()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetectManagerInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[29c]"></a>BuzzerTask()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, buzzertask.o(.text._Z10BuzzerTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = BuzzerTask() &rArr; bool Buzzer::StartMusic&lang;(Buzzer::delay_pl)0&rang;() &rArr; void Buzzer::delay&lang;(Buzzer::delay_pl)0&rang;(unsigned int) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool Buzzer::StartMusic&lang;(Buzzer::delay_pl)0&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_BuzzerTask
</UL>

<P><STRONG><a name="[435]"></a>float whileLimit&lang;float&rang;(float&, float, float)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lkmotor.o(.text._Z10whileLimitIfET_RS0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = float whileLimit&lang;float&rang;(float&, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotor::get_feedback(unsigned char*)
</UL>

<P><STRONG><a name="[29a]"></a>ArmInitTask()</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, arminittask.o(.text._Z11ArmInitTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = ArmInitTask() &rArr; roboarm_dep::Differentiator::init(std::__2::array&lang;float, 6u&rang;&) &rArr; roboarm_dep::Differentiator::read_fram() &rArr; Fram::block_read(unsigned short, unsigned char*, unsigned short, unsigned short) &rArr; SuperIIC::mem_block_read_bytes(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short, unsigned int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::Differentiator::init(std::__2::array&lang;float, 6u&rang;&)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::load_target(std::__2::array&lang;float, 6u&rang; const&)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::update_relative_pos()
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::init_offset(std::__2::array&lang;float, 6u&rang;&)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::enable()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Buzzer::PushMusic&lang;(unsigned short)24&rang;(std::__2::array&lang;unsigned short, (unsigned short)24&rang; const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ArmInitTask
</UL>

<P><STRONG><a name="[29d]"></a>ChassisTask()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, chassistask.o(.text._Z11ChassisTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ChassisTask() &rArr; Chassis::update_slope(interact_dep::chassis_mode) &rArr; Chassis::load_speed(interact_dep::chassis_mode) &rArr; float my_abs&lang;float&rang;(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::update_slope(interact_dep::chassis_mode)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::UpdatePid()
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::send_foc()
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ChassisTask
</UL>

<P><STRONG><a name="[2a8]"></a>SubBoardTask()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, subboardtask.o(.text._Z12SubBoardTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SubBoardTask() &rArr; SubBoard::transmit() &rArr; SuperUart::transmit(unsigned short) &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::set_pump(unsigned char)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::set_valve1(unsigned char)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::set_valve5(unsigned char)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::set_valve4(unsigned char)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::set_valve3(unsigned char)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::set_valve2(unsigned char)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::transmit()
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SubBoardTask
</UL>

<P><STRONG><a name="[448]"></a>bool isApproxEqual&lang;float&rang;(float, float, float)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, interact.o(.text._Z13isApproxEqualIfEbT_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bool isApproxEqual&lang;float&rang;(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::update_roboArm(RoboArm&)
</UL>

<P><STRONG><a name="[2a1]"></a>ImageTransTask()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, imagetranstask.o(.text._Z14ImageTransTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ImageTransTask() &rArr; ImageTrans::transmit() &rArr; SuperUart::transmit_dma_pdata(unsigned char*, unsigned short) &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayUntil
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::get_angle(std::__2::array&lang;float, 6u&rang; const&)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::transmit()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::set_map_back(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ImageTransTask
</UL>

<P><STRONG><a name="[319]"></a>KeyBoardUpdate(Key*, KeyBoard&)</STRONG> (Thumb, 754 bytes, Stack size 48 bytes, key.o(.text._Z14KeyBoardUpdateP3KeyR8KeyBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = KeyBoardUpdate(Key*, KeyBoard&) &rArr; CustomList&lang;Key::key_callback&rang;::end() &rArr; CustomList&lang;Key::key_callback&rang;::Iterator::Iterator__sub_object(CustomList&lang;Key::key_callback&rang;::Node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Key::key_callback&rang;::Iterator::operator++()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Key::key_callback&rang;::Iterator::operator*()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Key::key_callback&rang;::Iterator::operator!=(CustomList&lang;Key::key_callback&rang;::Iterator const&) const
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Key::key_callback&rang;::end()
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Key::key_callback&rang;::begin()
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Key::key_callback&rang;::empty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbTask()
</UL>

<P><STRONG><a name="[2a5]"></a>OneStepGetTask()</STRONG> (Thumb, 564 bytes, Stack size 56 bytes, onestepgettask.o(.text._Z14OneStepGetTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = OneStepGetTask() &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::transmit(unsigned int, short, short, short, short)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::move_down(float&, bool)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosPidControl&lang;M3508&rang;::set_position(float)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::move_upward(float&)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::move_back(float)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::move_front(float, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_OneStepGetTask
</UL>

<P><STRONG><a name="[2a7]"></a>RemoteCtrlTask()</STRONG> (Thumb, 878 bytes, Stack size 24 bytes, remotectrltask.o(.text._Z14RemoteCtrlTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = RemoteCtrlTask() &rArr; Interact::update_roboArm(RoboArm&) &rArr; Interact::receive_xyz(RoboArm&) &rArr; RoboArm::ikine(std::__2::array&lang;float, 3u&rang; const&) &rArr; slove_q2(float, float, float, float, float) &rArr; roboarm_dep::arm_atan2_f32(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayUntil
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::update_chassis(Chassis&)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::update_roboArm(RoboArm&)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RemoteCtrlTask
</UL>

<P><STRONG><a name="[329]"></a>KeyBoardRegister(Key*, unsigned int, KeyCombineType, void (*)(KeyEventType))</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, key.o(.text._Z16KeyBoardRegisterP3Keyj14KeyCombineTypePFv12KeyEventTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = KeyBoardRegister(Key*, unsigned int, KeyCombineType, void (*)(KeyEventType)) &rArr; CustomList&lang;Key::key_callback&rang;::push_back(Key::key_callback const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Key::key_callback&rang;::push_back(Key::key_callback const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask()
</UL>

<P><STRONG><a name="[c6]"></a>air_left_callback(KeyEventType)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, keycallback.o(.text._Z17air_left_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = air_left_callback(KeyEventType) &rArr; SubBoard::set_valve1(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::set_valve1(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[c7]"></a>air_right_callback(KeyEventType)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, keycallback.o(.text._Z18air_right_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = air_right_callback(KeyEventType) &rArr; SubBoard::set_pump(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::set_pump(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[c0]"></a>chassis_a_callback(KeyEventType)</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, keycallback.o(.text._Z18chassis_a_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chassis_a_callback(KeyEventType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[c2]"></a>chassis_d_callback(KeyEventType)</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, keycallback.o(.text._Z18chassis_d_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chassis_d_callback(KeyEventType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[c3]"></a>chassis_q_callback(KeyEventType)</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, keycallback.o(.text._Z18chassis_q_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = chassis_q_callback(KeyEventType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[c1]"></a>chassis_s_callback(KeyEventType)</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, keycallback.o(.text._Z18chassis_s_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chassis_s_callback(KeyEventType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[bf]"></a>chassis_w_callback(KeyEventType)</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, keycallback.o(.text._Z18chassis_w_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chassis_w_callback(KeyEventType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[be]"></a>remote_ctrl_recover()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, interact.o(.text._Z19remote_ctrl_recoverv))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = remote_ctrl_recover() &rArr; RemoteControl::start() &rArr; SuperUart::receive_dma_idle(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl::start()
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Buzzer::PushMusic&lang;(unsigned short)8&rang;(std::__2::array&lang;unsigned short, (unsigned short)8&rang; const&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[32d]"></a>CountManagerInstance()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, count.o(.text._Z20CountManagerInstancev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = CountManagerInstance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManager::CountManager__sub_object()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugTask()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::~Count__sub_object()
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::Count__sub_object()
</UL>

<P><STRONG><a name="[331]"></a>DetectManagerInstance()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, detect.o(.text._Z21DetectManagerInstancev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = DetectManagerInstance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;Detect&rang;::DetectManager__sub_object()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugTask()
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::Detect(unsigned int, void (*)(), void (*)())
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::~Detect()
</UL>

<P><STRONG><a name="[ce]"></a>one_step_get_c_callback(KeyEventType)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, keycallback.o(.text._Z23one_step_get_c_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = one_step_get_c_callback(KeyEventType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[d0]"></a>one_step_get_v_callback(KeyEventType)</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, keycallback.o(.text._Z23one_step_get_v_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = one_step_get_v_callback(KeyEventType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[cc]"></a>one_step_get_x_callback(KeyEventType)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, keycallback.o(.text._Z23one_step_get_x_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = one_step_get_x_callback(KeyEventType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[ca]"></a>one_step_get_z_callback(KeyEventType)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, keycallback.o(.text._Z23one_step_get_z_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = one_step_get_z_callback(KeyEventType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[2e8]"></a>TimDetectManagerInstance()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, detect.o(.text._Z24TimDetectManagerInstancev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = TimDetectManagerInstance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;TimDetect&rang;::DetectManager__sub_object()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTimCallback
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetect::TimDetect(unsigned int, void (*)(), void (*)())
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetect::~TimDetect()
</UL>

<P><STRONG><a name="[c5]"></a>robo_arm_ctrl_q_callback(KeyEventType)</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, keycallback.o(.text._Z24robo_arm_ctrl_q_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = robo_arm_ctrl_q_callback(KeyEventType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[c8]"></a>robo_arm_shift_f_callback(KeyEventType)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, keycallback.o(.text._Z25robo_arm_shift_f_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = robo_arm_shift_f_callback(KeyEventType) &rArr; ImageTrans::toggle_map_back()
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::toggle_map_back()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[c4]"></a>robo_arm_shift_q_callback(KeyEventType)</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, keycallback.o(.text._Z25robo_arm_shift_q_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = robo_arm_shift_q_callback(KeyEventType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[c9]"></a>robo_arm_shift_r_callback(KeyEventType)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, keycallback.o(.text._Z25robo_arm_shift_r_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = robo_arm_shift_r_callback(KeyEventType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[d4]"></a>one_step_get_ctrl_c_callback(KeyEventType)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, keycallback.o(.text._Z28one_step_get_ctrl_c_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = one_step_get_ctrl_c_callback(KeyEventType) &rArr; SubBoard::set_valve4(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::set_valve4(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[d5]"></a>one_step_get_ctrl_v_callback(KeyEventType)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, keycallback.o(.text._Z28one_step_get_ctrl_v_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = one_step_get_ctrl_v_callback(KeyEventType) &rArr; SubBoard::set_valve5(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::set_valve5(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[d3]"></a>one_step_get_ctrl_x_callback(KeyEventType)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, keycallback.o(.text._Z28one_step_get_ctrl_x_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = one_step_get_ctrl_x_callback(KeyEventType) &rArr; SubBoard::set_valve3(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::set_valve3(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[d2]"></a>one_step_get_ctrl_z_callback(KeyEventType)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, keycallback.o(.text._Z28one_step_get_ctrl_z_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = one_step_get_ctrl_z_callback(KeyEventType) &rArr; SubBoard::set_valve2(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::set_valve2(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[cf]"></a>one_step_get_shift_c_callback(KeyEventType)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, keycallback.o(.text._Z29one_step_get_shift_c_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = one_step_get_shift_c_callback(KeyEventType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[d1]"></a>one_step_get_shift_v_callback(KeyEventType)</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, keycallback.o(.text._Z29one_step_get_shift_v_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = one_step_get_shift_v_callback(KeyEventType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[cd]"></a>one_step_get_shift_x_callback(KeyEventType)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, keycallback.o(.text._Z29one_step_get_shift_x_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = one_step_get_shift_x_callback(KeyEventType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[cb]"></a>one_step_get_shift_z_callback(KeyEventType)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, keycallback.o(.text._Z29one_step_get_shift_z_callback12KeyEventType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = one_step_get_shift_z_callback(KeyEventType)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> starttask.o(.text._Z9StartTaskv)
</UL>
<P><STRONG><a name="[335]"></a>start()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cppport.o(.text._Z5startv))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = start() &rArr; RemoteControl::start() &rArr; SuperUart::receive_dma_idle(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl::start()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_c
</UL>

<P><STRONG><a name="[2a3]"></a>KbTask()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, kbtask.o(.text._Z6KbTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = KbTask() &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardUpdate(Key*, KeyBoard&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_KbTask
</UL>

<P><STRONG><a name="[2a6]"></a>PCTask()</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, pctask.o(.text._Z6PCTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = PCTask() &rArr; Interact::transmit_relative_pos(std::__2::array&lang;float, 6u&rang; const&) &rArr; CDC_Transmit_HS &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::transmit_relative_pos(std::__2::array&lang;float, 6u&rang; const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PCTask
</UL>

<P><STRONG><a name="[405]"></a>float my_abs&lang;float&rang;(float)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, imu.o(.text._Z6my_absIfET_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = float my_abs&lang;float&rang;(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::is_temp_dead_condition(float)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::ikine(std::__2::array&lang;float, 3u&rang; const&)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::load_speed(interact_dep::chassis_mode)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::set_position_near(float, float)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::set_position(float, float)
</UL>

<P><STRONG><a name="[29b]"></a>ArmTask()</STRONG> (Thumb, 796 bytes, Stack size 128 bytes, armtask.o(.text._Z7ArmTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = ArmTask() &rArr; roboarm_dep::Differentiator::write_fram() &rArr; Fram::block_write(unsigned short, unsigned char*, unsigned short, unsigned short) &rArr; SuperIIC::mem_block_write_bytes(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short, unsigned int) &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayUntil
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::Differentiator::write_fram()
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::load_target(std::__2::array&lang;float, 6u&rang; const&)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::update_relative_pos()
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::read_totalposition()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::transmit(unsigned int, short, short, short, short)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::set_position_near(float, float)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::set_position(float, float)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosPidControl&lang;M2006Diff&rang;::output()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosPidControl&lang;M2006Diff&rang;::set_position(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ArmTask
</UL>

<P><STRONG><a name="[2a0]"></a>IMUTask()</STRONG> (Thumb, 518 bytes, Stack size 40 bytes, imutask.o(.text._Z7IMUTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = IMUTask() &rArr; W25Q64::write_buffer(unsigned int, unsigned char*, unsigned int) &rArr; W25Q64::write_page(unsigned int, unsigned char*, unsigned int) &rArr; W25Q64::write_enable() &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::raed_buffer(unsigned int, unsigned char*, unsigned int)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::write_buffer(unsigned int, unsigned char*, unsigned int)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::erase_sector_4(unsigned int)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::update_offset(unsigned int, unsigned char&)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::is_temp_dead_condition(float)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::is_temp_const(unsigned int)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::update_raw_data()
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::update()
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::mahony_start()
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::init()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IMUTask
</UL>

<P><STRONG><a name="[2a4]"></a>LedTask()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ledtask.o(.text._Z7LedTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = LedTask() &rArr; RGBLED::update() &rArr; RGBLED::SetColor() &rArr; RGBLED::load() &rArr; SuperSPI::transmit_dma(unsigned char const*, unsigned short) &rArr; HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLED::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LedTask
</UL>

<P><STRONG><a name="[410]"></a>float limited&lang;float&rang;(float&&, float, float)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pid.o(.text._Z7limitedIfET_OS0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = float limited&lang;float&rang;(float&&, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::update(float, float)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_xyz(RoboArm&)
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_rc()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::set_position_near(float, float)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::set_position(float, float)
</UL>

<P><STRONG><a name="[445]"></a>float limited&lang;float&rang;(float&, float, float)</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, interact.o(.text._Z7limitedIfET_RS0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = float limited&lang;float&rang;(float&, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_xyz(RoboArm&)
</UL>

<P><STRONG><a name="[34a]"></a>slove_q2(float, float, float, float, float)</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, roboarm.o(.text._Z8slove_q2fffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = slove_q2(float, float, float, float, float) &rArr; roboarm_dep::arm_atan2_f32(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::arm_atan2_f32(float, float)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::is_equal(float, float)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::ikine(std::__2::array&lang;float, 3u&rang; const&)
</UL>

<P><STRONG><a name="[29e]"></a>DebugTask()</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, debugtask.o(.text._Z9DebugTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = DebugTask() &rArr; osDelayUntil &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayUntil
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperIWDG::GotInstance()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManagerInstance()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManagerInstance()
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManager::mark()
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;Detect&rang;::JudgeLost()
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DebugTask
</UL>

<P><STRONG><a name="[29f]"></a>ErrorTask()</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, errortask.o(.text._Z9ErrorTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = ErrorTask() &rArr; RGBLED::SetColor(unsigned char, unsigned char, unsigned char) &rArr; RGBLED::load() &rArr; SuperSPI::transmit_dma(unsigned char const*, unsigned short) &rArr; HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLED::SetColor(unsigned char, unsigned char, unsigned char)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperIWDG::GotInstance()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Buzzer::StartMusic&lang;(unsigned short)8, (Buzzer::delay_pl)1&rang;(std::__2::array&lang;unsigned short, (unsigned short)8&rang; const&)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::close()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::transmit(unsigned int, short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ErrorTask
</UL>

<P><STRONG><a name="[2a2]"></a>JudgeTask()</STRONG> (Thumb, 738 bytes, Stack size 184 bytes, judgetask.o(.text._Z9JudgeTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = JudgeTask() &rArr; UI::update() &rArr; SuperUart::transmit_dma_pdata(unsigned char*, unsigned short) &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::update()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void UI::operate_fig&lang;ui_dep::int_data&rang;(ui_dep::ui_control&, ui_dep::layer, ui_dep::color, unsigned short, unsigned short, unsigned short, ui_dep::int_data const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_JudgeTask
</UL>

<P><STRONG><a name="[2ad]"></a>StartTask()</STRONG> (Thumb, 798 bytes, Stack size 80 bytes, starttask.o(.text._Z9StartTaskv))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = StartTask() &rArr; MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::init()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl::start()
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardRegister(Key*, unsigned int, KeyCombineType, void (*)(KeyEventType))
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::start()
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::filter_config(unsigned short, can_dep::filter_mode, unsigned int, unsigned int)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::start_receive()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::receive_dma_idle(unsigned short)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::start_receive()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::Start()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperGPIO::WriteUp()
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperGPIO::WriteDown()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperDWT::get_tick()
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[43d]"></a>bool isInRange&lang;float&rang;(float, float, float, float)</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, roboarm.o(.text._Z9isInRangeIfEbT_S0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bool isInRange&lang;float&rang;(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::ikine(std::__2::array&lang;float, 3u&rang; const&)
</UL>

<P><STRONG><a name="[35f]"></a>CustomHeap::free(void*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, customheap.o(.text._ZN10CustomHeap4freeEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::~SuperUart()
</UL>

<P><STRONG><a name="[361]"></a>CustomHeap::malloc(unsigned int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, customheap.o(.text._ZN10CustomHeap6mallocEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::SuperUart(__UART_HandleTypeDef*, unsigned short, unsigned short)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>

<P><STRONG><a name="[363]"></a>CustomHeap::CustomHeap__sub_object(unsigned long long*, unsigned int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, vari.o(.text._ZN10CustomHeapC2EPyj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CustomHeap::CustomHeap__sub_object(unsigned long long*, unsigned int) &rArr; osRtxMemoryInit &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHeadPtr(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[31c]"></a>CustomList&lang;Key::key_callback&rang;::end()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, key.o(.text._ZN10CustomListIN3Key12key_callbackEE3endEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CustomList&lang;Key::key_callback&rang;::end() &rArr; CustomList&lang;Key::key_callback&rang;::Iterator::Iterator__sub_object(CustomList&lang;Key::key_callback&rang;::Node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Key::key_callback&rang;::Iterator::Iterator__sub_object(CustomList&lang;Key::key_callback&rang;::Node*)
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardUpdate(Key*, KeyBoard&)
</UL>

<P><STRONG><a name="[368]"></a>CustomList&lang;Key::key_callback&rang;::Node::Node__sub_object(Key::key_callback const&)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, key.o(.text._ZN10CustomListIN3Key12key_callbackEE4NodeC2ERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CustomList&lang;Key::key_callback&rang;::Node::Node__sub_object(Key::key_callback const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Key::key_callback&rang;::push_back(Key::key_callback const&)
</UL>

<P><STRONG><a name="[31b]"></a>CustomList&lang;Key::key_callback&rang;::begin()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, key.o(.text._ZN10CustomListIN3Key12key_callbackEE5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CustomList&lang;Key::key_callback&rang;::begin() &rArr; CustomList&lang;Key::key_callback&rang;::Iterator::Iterator__sub_object(CustomList&lang;Key::key_callback&rang;::Node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Key::key_callback&rang;::Iterator::Iterator__sub_object(CustomList&lang;Key::key_callback&rang;::Node*)
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardUpdate(Key*, KeyBoard&)
</UL>

<P><STRONG><a name="[366]"></a>CustomList&lang;Key::key_callback&rang;::Iterator::Iterator__sub_object(CustomList&lang;Key::key_callback&rang;::Node*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, key.o(.text._ZN10CustomListIN3Key12key_callbackEE8IteratorC2EPNS2_4NodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CustomList&lang;Key::key_callback&rang;::Iterator::Iterator__sub_object(CustomList&lang;Key::key_callback&rang;::Node*)
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Key::key_callback&rang;::end()
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Key::key_callback&rang;::begin()
</UL>

<P><STRONG><a name="[31e]"></a>CustomList&lang;Key::key_callback&rang;::Iterator::operator*()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, key.o(.text._ZN10CustomListIN3Key12key_callbackEE8IteratordeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CustomList&lang;Key::key_callback&rang;::Iterator::operator*()
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardUpdate(Key*, KeyBoard&)
</UL>

<P><STRONG><a name="[31f]"></a>CustomList&lang;Key::key_callback&rang;::Iterator::operator++()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, key.o(.text._ZN10CustomListIN3Key12key_callbackEE8IteratorppEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CustomList&lang;Key::key_callback&rang;::Iterator::operator++()
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardUpdate(Key*, KeyBoard&)
</UL>

<P><STRONG><a name="[32a]"></a>CustomList&lang;Key::key_callback&rang;::push_back(Key::key_callback const&)</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, key.o(.text._ZN10CustomListIN3Key12key_callbackEE9push_backERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CustomList&lang;Key::key_callback&rang;::push_back(Key::key_callback const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Key::key_callback&rang;::Node::Node__sub_object(Key::key_callback const&)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardRegister(Key*, unsigned int, KeyCombineType, void (*)(KeyEventType))
</UL>

<P><STRONG><a name="[40e]"></a>CustomList&lang;Key::key_callback&rang;::CustomList__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, vari.o(.text._ZN10CustomListIN3Key12key_callbackEEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CustomList&lang;Key::key_callback&rang;::CustomList__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key::Key__sub_object(unsigned int, unsigned int)
</UL>

<P><STRONG><a name="[369]"></a>CustomList&lang;Key::key_callback&rang;::~CustomList__sub_object()</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, vari.o(.text._ZN10CustomListIN3Key12key_callbackEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CustomList&lang;Key::key_callback&rang;::~CustomList__sub_object() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key::~Key__sub_object()
</UL>

<P><STRONG><a name="[36b]"></a>CustomList&lang;Count*&rang;::end()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, debugtask.o(.text._ZN10CustomListIP5CountE3endEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CustomList&lang;Count*&rang;::end() &rArr; CustomList&lang;Count*&rang;::Iterator::Iterator__sub_object(CustomList&lang;Count*&rang;::Node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Count*&rang;::Iterator::Iterator__sub_object(CustomList&lang;Count*&rang;::Node*)
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManager::mark()
</UL>

<P><STRONG><a name="[370]"></a>CustomList&lang;Count*&rang;::Node::Node__sub_object(Count* const&)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, supercan.o(.text._ZN10CustomListIP5CountE4NodeC2ERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CustomList&lang;Count*&rang;::Node::Node__sub_object(Count* const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Count*&rang;::push_back(Count* const&)
</UL>

<P><STRONG><a name="[36d]"></a>CustomList&lang;Count*&rang;::begin()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, debugtask.o(.text._ZN10CustomListIP5CountE5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CustomList&lang;Count*&rang;::begin() &rArr; CustomList&lang;Count*&rang;::Iterator::Iterator__sub_object(CustomList&lang;Count*&rang;::Node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Count*&rang;::Iterator::Iterator__sub_object(CustomList&lang;Count*&rang;::Node*)
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManager::mark()
</UL>

<P><STRONG><a name="[36e]"></a>CustomList&lang;Count*&rang;::remove(Count* const&)</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, superuart.o(.text._ZN10CustomListIP5CountE6removeERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CustomList&lang;Count*&rang;::remove(Count* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManager::unregister_item(Count*)
</UL>

<P><STRONG><a name="[36c]"></a>CustomList&lang;Count*&rang;::Iterator::Iterator__sub_object(CustomList&lang;Count*&rang;::Node*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, debugtask.o(.text._ZN10CustomListIP5CountE8IteratorC2EPNS2_4NodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CustomList&lang;Count*&rang;::Iterator::Iterator__sub_object(CustomList&lang;Count*&rang;::Node*)
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Count*&rang;::end()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Count*&rang;::begin()
</UL>

<P><STRONG><a name="[3c9]"></a>CustomList&lang;Count*&rang;::Iterator::operator*()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, debugtask.o(.text._ZN10CustomListIP5CountE8IteratordeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CustomList&lang;Count*&rang;::Iterator::operator*()
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManager::mark()
</UL>

<P><STRONG><a name="[3cb]"></a>CustomList&lang;Count*&rang;::Iterator::operator++()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, debugtask.o(.text._ZN10CustomListIP5CountE8IteratorppEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CustomList&lang;Count*&rang;::Iterator::operator++()
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManager::mark()
</UL>

<P><STRONG><a name="[36f]"></a>CustomList&lang;Count*&rang;::push_back(Count* const&)</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, supercan.o(.text._ZN10CustomListIP5CountE9push_backERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CustomList&lang;Count*&rang;::push_back(Count* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Count*&rang;::Node::Node__sub_object(Count* const&)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManager::register_item(Count*)
</UL>

<P><STRONG><a name="[3cc]"></a>CustomList&lang;Count*&rang;::CustomList__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, count.o(.text._ZN10CustomListIP5CountEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CustomList&lang;Count*&rang;::CustomList__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManager::CountManager__sub_object()
</UL>

<P><STRONG><a name="[371]"></a>CustomList&lang;Count*&rang;::~CustomList__sub_object()</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, count.o(.text._ZN10CustomListIP5CountED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CustomList&lang;Count*&rang;::~CustomList__sub_object() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManager::~CountManager__sub_object()
</UL>

<P><STRONG><a name="[372]"></a>CustomList&lang;Detect*&rang;::end()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, debugtask.o(.text._ZN10CustomListIP6DetectE3endEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CustomList&lang;Detect*&rang;::end() &rArr; CustomList&lang;Detect*&rang;::Iterator::Iterator__sub_object(CustomList&lang;Detect*&rang;::Node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Detect*&rang;::Iterator::Iterator__sub_object(CustomList&lang;Detect*&rang;::Node*)
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;Detect&rang;::JudgeLost()
</UL>

<P><STRONG><a name="[377]"></a>CustomList&lang;Detect*&rang;::Node::Node__sub_object(Detect* const&)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, detect.o(.text._ZN10CustomListIP6DetectE4NodeC2ERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CustomList&lang;Detect*&rang;::Node::Node__sub_object(Detect* const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Detect*&rang;::push_back(Detect* const&)
</UL>

<P><STRONG><a name="[374]"></a>CustomList&lang;Detect*&rang;::begin()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, debugtask.o(.text._ZN10CustomListIP6DetectE5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CustomList&lang;Detect*&rang;::begin() &rArr; CustomList&lang;Detect*&rang;::Iterator::Iterator__sub_object(CustomList&lang;Detect*&rang;::Node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Detect*&rang;::Iterator::Iterator__sub_object(CustomList&lang;Detect*&rang;::Node*)
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;Detect&rang;::JudgeLost()
</UL>

<P><STRONG><a name="[375]"></a>CustomList&lang;Detect*&rang;::remove(Detect* const&)</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, detect.o(.text._ZN10CustomListIP6DetectE6removeERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;Detect&rang;::Unregister(Detect*)
</UL>

<P><STRONG><a name="[373]"></a>CustomList&lang;Detect*&rang;::Iterator::Iterator__sub_object(CustomList&lang;Detect*&rang;::Node*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, debugtask.o(.text._ZN10CustomListIP6DetectE8IteratorC2EPNS2_4NodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CustomList&lang;Detect*&rang;::Iterator::Iterator__sub_object(CustomList&lang;Detect*&rang;::Node*)
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Detect*&rang;::end()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Detect*&rang;::begin()
</UL>

<P><STRONG><a name="[3d7]"></a>CustomList&lang;Detect*&rang;::Iterator::operator*()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, debugtask.o(.text._ZN10CustomListIP6DetectE8IteratordeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CustomList&lang;Detect*&rang;::Iterator::operator*()
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;Detect&rang;::JudgeLost()
</UL>

<P><STRONG><a name="[3d9]"></a>CustomList&lang;Detect*&rang;::Iterator::operator++()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, debugtask.o(.text._ZN10CustomListIP6DetectE8IteratorppEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CustomList&lang;Detect*&rang;::Iterator::operator++()
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;Detect&rang;::JudgeLost()
</UL>

<P><STRONG><a name="[376]"></a>CustomList&lang;Detect*&rang;::push_back(Detect* const&)</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, detect.o(.text._ZN10CustomListIP6DetectE9push_backERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Detect*&rang;::Node::Node__sub_object(Detect* const&)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;Detect&rang;::Register(Detect*)
</UL>

<P><STRONG><a name="[3da]"></a>CustomList&lang;Detect*&rang;::CustomList__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, detect.o(.text._ZN10CustomListIP6DetectEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CustomList&lang;Detect*&rang;::CustomList__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;Detect&rang;::DetectManager__sub_object()
</UL>

<P><STRONG><a name="[378]"></a>CustomList&lang;Detect*&rang;::~CustomList__sub_object()</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, detect.o(.text._ZN10CustomListIP6DetectED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CustomList&lang;Detect*&rang;::~CustomList__sub_object() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;Detect&rang;::~DetectManager__sub_object()
</UL>

<P><STRONG><a name="[379]"></a>CustomList&lang;TimDetect*&rang;::end()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timcallback.o(.text._ZN10CustomListIP9TimDetectE3endEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CustomList&lang;TimDetect*&rang;::end() &rArr; CustomList&lang;TimDetect*&rang;::Iterator::Iterator__sub_object(CustomList&lang;TimDetect*&rang;::Node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;TimDetect*&rang;::Iterator::Iterator__sub_object(CustomList&lang;TimDetect*&rang;::Node*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;TimDetect&rang;::JudgeLost()
</UL>

<P><STRONG><a name="[37e]"></a>CustomList&lang;TimDetect*&rang;::Node::Node__sub_object(TimDetect* const&)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, detect.o(.text._ZN10CustomListIP9TimDetectE4NodeC2ERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CustomList&lang;TimDetect*&rang;::Node::Node__sub_object(TimDetect* const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;TimDetect*&rang;::push_back(TimDetect* const&)
</UL>

<P><STRONG><a name="[37b]"></a>CustomList&lang;TimDetect*&rang;::begin()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, timcallback.o(.text._ZN10CustomListIP9TimDetectE5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CustomList&lang;TimDetect*&rang;::begin() &rArr; CustomList&lang;TimDetect*&rang;::Iterator::Iterator__sub_object(CustomList&lang;TimDetect*&rang;::Node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;TimDetect*&rang;::Iterator::Iterator__sub_object(CustomList&lang;TimDetect*&rang;::Node*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;TimDetect&rang;::JudgeLost()
</UL>

<P><STRONG><a name="[37c]"></a>CustomList&lang;TimDetect*&rang;::remove(TimDetect* const&)</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, detect.o(.text._ZN10CustomListIP9TimDetectE6removeERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CustomList&lang;TimDetect*&rang;::remove(TimDetect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;TimDetect&rang;::Unregister(TimDetect*)
</UL>

<P><STRONG><a name="[37a]"></a>CustomList&lang;TimDetect*&rang;::Iterator::Iterator__sub_object(CustomList&lang;TimDetect*&rang;::Node*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timcallback.o(.text._ZN10CustomListIP9TimDetectE8IteratorC2EPNS2_4NodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CustomList&lang;TimDetect*&rang;::Iterator::Iterator__sub_object(CustomList&lang;TimDetect*&rang;::Node*)
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;TimDetect*&rang;::end()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;TimDetect*&rang;::begin()
</UL>

<P><STRONG><a name="[3de]"></a>CustomList&lang;TimDetect*&rang;::Iterator::operator*()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, timcallback.o(.text._ZN10CustomListIP9TimDetectE8IteratordeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CustomList&lang;TimDetect*&rang;::Iterator::operator*()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;TimDetect&rang;::JudgeLost()
</UL>

<P><STRONG><a name="[3e0]"></a>CustomList&lang;TimDetect*&rang;::Iterator::operator++()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, timcallback.o(.text._ZN10CustomListIP9TimDetectE8IteratorppEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CustomList&lang;TimDetect*&rang;::Iterator::operator++()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;TimDetect&rang;::JudgeLost()
</UL>

<P><STRONG><a name="[37d]"></a>CustomList&lang;TimDetect*&rang;::push_back(TimDetect* const&)</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, detect.o(.text._ZN10CustomListIP9TimDetectE9push_backERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CustomList&lang;TimDetect*&rang;::push_back(TimDetect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;TimDetect*&rang;::Node::Node__sub_object(TimDetect* const&)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;TimDetect&rang;::Register(TimDetect*)
</UL>

<P><STRONG><a name="[3e1]"></a>CustomList&lang;TimDetect*&rang;::CustomList__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, detect.o(.text._ZN10CustomListIP9TimDetectEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CustomList&lang;TimDetect*&rang;::CustomList__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;TimDetect&rang;::DetectManager__sub_object()
</UL>

<P><STRONG><a name="[37f]"></a>CustomList&lang;TimDetect*&rang;::~CustomList__sub_object()</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, detect.o(.text._ZN10CustomListIP9TimDetectED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CustomList&lang;TimDetect*&rang;::~CustomList__sub_object() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;TimDetect&rang;::~DetectManager__sub_object()
</UL>

<P><STRONG><a name="[314]"></a>ImageTrans::set_map_back(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, imagetranstask.o(.text._ZN10ImageTrans12set_map_backEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ImageTrans::set_map_back(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTransTask()
</UL>

<P><STRONG><a name="[334]"></a>ImageTrans::toggle_map_back()</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, keycallback.o(.text._ZN10ImageTrans15toggle_map_backEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ImageTrans::toggle_map_back()
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robo_arm_shift_f_callback(KeyEventType)
</UL>

<P><STRONG><a name="[233]"></a>ImageTrans::update(KeyBoard&)</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, imagetrans.o(.text._ZN10ImageTrans6updateER8KeyBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ImageTrans::update(KeyBoard&)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[317]"></a>ImageTrans::transmit()</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, imagetrans.o(.text._ZN10ImageTrans8transmitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ImageTrans::transmit() &rArr; SuperUart::transmit_dma_pdata(unsigned char*, unsigned short) &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::transmit_dma_pdata(unsigned char*, unsigned short)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc::append_crc16_check_sum(unsigned char*, unsigned int)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTransTask()
</UL>

<P><STRONG><a name="[316]"></a>ImageTrans::get_angle(std::__2::array&lang;float, 6u&rang; const&)</STRONG> (Thumb, 312 bytes, Stack size 80 bytes, imagetrans.o(.text._ZN10ImageTrans9get_angleERKNSt3__25arrayIfLj6EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ImageTrans::get_angle(std::__2::array&lang;float, 6u&rang; const&) &rArr; std::__2::array&lang;short, 6u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;short, 6u&rang;::operator[][abi:v180000](unsigned int)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTransTask()
</UL>

<P><STRONG><a name="[385]"></a>ImageTrans::ImageTrans__sub_object(__UART_HandleTypeDef*)</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, vari.o(.text._ZN10ImageTransC2EP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ImageTrans::ImageTrans__sub_object(__UART_HandleTypeDef*) &rArr; SuperUart::SuperUart(__UART_HandleTypeDef*, unsigned short, unsigned short) &rArr; Count::Count__sub_object() &rArr; CountManager::register_item(Count*) &rArr; CustomList&lang;Count*&rang;::push_back(Count* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc::append_crc8_check_sum(unsigned char*, unsigned int)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::SuperUart(__UART_HandleTypeDef*, unsigned short, unsigned short)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::Count__sub_object()
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_trans_dep::trans_frame::trans_frame__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::Interact__sub_object(unsigned char const&, unsigned char const&, __UART_HandleTypeDef*, __UART_HandleTypeDef*, __UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[38a]"></a>ImageTrans::~ImageTrans__sub_object()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, vari.o(.text._ZN10ImageTransD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ImageTrans::~ImageTrans__sub_object() &rArr; SuperUart::~SuperUart() &rArr; Count::~Count__sub_object() &rArr; CountManager::unregister_item(Count*) &rArr; CustomList&lang;Count*&rang;::remove(Count* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::~SuperUart()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::~Count__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::~Interact__sub_object()
</UL>

<P><STRONG><a name="[189]"></a>M2006Speed::get_feedback(unsigned short, unsigned char*)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, cancallback.o(.text._ZN10M2006Speed12get_feedbackEtPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = M2006Speed::get_feedback(unsigned short, unsigned char*) &rArr; default_motor&lang;8192u, 36u, 1u&rang;::get_feedback(unsigned char const*) &rArr; Detect::update() &rArr; Detect::getSysTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006::total_cnt()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 36u, 1u&rang;::get_feedback(unsigned char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[38f]"></a>M2006Speed::is_block(short)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, onestepget.o(.text._ZN10M2006Speed8is_blockEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = M2006Speed::is_block(short) &rArr; double std::__2::__math::fabs[abi:v180000]&lang;short, 0&rang;(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double std::__2::__math::fabs[abi:v180000]&lang;short, 0&rang;(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::move_back(float)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::move_front(float, bool)
</UL>

<P><STRONG><a name="[391]"></a>M2006Speed::M2006Speed__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, vari.o(.text._ZN10M2006SpeedC2IJRK3PidRKtEEEDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = M2006Speed::M2006Speed__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; SpeedPidControl&lang;M2006&rang;::SpeedPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; M2006::M2006__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 36u, 1u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPidControl&lang;M2006&rang;::SpeedPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, unsigned short const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;M2006Speed&rang;::Motor__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&)
</UL>

<P><STRONG><a name="[393]"></a>M2006Speed::~M2006Speed__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vari.o(.text._ZN10M2006SpeedD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = M2006Speed::~M2006Speed__sub_object() &rArr; SpeedPidControl&lang;M2006&rang;::~SpeedPidControl__sub_object() &rArr; M2006::~M2006__sub_object() &rArr; default_motor&lang;8192u, 36u, 1u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPidControl&lang;M2006&rang;::~SpeedPidControl__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;M2006Speed&rang;::~Motor__sub_object()
</UL>

<P><STRONG><a name="[395]"></a>M3508Speed::get_feedback(unsigned short, unsigned char const*)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, chassis.o(.text._ZN10M3508Speed12get_feedbackEtPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = M3508Speed::get_feedback(unsigned short, unsigned char const*) &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::get_feedback(unsigned char const*) &rArr; Detect::update() &rArr; Detect::getSysTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 3591u, 187u&rang;::get_feedback(unsigned char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::UpdateMotor()
</UL>

<P><STRONG><a name="[397]"></a>M3508Speed::M3508Speed__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, vari.o(.text._ZN10M3508SpeedC2IJRK3PidRKtEEEDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = M3508Speed::M3508Speed__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; SpeedPidControl&lang;M3508&rang;::SpeedPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; M3508::M3508__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPidControl&lang;M3508&rang;::SpeedPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, unsigned short const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;M3508Speed&rang;::Motor__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&)
</UL>

<P><STRONG><a name="[399]"></a>M3508Speed::~M3508Speed__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vari.o(.text._ZN10M3508SpeedD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = M3508Speed::~M3508Speed__sub_object() &rArr; SpeedPidControl&lang;M3508&rang;::~SpeedPidControl__sub_object() &rArr; M3508::~M3508__sub_object() &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPidControl&lang;M3508&rang;::~SpeedPidControl__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;M3508Speed&rang;::~Motor__sub_object()
</UL>

<P><STRONG><a name="[320]"></a>OneStepGet::move_front(float, bool)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, onestepget.o(.text._ZN10OneStepGet10move_frontEfb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OneStepGet::move_front(float, bool) &rArr; SpeedPidControl&lang;M2006&rang;::set_speed(float) &rArr; Pid::update(float, float) &rArr; float limited&lang;float&rang;(float&&, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPidControl&lang;M2006&rang;::set_speed(float)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006Speed::is_block(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGetTask()
</UL>

<P><STRONG><a name="[323]"></a>OneStepGet::move_upward(float&)</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, onestepget.o(.text._ZN10OneStepGet11move_upwardERf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OneStepGet::move_upward(float&) &rArr; PosPidControl&lang;M3508&rang;::set_position(float) &rArr; Pid::update(float, float) &rArr; float limited&lang;float&rang;(float&&, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosPidControl&lang;M3508&rang;::set_position(float)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508Pos::total_position()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508Pos::is_block(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGetTask()
</UL>

<P><STRONG><a name="[321]"></a>OneStepGet::move_back(float)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, onestepget.o(.text._ZN10OneStepGet9move_backEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OneStepGet::move_back(float) &rArr; SpeedPidControl&lang;M2006&rang;::set_speed(float) &rArr; Pid::update(float, float) &rArr; float limited&lang;float&rang;(float&&, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPidControl&lang;M2006&rang;::set_speed(float)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006Speed::is_block(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGetTask()
</UL>

<P><STRONG><a name="[324]"></a>OneStepGet::move_down(float&, bool)</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, onestepget.o(.text._ZN10OneStepGet9move_downERfb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OneStepGet::move_down(float&, bool) &rArr; PosPidControl&lang;M3508&rang;::set_position(float) &rArr; Pid::update(float, float) &rArr; float limited&lang;float&rang;(float&&, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosPidControl&lang;M3508&rang;::set_position(float)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508Pos::total_position()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508Pos::is_block(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGetTask()
</UL>

<P><STRONG><a name="[39e]"></a>OneStepGet::OneStepGet__sub_object(Pid const&, unsigned short, Pid const&, Pid const&, unsigned short)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, vari.o(.text._ZN10OneStepGetC2ERK3PidtS2_S2_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = OneStepGet::OneStepGet__sub_object(Pid const&, unsigned short, Pid const&, Pid const&, unsigned short) &rArr; Motor&lang;M3508Pos&rang;::Motor__sub_object&lang;Pid const&, Pid const&, unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&) &rArr; M3508Pos::M3508Pos__sub_object&lang;Pid const&, Pid const&, unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&) &rArr; PosPidControl&lang;M3508&rang;::PosPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&) &rArr; M3508::M3508__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;M3508Pos&rang;::Motor__sub_object&lang;Pid const&, Pid const&, unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;M2006Speed&rang;::Motor__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.19
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.18
</UL>

<P><STRONG><a name="[d8]"></a>OneStepGet::~OneStepGet__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vari.o(.text._ZN10OneStepGetD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = OneStepGet::~OneStepGet__sub_object() &rArr; Motor&lang;M2006Speed&rang;::~Motor__sub_object() &rArr; M2006Speed::~M2006Speed__sub_object() &rArr; SpeedPidControl&lang;M2006&rang;::~SpeedPidControl__sub_object() &rArr; M2006::~M2006__sub_object() &rArr; default_motor&lang;8192u, 36u, 1u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;M2006Speed&rang;::~Motor__sub_object()
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;M3508Pos&rang;::~Motor__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> vari.o(.text.__cxx_global_var_init.18)
<LI> vari.o(.text.__cxx_global_var_init.19)
</UL>
<P><STRONG><a name="[41a]"></a>RoundBuffer&lang;unsigned short, 50u&rang;::pop()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, buzzertask.o(.text._ZN11RoundBufferItLj50EE3popEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RoundBuffer&lang;unsigned short, 50u&rang;::pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool Buzzer::StartMusic&lang;(Buzzer::delay_pl)0&rang;()
</UL>

<P><STRONG><a name="[3a6]"></a>RoundBuffer&lang;unsigned short, 50u&rang;::push(unsigned short const&)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, interact.o(.text._ZN11RoundBufferItLj50EE4pushERKt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RoundBuffer&lang;unsigned short, 50u&rang;::push(unsigned short const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void RoundBuffer&lang;unsigned short, 50u&rang;::push&lang;8u&rang;(std::__2::array&lang;unsigned short, 8u&rang; const&)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Buzzer::PushMusic&lang;(unsigned short)8&rang;(std::__2::array&lang;unsigned short, (unsigned short)8&rang; const&)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void RoundBuffer&lang;unsigned short, 50u&rang;::push&lang;24u&rang;(std::__2::array&lang;unsigned short, 24u&rang; const&)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Buzzer::PushMusic&lang;(unsigned short)24&rang;(std::__2::array&lang;unsigned short, (unsigned short)24&rang; const&)
</UL>

<P><STRONG><a name="[3a3]"></a>void RoundBuffer&lang;unsigned short, 50u&rang;::push&lang;24u&rang;(std::__2::array&lang;unsigned short, 24u&rang; const&)</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, arminittask.o(.text._ZN11RoundBufferItLj50EE4pushILj24EEEvRKNSt3__25arrayItXT_EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = void RoundBuffer&lang;unsigned short, 50u&rang;::push&lang;24u&rang;(std::__2::array&lang;unsigned short, 24u&rang; const&) &rArr; std::__2::array&lang;unsigned short, 24u&rang;::end[abi:v180000]() const &rArr; std::__2::array&lang;unsigned short, 24u&rang;::data[abi:v180000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBuffer&lang;unsigned short, 50u&rang;::push(unsigned short const&)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;unsigned short, 24u&rang;::end[abi:v180000]() const
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;unsigned short, 24u&rang;::begin[abi:v180000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Buzzer::PushMusic&lang;(unsigned short)24&rang;(std::__2::array&lang;unsigned short, (unsigned short)24&rang; const&)
</UL>

<P><STRONG><a name="[3a7]"></a>void RoundBuffer&lang;unsigned short, 50u&rang;::push&lang;8u&rang;(std::__2::array&lang;unsigned short, 8u&rang; const&)</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, interact.o(.text._ZN11RoundBufferItLj50EE4pushILj8EEEvRKNSt3__25arrayItXT_EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = void RoundBuffer&lang;unsigned short, 50u&rang;::push&lang;8u&rang;(std::__2::array&lang;unsigned short, 8u&rang; const&) &rArr; std::__2::array&lang;unsigned short, 8u&rang;::end[abi:v180000]() const &rArr; std::__2::array&lang;unsigned short, 8u&rang;::data[abi:v180000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;unsigned short, 8u&rang;::end[abi:v180000]() const
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;unsigned short, 8u&rang;::begin[abi:v180000]() const
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBuffer&lang;unsigned short, 50u&rang;::push(unsigned short const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Buzzer::PushMusic&lang;(unsigned short)8&rang;(std::__2::array&lang;unsigned short, (unsigned short)8&rang; const&)
</UL>

<P><STRONG><a name="[41f]"></a>RoundBuffer&lang;unsigned short, 50u&rang;::RoundBuffer__sub_object()</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, vari.o(.text._ZN11RoundBufferItLj50EEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RoundBuffer&lang;unsigned short, 50u&rang;::RoundBuffer__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::Buzzer__sub_object(TIM_HandleTypeDef*, unsigned short)
</UL>

<P><STRONG><a name="[3aa]"></a>chassis_dep::base_motor::base_motor__sub_object(std::__2::array&lang;chassis_dep::ChassisMotorCfg, 4u&rang; const&)</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, vari.o(.text._ZN11chassis_dep10base_motorC2ERKNSt3__25arrayINS_15ChassisMotorCfgELj4EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = chassis_dep::base_motor::base_motor__sub_object(std::__2::array&lang;chassis_dep::ChassisMotorCfg, 4u&rang; const&) &rArr; Motor&lang;M3508Speed&rang;::Motor__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; M3508Speed::M3508Speed__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; SpeedPidControl&lang;M3508&rang;::SpeedPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; M3508::M3508__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;M3508Speed&rang;::Motor__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;chassis_dep::ChassisMotorCfg, 4u&rang;::operator[][abi:v180000](unsigned int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::Chassis__sub_object(SuperCan*, std::__2::array&lang;slope_cfg, 4u&rang; const&, std::__2::array&lang;chassis_dep::ChassisMotorCfg, 4u&rang; const&, std::__2::array&lang;chassis_dep::ChassisMotorCfg, 2u&rang; const&)
</UL>

<P><STRONG><a name="[3ad]"></a>chassis_dep::base_motor::~base_motor__sub_object()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, vari.o(.text._ZN11chassis_dep10base_motorD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = chassis_dep::base_motor::~base_motor__sub_object() &rArr; Motor&lang;M3508Speed&rang;::~Motor__sub_object() &rArr; M3508Speed::~M3508Speed__sub_object() &rArr; SpeedPidControl&lang;M3508&rang;::~SpeedPidControl__sub_object() &rArr; M3508::~M3508__sub_object() &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;M3508Speed&rang;::~Motor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::~Chassis__sub_object()
</UL>

<P><STRONG><a name="[3af]"></a>chassis_dep::extend_motor::extend_motor__sub_object(std::__2::array&lang;chassis_dep::ChassisMotorCfg, 2u&rang; const&)</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, vari.o(.text._ZN11chassis_dep12extend_motorC2ERKNSt3__25arrayINS_15ChassisMotorCfgELj2EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = chassis_dep::extend_motor::extend_motor__sub_object(std::__2::array&lang;chassis_dep::ChassisMotorCfg, 2u&rang; const&) &rArr; Motor&lang;M3508Speed&rang;::Motor__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; M3508Speed::M3508Speed__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; SpeedPidControl&lang;M3508&rang;::SpeedPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; M3508::M3508__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;chassis_dep::ChassisMotorCfg, 2u&rang;::operator[][abi:v180000](unsigned int) const
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;M3508Speed&rang;::Motor__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::Chassis__sub_object(SuperCan*, std::__2::array&lang;slope_cfg, 4u&rang; const&, std::__2::array&lang;chassis_dep::ChassisMotorCfg, 4u&rang; const&, std::__2::array&lang;chassis_dep::ChassisMotorCfg, 2u&rang; const&)
</UL>

<P><STRONG><a name="[3b1]"></a>chassis_dep::extend_motor::~extend_motor__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, vari.o(.text._ZN11chassis_dep12extend_motorD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = chassis_dep::extend_motor::~extend_motor__sub_object() &rArr; Motor&lang;M3508Speed&rang;::~Motor__sub_object() &rArr; M3508Speed::~M3508Speed__sub_object() &rArr; SpeedPidControl&lang;M3508&rang;::~SpeedPidControl__sub_object() &rArr; M3508::~M3508__sub_object() &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;M3508Speed&rang;::~Motor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::~Chassis__sub_object()
</UL>

<P><STRONG><a name="[433]"></a>chassis_dep::key::key__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, vari.o(.text._ZN11chassis_dep3keyC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = chassis_dep::key::key__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::Chassis__sub_object(SuperCan*, std::__2::array&lang;slope_cfg, 4u&rang; const&, std::__2::array&lang;chassis_dep::ChassisMotorCfg, 4u&rang; const&, std::__2::array&lang;chassis_dep::ChassisMotorCfg, 2u&rang; const&)
</UL>

<P><STRONG><a name="[3b2]"></a>chassis_dep::move::move__sub_object(std::__2::array&lang;slope_cfg, 4u&rang; const&)</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, vari.o(.text._ZN11chassis_dep4moveC2ERKNSt3__25arrayI9slope_cfgLj4EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = chassis_dep::move::move__sub_object(std::__2::array&lang;slope_cfg, 4u&rang; const&) &rArr; Slope::Slope__sub_object(slope_cfg const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slope::Slope__sub_object(slope_cfg const&)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;slope_cfg, 4u&rang;::operator[][abi:v180000](unsigned int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::Chassis__sub_object(SuperCan*, std::__2::array&lang;slope_cfg, 4u&rang; const&, std::__2::array&lang;chassis_dep::ChassisMotorCfg, 4u&rang; const&, std::__2::array&lang;chassis_dep::ChassisMotorCfg, 2u&rang; const&)
</UL>

<P><STRONG><a name="[3b5]"></a>roboarm_dep::arm_acos_f32(float)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, roboarm.o(.text._ZN11roboarm_dep12arm_acos_f32Ef))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = roboarm_dep::arm_acos_f32(float) &rArr; __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::ikine(std::__2::array&lang;float, 3u&rang; const&)
</UL>

<P><STRONG><a name="[3b7]"></a>roboarm_dep::arm_atan_f32(float, float)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, roboarm.o(.text._ZN11roboarm_dep12arm_atan_f32Eff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = roboarm_dep::arm_atan_f32(float, float) &rArr; __hardfp_atanf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::ikine(std::__2::array&lang;float, 3u&rang; const&)
</UL>

<P><STRONG><a name="[34d]"></a>roboarm_dep::arm_atan2_f32(float, float)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, roboarm.o(.text._ZN11roboarm_dep13arm_atan2_f32Eff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = roboarm_dep::arm_atan2_f32(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slove_q2(float, float, float, float, float)
</UL>

<P><STRONG><a name="[33b]"></a>roboarm_dep::Differentiator::write_fram()</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, roboarm_dep.o(.text._ZN11roboarm_dep14Differentiator10write_framEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = roboarm_dep::Differentiator::write_fram() &rArr; Fram::block_write(unsigned short, unsigned char*, unsigned short, unsigned short) &rArr; SuperIIC::mem_block_write_bytes(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short, unsigned int) &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fram::block_write(unsigned short, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006DiffPos::total_position()
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmTask()
</UL>

<P><STRONG><a name="[3bb]"></a>roboarm_dep::Differentiator::update_relative_pos(float&, float&)</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, roboarm_dep.o(.text._ZN11roboarm_dep14Differentiator19update_relative_posERfS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = roboarm_dep::Differentiator::update_relative_pos(float&, float&) &rArr; M2006DiffPos::total_position()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006DiffPos::total_position()
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::update_relative_pos()
</UL>

<P><STRONG><a name="[302]"></a>roboarm_dep::Differentiator::init(std::__2::array&lang;float, 6u&rang;&)</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, roboarm_dep.o(.text._ZN11roboarm_dep14Differentiator4initERNSt3__25arrayIfLj6EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = roboarm_dep::Differentiator::init(std::__2::array&lang;float, 6u&rang;&) &rArr; roboarm_dep::Differentiator::read_fram() &rArr; Fram::block_read(unsigned short, unsigned char*, unsigned short, unsigned short) &rArr; SuperIIC::mem_block_read_bytes(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short, unsigned int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006DiffPos::total_position()
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::Differentiator::read_fram()
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006DiffPos::clear()
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmInitTask()
</UL>

<P><STRONG><a name="[3bd]"></a>roboarm_dep::Differentiator::read_fram()</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, roboarm_dep.o(.text._ZN11roboarm_dep14Differentiator9read_framEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = roboarm_dep::Differentiator::read_fram() &rArr; Fram::block_read(unsigned short, unsigned char*, unsigned short, unsigned short) &rArr; SuperIIC::mem_block_read_bytes(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short, unsigned int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fram::block_read(unsigned short, unsigned char*, unsigned short, unsigned short)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006DiffPos::total_position()
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::Differentiator::init(std::__2::array&lang;float, 6u&rang;&)
</UL>

<P><STRONG><a name="[3c0]"></a>roboarm_dep::Differentiator::Differentiator__sub_object(float, unsigned int, Pid const&, Pid const&, unsigned int, Pid const&, Pid const&, __I2C_HandleTypeDef*)</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, vari.o(.text._ZN11roboarm_dep14DifferentiatorC2EfjRK3PidS3_jS3_S3_P19__I2C_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = roboarm_dep::Differentiator::Differentiator__sub_object(float, unsigned int, Pid const&, Pid const&, unsigned int, Pid const&, Pid const&, __I2C_HandleTypeDef*) &rArr; Motor&lang;M2006DiffPos&rang;::Motor__sub_object&lang;Pid const&, Pid const&, unsigned int&&rang;(Pid const&, Pid const&, unsigned int&) &rArr; M2006DiffPos::M2006DiffPos__sub_object&lang;Pid const&, Pid const&, unsigned int&&rang;(Pid const&, Pid const&, unsigned int&) &rArr; PosPidControl&lang;M2006Diff&rang;::PosPidControl__sub_object&lang;unsigned int&&rang;(Pid const&, Pid const&, unsigned int&) &rArr; M2006Diff::M2006Diff__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 720u, 1u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fram::Fram__sub_object(__I2C_HandleTypeDef*)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;M2006DiffPos&rang;::Motor__sub_object&lang;Pid const&, Pid const&, unsigned int&&rang;(Pid const&, Pid const&, unsigned int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::RoboArm__sub_object(SuperCan*, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, float, unsigned int, Pid const&, Pid const&, unsigned int, Pid const&, Pid const&, __I2C_HandleTypeDef*, roboarm_dep::offset&&)
</UL>

<P><STRONG><a name="[3c3]"></a>roboarm_dep::Differentiator::~Differentiator__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vari.o(.text._ZN11roboarm_dep14DifferentiatorD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = roboarm_dep::Differentiator::~Differentiator__sub_object() &rArr; Motor&lang;M2006DiffPos&rang;::~Motor__sub_object() &rArr; M2006DiffPos::~M2006DiffPos__sub_object() &rArr; PosPidControl&lang;M2006Diff&rang;::~PosPidControl__sub_object() &rArr; M2006Diff::~M2006Diff__sub_object() &rArr; default_motor&lang;8192u, 720u, 1u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;M2006DiffPos&rang;::~Motor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::~RoboArm__sub_object()
</UL>

<P><STRONG><a name="[3c5]"></a>roboarm_dep::is_zero(float)</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, roboarm.o(.text._ZN11roboarm_dep7is_zeroEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = roboarm_dep::is_zero(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::is_equal(float, float)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::ikine(std::__2::array&lang;float, 3u&rang; const&)
</UL>

<P><STRONG><a name="[34c]"></a>roboarm_dep::is_equal(float, float)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, roboarm.o(.text._ZN11roboarm_dep8is_equalEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = roboarm_dep::is_equal(float, float) &rArr; roboarm_dep::is_zero(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::is_zero(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slove_q2(float, float, float, float, float)
</UL>

<P><STRONG><a name="[3c6]"></a>CountManager::register_item(Count*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, supercan.o(.text._ZN12CountManager13register_itemEP5Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CountManager::register_item(Count*) &rArr; CustomList&lang;Count*&rang;::push_back(Count* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Count*&rang;::push_back(Count* const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::Count__sub_object()
</UL>

<P><STRONG><a name="[3c7]"></a>CountManager::unregister_item(Count*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, superuart.o(.text._ZN12CountManager15unregister_itemEP5Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CountManager::unregister_item(Count*) &rArr; CustomList&lang;Count*&rang;::remove(Count* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Count*&rang;::remove(Count* const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::~Count__sub_object()
</UL>

<P><STRONG><a name="[34f]"></a>CountManager::mark()</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, debugtask.o(.text._ZN12CountManager4markEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CountManager::mark() &rArr; CustomList&lang;Count*&rang;::end() &rArr; CustomList&lang;Count*&rang;::Iterator::Iterator__sub_object(CustomList&lang;Count*&rang;::Node*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Count*&rang;::Iterator::operator++()
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::mark()
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Count*&rang;::Iterator::operator*()
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Count*&rang;::Iterator::operator!=(CustomList&lang;Count*&rang;::Iterator const&) const
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Count*&rang;::end()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Count*&rang;::begin()
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugTask()
</UL>

<P><STRONG><a name="[32f]"></a>CountManager::CountManager__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, count.o(.text._ZN12CountManagerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CountManager::CountManager__sub_object() &rArr; CustomList&lang;Count*&rang;::CustomList__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Count*&rang;::CustomList__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManagerInstance()
</UL>

<P><STRONG><a name="[bb]"></a>CountManager::~CountManager__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, count.o(.text._ZN12CountManagerD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CountManager::~CountManager__sub_object() &rArr; CustomList&lang;Count*&rang;::~CustomList__sub_object() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Count*&rang;::~CustomList__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> count.o(.text._Z20CountManagerInstancev)
</UL>
<P><STRONG><a name="[186]"></a>M2006DiffPos::get_feedback(unsigned short, unsigned char*)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, cancallback.o(.text._ZN12M2006DiffPos12get_feedbackEtPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = M2006DiffPos::get_feedback(unsigned short, unsigned char*) &rArr; default_motor&lang;8192u, 720u, 1u&rang;::get_feedback(unsigned char const*) &rArr; Detect::update() &rArr; Detect::getSysTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006Diff::total_cnt()
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 720u, 1u&rang;::get_feedback(unsigned char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[3b9]"></a>M2006DiffPos::total_position()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, roboarm_dep.o(.text._ZN12M2006DiffPos14total_positionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = M2006DiffPos::total_position()
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::Differentiator::write_fram()
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::Differentiator::read_fram()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::Differentiator::init(std::__2::array&lang;float, 6u&rang;&)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::Differentiator::update_relative_pos(float&, float&)
</UL>

<P><STRONG><a name="[3bc]"></a>M2006DiffPos::clear()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, roboarm_dep.o(.text._ZN12M2006DiffPos5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = M2006DiffPos::clear() &rArr; Pid::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::Differentiator::init(std::__2::array&lang;float, 6u&rang;&)
</UL>

<P><STRONG><a name="[3d0]"></a>M2006DiffPos::M2006DiffPos__sub_object&lang;Pid const&, Pid const&, unsigned int&&rang;(Pid const&, Pid const&, unsigned int&)</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, vari.o(.text._ZN12M2006DiffPosC2IJRK3PidS3_RjEEEDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = M2006DiffPos::M2006DiffPos__sub_object&lang;Pid const&, Pid const&, unsigned int&&rang;(Pid const&, Pid const&, unsigned int&) &rArr; PosPidControl&lang;M2006Diff&rang;::PosPidControl__sub_object&lang;unsigned int&&rang;(Pid const&, Pid const&, unsigned int&) &rArr; M2006Diff::M2006Diff__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 720u, 1u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosPidControl&lang;M2006Diff&rang;::PosPidControl__sub_object&lang;unsigned int&&rang;(Pid const&, Pid const&, unsigned int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;M2006DiffPos&rang;::Motor__sub_object&lang;Pid const&, Pid const&, unsigned int&&rang;(Pid const&, Pid const&, unsigned int&)
</UL>

<P><STRONG><a name="[3d2]"></a>M2006DiffPos::~M2006DiffPos__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vari.o(.text._ZN12M2006DiffPosD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = M2006DiffPos::~M2006DiffPos__sub_object() &rArr; PosPidControl&lang;M2006Diff&rang;::~PosPidControl__sub_object() &rArr; M2006Diff::~M2006Diff__sub_object() &rArr; default_motor&lang;8192u, 720u, 1u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosPidControl&lang;M2006Diff&rang;::~PosPidControl__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;M2006DiffPos&rang;::~Motor__sub_object()
</UL>

<P><STRONG><a name="[3d4]"></a>DetectManager&lang;Detect&rang;::Unregister(Detect*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, detect.o(.text._ZN13DetectManagerI6DetectE10UnregisterEPS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Detect*&rang;::remove(Detect* const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::~Detect()
</UL>

<P><STRONG><a name="[3d5]"></a>DetectManager&lang;Detect&rang;::Register(Detect*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, detect.o(.text._ZN13DetectManagerI6DetectE8RegisterEPS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Detect*&rang;::push_back(Detect* const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::Detect(unsigned int, void (*)(), void (*)())
</UL>

<P><STRONG><a name="[34e]"></a>DetectManager&lang;Detect&rang;::JudgeLost()</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, debugtask.o(.text._ZN13DetectManagerI6DetectE9JudgeLostEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DetectManager&lang;Detect&rang;::JudgeLost() &rArr; Detect::JudgeLost() &rArr; Detect::getSysTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::JudgeLost()
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Detect*&rang;::Iterator::operator++()
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Detect*&rang;::Iterator::operator*()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Detect*&rang;::Iterator::operator!=(CustomList&lang;Detect*&rang;::Iterator const&) const
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Detect*&rang;::end()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Detect*&rang;::begin()
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugTask()
</UL>

<P><STRONG><a name="[332]"></a>DetectManager&lang;Detect&rang;::DetectManager__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, detect.o(.text._ZN13DetectManagerI6DetectEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DetectManager&lang;Detect&rang;::DetectManager__sub_object() &rArr; CustomList&lang;Detect*&rang;::CustomList__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Detect*&rang;::CustomList__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManagerInstance()
</UL>

<P><STRONG><a name="[bc]"></a>DetectManager&lang;Detect&rang;::~DetectManager__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, detect.o(.text._ZN13DetectManagerI6DetectED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DetectManager&lang;Detect&rang;::~DetectManager__sub_object() &rArr; CustomList&lang;Detect*&rang;::~CustomList__sub_object() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Detect*&rang;::~CustomList__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> detect.o(.text._Z21DetectManagerInstancev)
</UL>
<P><STRONG><a name="[3db]"></a>DetectManager&lang;TimDetect&rang;::Unregister(TimDetect*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, detect.o(.text._ZN13DetectManagerI9TimDetectE10UnregisterEPS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DetectManager&lang;TimDetect&rang;::Unregister(TimDetect*) &rArr; CustomList&lang;TimDetect*&rang;::remove(TimDetect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;TimDetect*&rang;::remove(TimDetect* const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetect::~TimDetect()
</UL>

<P><STRONG><a name="[3dc]"></a>DetectManager&lang;TimDetect&rang;::Register(TimDetect*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, detect.o(.text._ZN13DetectManagerI9TimDetectE8RegisterEPS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DetectManager&lang;TimDetect&rang;::Register(TimDetect*) &rArr; CustomList&lang;TimDetect*&rang;::push_back(TimDetect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;TimDetect*&rang;::push_back(TimDetect* const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetect::TimDetect(unsigned int, void (*)(), void (*)())
</UL>

<P><STRONG><a name="[2e9]"></a>DetectManager&lang;TimDetect&rang;::JudgeLost()</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, timcallback.o(.text._ZN13DetectManagerI9TimDetectE9JudgeLostEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DetectManager&lang;TimDetect&rang;::JudgeLost() &rArr; TimDetect::JudgeLost() &rArr; TimDetect::getSysTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;TimDetect*&rang;::Iterator::operator++()
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetect::JudgeLost()
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;TimDetect*&rang;::Iterator::operator*()
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;TimDetect*&rang;::Iterator::operator!=(CustomList&lang;TimDetect*&rang;::Iterator const&) const
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;TimDetect*&rang;::end()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;TimDetect*&rang;::begin()
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserTimCallback
</UL>

<P><STRONG><a name="[333]"></a>DetectManager&lang;TimDetect&rang;::DetectManager__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, detect.o(.text._ZN13DetectManagerI9TimDetectEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DetectManager&lang;TimDetect&rang;::DetectManager__sub_object() &rArr; CustomList&lang;TimDetect*&rang;::CustomList__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;TimDetect*&rang;::CustomList__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetectManagerInstance()
</UL>

<P><STRONG><a name="[bd]"></a>DetectManager&lang;TimDetect&rang;::~DetectManager__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, detect.o(.text._ZN13DetectManagerI9TimDetectED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DetectManager&lang;TimDetect&rang;::~DetectManager__sub_object() &rArr; CustomList&lang;TimDetect*&rang;::~CustomList__sub_object() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;TimDetect*&rang;::~CustomList__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> detect.o(.text._Z24TimDetectManagerInstancev)
</UL>
<P><STRONG><a name="[185]"></a>LKMotorSingle::get_feedback(unsigned short, unsigned char*)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, cancallback.o(.text._ZN13LKMotorSingle12get_feedbackEtPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LKMotorSingle::get_feedback(unsigned short, unsigned char*) &rArr; LKMotor::get_feedback(unsigned char*) &rArr; float whileLimit&lang;float&rang;(float&, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotor::get_feedback(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[3e3]"></a>LKMotorSingle::LKMotorSingle__sub_object&lang;SuperCan*&, unsigned int&, unsigned int&, float const&&rang;(SuperCan*&, unsigned int&, unsigned int&, float const&)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, vari.o(.text._ZN13LKMotorSingleC2IJRP8SuperCanRjS4_RKfEEEDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = LKMotorSingle::LKMotorSingle__sub_object&lang;SuperCan*&, unsigned int&, unsigned int&, float const&&rang;(SuperCan*&, unsigned int&, unsigned int&, float const&) &rArr; LKControl&lang;LKMotor&rang;::LKControl__sub_object&lang;unsigned int&, float const&&rang;(SuperCan*, unsigned short, unsigned int&, float const&) &rArr; LKMotor::LKMotor__sub_object(unsigned short, unsigned int, float) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::LKControl__sub_object&lang;unsigned int&, float const&&rang;(SuperCan*, unsigned short, unsigned int&, float const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;LKMotorSingle&rang;::Motor__sub_object&lang;SuperCan*&, unsigned int&, unsigned int&, float const&&rang;(SuperCan*&, unsigned int&, unsigned int&, float const&)
</UL>

<P><STRONG><a name="[3e5]"></a>LKMotorSingle::~LKMotorSingle__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vari.o(.text._ZN13LKMotorSingleD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = LKMotorSingle::~LKMotorSingle__sub_object() &rArr; LKControl&lang;LKMotor&rang;::~LKControl__sub_object() &rArr; LKMotor::~LKMotor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::~LKControl__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;LKMotorSingle&rang;::~Motor__sub_object()
</UL>

<P><STRONG><a name="[322]"></a>PosPidControl&lang;M3508&rang;::set_position(float)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, onestepget.o(.text._ZN13PosPidControlI5M3508E12set_positionEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PosPidControl&lang;M3508&rang;::set_position(float) &rArr; Pid::update(float, float) &rArr; float limited&lang;float&rang;(float&&, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::update(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGetTask()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::move_down(float&, bool)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::move_upward(float&)
</UL>

<P><STRONG><a name="[3e8]"></a>PosPidControl&lang;M3508&rang;::PosPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&)</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, vari.o(.text._ZN13PosPidControlI5M3508EC2IJRKtEEERK3PidS7_DpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = PosPidControl&lang;M3508&rang;::PosPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&) &rArr; M3508::M3508__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508::M3508__sub_object(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508Pos::M3508Pos__sub_object&lang;Pid const&, Pid const&, unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&)
</UL>

<P><STRONG><a name="[3ea]"></a>PosPidControl&lang;M3508&rang;::~PosPidControl__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vari.o(.text._ZN13PosPidControlI5M3508ED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = PosPidControl&lang;M3508&rang;::~PosPidControl__sub_object() &rArr; M3508::~M3508__sub_object() &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508::~M3508__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508Pos::~M3508Pos__sub_object()
</UL>

<P><STRONG><a name="[337]"></a>PosPidControl&lang;M2006Diff&rang;::set_position(float)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, armtask.o(.text._ZN13PosPidControlI9M2006DiffE12set_positionEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PosPidControl&lang;M2006Diff&rang;::set_position(float) &rArr; Pid::update(float, float) &rArr; float limited&lang;float&rang;(float&&, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::update(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmTask()
</UL>

<P><STRONG><a name="[339]"></a>PosPidControl&lang;M2006Diff&rang;::output()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, armtask.o(.text._ZN13PosPidControlI9M2006DiffE6outputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PosPidControl&lang;M2006Diff&rang;::output()
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmTask()
</UL>

<P><STRONG><a name="[3d1]"></a>PosPidControl&lang;M2006Diff&rang;::PosPidControl__sub_object&lang;unsigned int&&rang;(Pid const&, Pid const&, unsigned int&)</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, vari.o(.text._ZN13PosPidControlI9M2006DiffEC2IJRjEEERK3PidS6_DpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = PosPidControl&lang;M2006Diff&rang;::PosPidControl__sub_object&lang;unsigned int&&rang;(Pid const&, Pid const&, unsigned int&) &rArr; M2006Diff::M2006Diff__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 720u, 1u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006Diff::M2006Diff__sub_object(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006DiffPos::M2006DiffPos__sub_object&lang;Pid const&, Pid const&, unsigned int&&rang;(Pid const&, Pid const&, unsigned int&)
</UL>

<P><STRONG><a name="[3d3]"></a>PosPidControl&lang;M2006Diff&rang;::~PosPidControl__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vari.o(.text._ZN13PosPidControlI9M2006DiffED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = PosPidControl&lang;M2006Diff&rang;::~PosPidControl__sub_object() &rArr; M2006Diff::~M2006Diff__sub_object() &rArr; default_motor&lang;8192u, 720u, 1u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006Diff::~M2006Diff__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006DiffPos::~M2006DiffPos__sub_object()
</UL>

<P><STRONG><a name="[32c]"></a>RemoteControl::start()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, interact.o(.text._ZN13RemoteControl5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = RemoteControl::start() &rArr; SuperUart::receive_dma_idle(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::receive_dma_idle(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask()
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_ctrl_recover()
</UL>

<P><STRONG><a name="[22f]"></a>RemoteControl::update(KeyBoard&)</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, remotecontrol.o(.text._ZN13RemoteControl6updateER8KeyBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RemoteControl::update(KeyBoard&) &rArr; TimDetect::update() &rArr; TimDetect::getSysTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetect::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[3ef]"></a>RemoteControl::RemoteControl__sub_object(__UART_HandleTypeDef*, unsigned short, unsigned int)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, vari.o(.text._ZN13RemoteControlC2EP20__UART_HandleTypeDeftj))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = RemoteControl::RemoteControl__sub_object(__UART_HandleTypeDef*, unsigned short, unsigned int) &rArr; SuperUart::SuperUart(__UART_HandleTypeDef*, unsigned short, unsigned short) &rArr; Count::Count__sub_object() &rArr; CountManager::register_item(Count*) &rArr; CustomList&lang;Count*&rang;::push_back(Count* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetect::TimDetect(unsigned int, void (*)(), void (*)())
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::SuperUart(__UART_HandleTypeDef*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::Interact__sub_object(unsigned char const&, unsigned char const&, __UART_HandleTypeDef*, __UART_HandleTypeDef*, __UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[3f1]"></a>RemoteControl::~RemoteControl__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vari.o(.text._ZN13RemoteControlD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = RemoteControl::~RemoteControl__sub_object() &rArr; SuperUart::~SuperUart() &rArr; Count::~Count__sub_object() &rArr; CountManager::unregister_item(Count*) &rArr; CustomList&lang;Count*&rang;::remove(Count* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetect::~TimDetect()
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::~SuperUart()
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::~Interact__sub_object()
</UL>

<P><STRONG><a name="[396]"></a>default_motor&lang;8192u, 3591u, 187u&rang;::get_feedback(unsigned char const*)</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, cancallback.o(.text._ZN13default_motorILj8192ELj3591ELj187EE12get_feedbackEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = default_motor&lang;8192u, 3591u, 187u&rang;::get_feedback(unsigned char const*) &rArr; Detect::update() &rArr; Detect::getSysTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::update()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::operator++()
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508Speed::get_feedback(unsigned short, unsigned char const*)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508Pos::get_feedback(unsigned short, unsigned char const*)
</UL>

<P><STRONG><a name="[3f4]"></a>default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, vari.o(.text._ZN13default_motorILj8192ELj3591ELj187EEC2Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::Detect(unsigned int, void (*)(), void (*)())
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::Count__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508::M3508__sub_object(unsigned short)
</UL>

<P><STRONG><a name="[3f6]"></a>default_motor&lang;8192u, 3591u, 187u&rang;::~default_motor__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vari.o(.text._ZN13default_motorILj8192ELj3591ELj187EED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = default_motor&lang;8192u, 3591u, 187u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::~Detect()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::~Count__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508::~M3508__sub_object()
</UL>

<P><STRONG><a name="[38d]"></a>default_motor&lang;8192u, 36u, 1u&rang;::get_feedback(unsigned char const*)</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, cancallback.o(.text._ZN13default_motorILj8192ELj36ELj1EE12get_feedbackEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = default_motor&lang;8192u, 36u, 1u&rang;::get_feedback(unsigned char const*) &rArr; Detect::update() &rArr; Detect::getSysTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::update()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::operator++()
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006Speed::get_feedback(unsigned short, unsigned char*)
</UL>

<P><STRONG><a name="[3f8]"></a>default_motor&lang;8192u, 36u, 1u&rang;::default_motor__sub_object(unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, vari.o(.text._ZN13default_motorILj8192ELj36ELj1EEC2Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = default_motor&lang;8192u, 36u, 1u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::Detect(unsigned int, void (*)(), void (*)())
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::Count__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006::M2006__sub_object(unsigned short)
</UL>

<P><STRONG><a name="[3f9]"></a>default_motor&lang;8192u, 36u, 1u&rang;::~default_motor__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vari.o(.text._ZN13default_motorILj8192ELj36ELj1EED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = default_motor&lang;8192u, 36u, 1u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::~Detect()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::~Count__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006::~M2006__sub_object()
</UL>

<P><STRONG><a name="[3cd]"></a>default_motor&lang;8192u, 720u, 1u&rang;::get_feedback(unsigned char const*)</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, cancallback.o(.text._ZN13default_motorILj8192ELj720ELj1EE12get_feedbackEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = default_motor&lang;8192u, 720u, 1u&rang;::get_feedback(unsigned char const*) &rArr; Detect::update() &rArr; Detect::getSysTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::update()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::operator++()
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006DiffPos::get_feedback(unsigned short, unsigned char*)
</UL>

<P><STRONG><a name="[3fa]"></a>default_motor&lang;8192u, 720u, 1u&rang;::default_motor__sub_object(unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, vari.o(.text._ZN13default_motorILj8192ELj720ELj1EEC2Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = default_motor&lang;8192u, 720u, 1u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::Detect(unsigned int, void (*)(), void (*)())
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::Count__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006Diff::M2006Diff__sub_object(unsigned short)
</UL>

<P><STRONG><a name="[3fb]"></a>default_motor&lang;8192u, 720u, 1u&rang;::~default_motor__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vari.o(.text._ZN13default_motorILj8192ELj720ELj1EED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = default_motor&lang;8192u, 720u, 1u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::~Detect()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::~Count__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006Diff::~M2006Diff__sub_object()
</UL>

<P><STRONG><a name="[39b]"></a>SpeedPidControl&lang;M2006&rang;::set_speed(float)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, onestepget.o(.text._ZN15SpeedPidControlI5M2006E9set_speedEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SpeedPidControl&lang;M2006&rang;::set_speed(float) &rArr; Pid::update(float, float) &rArr; float limited&lang;float&rang;(float&&, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::update(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::move_back(float)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::move_front(float, bool)
</UL>

<P><STRONG><a name="[392]"></a>SpeedPidControl&lang;M2006&rang;::SpeedPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, unsigned short const&)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, vari.o(.text._ZN15SpeedPidControlI5M2006EC2IJRKtEEERK3PidDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = SpeedPidControl&lang;M2006&rang;::SpeedPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; M2006::M2006__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 36u, 1u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006::M2006__sub_object(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006Speed::M2006Speed__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&)
</UL>

<P><STRONG><a name="[394]"></a>SpeedPidControl&lang;M2006&rang;::~SpeedPidControl__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vari.o(.text._ZN15SpeedPidControlI5M2006ED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = SpeedPidControl&lang;M2006&rang;::~SpeedPidControl__sub_object() &rArr; M2006::~M2006__sub_object() &rArr; default_motor&lang;8192u, 36u, 1u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006::~M2006__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006Speed::~M2006Speed__sub_object()
</UL>

<P><STRONG><a name="[3fe]"></a>SpeedPidControl&lang;M3508&rang;::set_speed(float)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, chassis.o(.text._ZN15SpeedPidControlI5M3508E9set_speedEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SpeedPidControl&lang;M3508&rang;::set_speed(float) &rArr; Pid::update(float, float) &rArr; float limited&lang;float&rang;(float&&, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::update(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::UpdatePid()
</UL>

<P><STRONG><a name="[398]"></a>SpeedPidControl&lang;M3508&rang;::SpeedPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, unsigned short const&)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, vari.o(.text._ZN15SpeedPidControlI5M3508EC2IJRKtEEERK3PidDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = SpeedPidControl&lang;M3508&rang;::SpeedPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; M3508::M3508__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508::M3508__sub_object(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508Speed::M3508Speed__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&)
</UL>

<P><STRONG><a name="[39a]"></a>SpeedPidControl&lang;M3508&rang;::~SpeedPidControl__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vari.o(.text._ZN15SpeedPidControlI5M3508ED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = SpeedPidControl&lang;M3508&rang;::~SpeedPidControl__sub_object() &rArr; M3508::~M3508__sub_object() &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508::~M3508__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508Speed::~M3508Speed__sub_object()
</UL>

<P><STRONG><a name="[386]"></a>image_trans_dep::trans_frame::trans_frame__sub_object()</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, vari.o(.text._ZN15image_trans_dep11trans_frameC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = image_trans_dep::trans_frame::trans_frame__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::ImageTrans__sub_object(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[44b]"></a>PC::PC__sub_object(unsigned char, unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, vari.o(.text._ZN2PCC2Ehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PC::PC__sub_object(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::Interact__sub_object(unsigned char const&, unsigned char const&, __UART_HandleTypeDef*, __UART_HandleTypeDef*, __UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[356]"></a>void UI::operate_fig&lang;ui_dep::int_data&rang;(ui_dep::ui_control&, ui_dep::layer, ui_dep::color, unsigned short, unsigned short, unsigned short, ui_dep::int_data const&)</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, judgetask.o(.text._ZN2UI11operate_figIN6ui_dep8int_dataEEEvRNS1_10ui_controlENS1_5layerENS1_5colorEtttRKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = void UI::operate_fig&lang;ui_dep::int_data&rang;(ui_dep::ui_control&, ui_dep::layer, ui_dep::color, unsigned short, unsigned short, unsigned short, ui_dep::int_data const&) &rArr; ui_dep::int_data::set_features(ui_dep::basic_graphic*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_dep::int_data::set_features(ui_dep::basic_graphic*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTask()
</UL>

<P><STRONG><a name="[23c]"></a>UI::get_feedback()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, ui.o(.text._ZN2UI12get_feedbackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UI::get_feedback()
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>

<P><STRONG><a name="[237]"></a>UI::start_receive()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ui.o(.text._ZN2UI13start_receiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = UI::start_receive() &rArr; SuperUart::receive_dma_idle(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::receive_dma_idle(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[400]"></a>UI::add_frame_header()</STRONG> (Thumb, 580 bytes, Stack size 32 bytes, ui.o(.text._ZN2UI16add_frame_headerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UI::add_frame_header() &rArr; crc::append_crc16_check_sum(unsigned char*, unsigned int) &rArr; crc::get_crc16_check_sum(unsigned char*, unsigned int, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc::append_crc8_check_sum(unsigned char*, unsigned int)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc::append_crc16_check_sum(unsigned char*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::update()
</UL>

<P><STRONG><a name="[401]"></a>UI::clear()</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, ui.o(.text._ZN2UI5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UI::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::update()
</UL>

<P><STRONG><a name="[357]"></a>UI::update()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ui.o(.text._ZN2UI6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = UI::update() &rArr; SuperUart::transmit_dma_pdata(unsigned char*, unsigned short) &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::add_frame_header()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::clear()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::transmit_dma_pdata(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTask()
</UL>

<P><STRONG><a name="[402]"></a>UI::UI__sub_object(unsigned short, unsigned short, __UART_HandleTypeDef*)</STRONG> (Thumb, 130 bytes, Stack size 168 bytes, vari.o(.text._ZN2UIC2EttP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = UI::UI__sub_object(unsigned short, unsigned short, __UART_HandleTypeDef*) &rArr; SuperUart::SuperUart(__UART_HandleTypeDef*, unsigned short, unsigned short) &rArr; Count::Count__sub_object() &rArr; CountManager::register_item(Count*) &rArr; CustomList&lang;Count*&rang;::push_back(Count* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::SuperUart(__UART_HandleTypeDef*, unsigned short, unsigned short)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::Count__sub_object()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.17
</UL>

<P><STRONG><a name="[d7]"></a>UI::~UI__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vari.o(.text._ZN2UID2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = UI::~UI__sub_object() &rArr; SuperUart::~SuperUart() &rArr; Count::~Count__sub_object() &rArr; CountManager::unregister_item(Count*) &rArr; CustomList&lang;Count*&rang;::remove(Count* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::~SuperUart()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::~Count__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vari.o(.text.__cxx_global_var_init.17)
</UL>
<P><STRONG><a name="[403]"></a>Imu::ekf_update()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, imu.o(.text._ZN3Imu10ekf_updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Imu::ekf_update() &rArr; IMU_QuaternionEKF_Update &rArr; Kalman_Filter_Update &rArr; Kalman_Filter_SetK &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::update()
</UL>

<P><STRONG><a name="[341]"></a>Imu::mahony_start()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, imu.o(.text._ZN3Imu12mahony_startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Imu::mahony_start() &rArr; MahonyAHRSinit &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSinit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUTask()
</UL>

<P><STRONG><a name="[344]"></a>Imu::is_temp_const(unsigned int)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, imu.o(.text._ZN3Imu13is_temp_constEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Imu::is_temp_const(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUTask()
</UL>

<P><STRONG><a name="[404]"></a>Imu::mahony_update()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, imu.o(.text._ZN3Imu13mahony_updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Imu::mahony_update() &rArr; Mahony_update &rArr; MahonyAHRSupdateIMU &rArr; invSqrt &rArr; Mahony_invSqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mahony_computeAngles
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mahony_update
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::update()
</UL>

<P><STRONG><a name="[342]"></a>Imu::update_offset(unsigned int, unsigned char&)</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, imu.o(.text._ZN3Imu13update_offsetEjRh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Imu::update_offset(unsigned int, unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUTask()
</UL>

<P><STRONG><a name="[340]"></a>Imu::update_raw_data()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, imu.o(.text._ZN3Imu15update_raw_dataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Imu::update_raw_data() &rArr; BMI088_read &rArr; BMI088_read_muli_reg &rArr; BMI088_read_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUTask()
</UL>

<P><STRONG><a name="[343]"></a>Imu::is_temp_dead_condition(float)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, imu.o(.text._ZN3Imu22is_temp_dead_conditionEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Imu::is_temp_dead_condition(float) &rArr; float my_abs&lang;float&rang;(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float my_abs&lang;float&rang;(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUTask()
</UL>

<P><STRONG><a name="[33f]"></a>Imu::init()</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, imu.o(.text._ZN3Imu4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = Imu::init() &rArr; IMU_QuaternionEKF_Init &rArr; Kalman_Filter_Init &rArr; user_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_init
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mahony_Init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::set(float, float, float, float, float)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUTask()
</UL>

<P><STRONG><a name="[348]"></a>Imu::update()</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, imu.o(.text._ZN3Imu6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = Imu::update() &rArr; Imu::mahony_update() &rArr; Mahony_update &rArr; MahonyAHRSupdateIMU &rArr; invSqrt &rArr; Mahony_invSqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Yaw
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Roll
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Pitch
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::mahony_update()
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::ekf_update()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUTask()
</UL>

<P><STRONG><a name="[40b]"></a>Imu::Imu__sub_object(MEASURE_ABLE)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, vari.o(.text._ZN3ImuC2E12MEASURE_ABLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Imu::Imu__sub_object(MEASURE_ABLE) &rArr; Pid::Pid__sub_object(float, float, float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid__sub_object(float, float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.12
</UL>

<P><STRONG><a name="[40d]"></a>Key::Key__sub_object(unsigned int, unsigned int)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, vari.o(.text._ZN3KeyC2Ejj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Key::Key__sub_object(unsigned int, unsigned int) &rArr; CustomList&lang;Key::key_callback&rang;::CustomList__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Key::key_callback&rang;::CustomList__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::Interact__sub_object(unsigned char const&, unsigned char const&, __UART_HandleTypeDef*, __UART_HandleTypeDef*, __UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[40f]"></a>Key::~Key__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, vari.o(.text._ZN3KeyD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Key::~Key__sub_object() &rArr; CustomList&lang;Key::key_callback&rang;::~CustomList__sub_object() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Key::key_callback&rang;::~CustomList__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::~Interact__sub_object()
</UL>

<P><STRONG><a name="[406]"></a>Pid::set(float, float, float, float, float)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, imu.o(.text._ZN3Pid3setEfffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Pid::set(float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::init()
</UL>

<P><STRONG><a name="[3cf]"></a>Pid::clear()</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, roboarm_dep.o(.text._ZN3Pid5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Pid::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006DiffPos::clear()
</UL>

<P><STRONG><a name="[3e7]"></a>Pid::update(float, float)</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, pid.o(.text._ZN3Pid6updateEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Pid::update(float, float) &rArr; float limited&lang;float&rang;(float&&, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float limited&lang;float&rang;(float&&, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPidControl&lang;M3508&rang;::set_speed(float)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosPidControl&lang;M3508&rang;::set_position(float)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPidControl&lang;M2006&rang;::set_speed(float)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosPidControl&lang;M2006Diff&rang;::set_position(float)
</UL>

<P><STRONG><a name="[40c]"></a>Pid::Pid__sub_object(float, float, float, float, float, float)</STRONG> (Thumb, 98 bytes, Stack size 28 bytes, vari.o(.text._ZN3PidC2Effffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Pid::Pid__sub_object(float, float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::Imu__sub_object(MEASURE_ABLE)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.19
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.18
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
</UL>

<P><STRONG><a name="[411]"></a>crc::get_crc8_check_sum(unsigned char*, unsigned int, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, crc.o(.text._ZN3crc18get_crc8_check_sumEPhjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc::get_crc8_check_sum(unsigned char*, unsigned int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc::append_crc8_check_sum(unsigned char*, unsigned int)
</UL>

<P><STRONG><a name="[412]"></a>crc::get_crc16_check_sum(unsigned char*, unsigned int, unsigned short)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, crc.o(.text._ZN3crc19get_crc16_check_sumEPhjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc::get_crc16_check_sum(unsigned char*, unsigned int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc::verify_crc16_check_sum(unsigned char*, unsigned int)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc::append_crc16_check_sum(unsigned char*, unsigned int)
</UL>

<P><STRONG><a name="[389]"></a>crc::append_crc8_check_sum(unsigned char*, unsigned int)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, crc.o(.text._ZN3crc21append_crc8_check_sumEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = crc::append_crc8_check_sum(unsigned char*, unsigned int) &rArr; crc::get_crc8_check_sum(unsigned char*, unsigned int, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc::get_crc8_check_sum(unsigned char*, unsigned int, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::add_frame_header()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::ImageTrans__sub_object(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[380]"></a>crc::append_crc16_check_sum(unsigned char*, unsigned int)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, crc.o(.text._ZN3crc22append_crc16_check_sumEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = crc::append_crc16_check_sum(unsigned char*, unsigned int) &rArr; crc::get_crc16_check_sum(unsigned char*, unsigned int, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc::get_crc16_check_sum(unsigned char*, unsigned int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::add_frame_header()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::transmit()
</UL>

<P><STRONG><a name="[231]"></a>crc::verify_crc16_check_sum(unsigned char*, unsigned int)</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, crc.o(.text._ZN3crc22verify_crc16_check_sumEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = crc::verify_crc16_check_sum(unsigned char*, unsigned int) &rArr; crc::get_crc16_check_sum(unsigned char*, unsigned int, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc::get_crc16_check_sum(unsigned char*, unsigned int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[3bf]"></a>Fram::block_read(unsigned short, unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, roboarm_dep.o(.text._ZN4Fram10block_readEtPhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = Fram::block_read(unsigned short, unsigned char*, unsigned short, unsigned short) &rArr; SuperIIC::mem_block_read_bytes(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short, unsigned int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperIIC::mem_block_read_bytes(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::Differentiator::read_fram()
</UL>

<P><STRONG><a name="[3ba]"></a>Fram::block_write(unsigned short, unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, roboarm_dep.o(.text._ZN4Fram11block_writeEtPhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = Fram::block_write(unsigned short, unsigned char*, unsigned short, unsigned short) &rArr; SuperIIC::mem_block_write_bytes(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short, unsigned int) &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperIIC::mem_block_write_bytes(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::Differentiator::write_fram()
</UL>

<P><STRONG><a name="[3c2]"></a>Fram::Fram__sub_object(__I2C_HandleTypeDef*)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, vari.o(.text._ZN4FramC2EP19__I2C_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Fram::Fram__sub_object(__I2C_HandleTypeDef*) &rArr; SuperIIC::SuperIIC__sub_object(__I2C_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperIIC::SuperIIC__sub_object(__I2C_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::Differentiator::Differentiator__sub_object(float, unsigned int, Pid const&, Pid const&, unsigned int, Pid const&, Pid const&, __I2C_HandleTypeDef*)
</UL>

<P><STRONG><a name="[3ca]"></a>Count::mark()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, debugtask.o(.text._ZN5Count4markEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Count::mark()
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManager::mark()
</UL>

<P><STRONG><a name="[388]"></a>Count::Count__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, supercan.o(.text._ZN5CountC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Count::Count__sub_object() &rArr; CountManager::register_item(Count*) &rArr; CustomList&lang;Count*&rang;::push_back(Count* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManager::register_item(Count*)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManagerInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::SuperUart(__UART_HandleTypeDef*, unsigned short, unsigned short)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::SuperCan(FDCAN_HandleTypeDef*, unsigned int, unsigned int)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 36u, 1u&rang;::default_motor__sub_object(unsigned short)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotor::LKMotor__sub_object(unsigned short, unsigned int, float)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::LKControl__sub_object&lang;unsigned int&, float const&&rang;(SuperCan*, unsigned short, unsigned int&, float const&)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 720u, 1u&rang;::default_motor__sub_object(unsigned short)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::UI__sub_object(unsigned short, unsigned short, __UART_HandleTypeDef*)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::ImageTrans__sub_object(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[38b]"></a>Count::~Count__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, superuart.o(.text._ZN5CountD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Count::~Count__sub_object() &rArr; CountManager::unregister_item(Count*) &rArr; CustomList&lang;Count*&rang;::remove(Count* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManager::unregister_item(Count*)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManagerInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::~SuperUart()
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 36u, 1u&rang;::~default_motor__sub_object()
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 720u, 1u&rang;::~default_motor__sub_object()
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotor::~LKMotor__sub_object()
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::~LKControl__sub_object()
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 3591u, 187u&rang;::~default_motor__sub_object()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::~UI__sub_object()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::~ImageTrans__sub_object()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::~SuperCan__sub_object()
</UL>

<P><STRONG><a name="[16d]"></a>Count::operator++()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lkmotor.o(.text._ZN5CountppEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Count::operator++()
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::read_totalposition()
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::close()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::enable()
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::clear_error()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorStatusCallback
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 3591u, 187u&rang;::get_feedback(unsigned char const*)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 36u, 1u&rang;::get_feedback(unsigned char const*)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 720u, 1u&rang;::get_feedback(unsigned char const*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::receive()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::transmit(unsigned int, short, short, short, short)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::transmit_pdata(unsigned int, unsigned char*)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotor::get_feedback(unsigned char*)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::transmit(unsigned short)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::transmit_dma_pdata(unsigned char*, unsigned short)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::set_position_near(float, float)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::set_position(float, float)
</UL>

<P><STRONG><a name="[38e]"></a>M2006::total_cnt()</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, cancallback.o(.text._ZN5M20069total_cntEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = M2006::total_cnt()
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006Speed::get_feedback(unsigned short, unsigned char*)
</UL>

<P><STRONG><a name="[3fc]"></a>M2006::M2006__sub_object(unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vari.o(.text._ZN5M2006C2Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = M2006::M2006__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 36u, 1u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 36u, 1u&rang;::default_motor__sub_object(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPidControl&lang;M2006&rang;::SpeedPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, unsigned short const&)
</UL>

<P><STRONG><a name="[3fd]"></a>M2006::~M2006__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vari.o(.text._ZN5M2006D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = M2006::~M2006__sub_object() &rArr; default_motor&lang;8192u, 36u, 1u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 36u, 1u&rang;::~default_motor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPidControl&lang;M2006&rang;::~SpeedPidControl__sub_object()
</UL>

<P><STRONG><a name="[3e9]"></a>M3508::M3508__sub_object(unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, vari.o(.text._ZN5M3508C2Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = M3508::M3508__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosPidControl&lang;M3508&rang;::PosPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPidControl&lang;M3508&rang;::SpeedPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, unsigned short const&)
</UL>

<P><STRONG><a name="[3eb]"></a>M3508::~M3508__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vari.o(.text._ZN5M3508D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = M3508::~M3508__sub_object() &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 3591u, 187u&rang;::~default_motor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosPidControl&lang;M3508&rang;::~PosPidControl__sub_object()
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPidControl&lang;M3508&rang;::~SpeedPidControl__sub_object()
</UL>

<P><STRONG><a name="[39f]"></a>Motor&lang;M2006Speed&rang;::Motor__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, vari.o(.text._ZN5MotorI10M2006SpeedEC2IJRK3PidRKtEEEDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Motor&lang;M2006Speed&rang;::Motor__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; M2006Speed::M2006Speed__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; SpeedPidControl&lang;M2006&rang;::SpeedPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; M2006::M2006__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 36u, 1u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006Speed::M2006Speed__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::OneStepGet__sub_object(Pid const&, unsigned short, Pid const&, Pid const&, unsigned short)
</UL>

<P><STRONG><a name="[3a2]"></a>Motor&lang;M2006Speed&rang;::~Motor__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vari.o(.text._ZN5MotorI10M2006SpeedED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Motor&lang;M2006Speed&rang;::~Motor__sub_object() &rArr; M2006Speed::~M2006Speed__sub_object() &rArr; SpeedPidControl&lang;M2006&rang;::~SpeedPidControl__sub_object() &rArr; M2006::~M2006__sub_object() &rArr; default_motor&lang;8192u, 36u, 1u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006Speed::~M2006Speed__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::~OneStepGet__sub_object()
</UL>

<P><STRONG><a name="[3ac]"></a>Motor&lang;M3508Speed&rang;::Motor__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, vari.o(.text._ZN5MotorI10M3508SpeedEC2IJRK3PidRKtEEEDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Motor&lang;M3508Speed&rang;::Motor__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; M3508Speed::M3508Speed__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; SpeedPidControl&lang;M3508&rang;::SpeedPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; M3508::M3508__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508Speed::M3508Speed__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_dep::extend_motor::extend_motor__sub_object(std::__2::array&lang;chassis_dep::ChassisMotorCfg, 2u&rang; const&)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_dep::base_motor::base_motor__sub_object(std::__2::array&lang;chassis_dep::ChassisMotorCfg, 4u&rang; const&)
</UL>

<P><STRONG><a name="[3ae]"></a>Motor&lang;M3508Speed&rang;::~Motor__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vari.o(.text._ZN5MotorI10M3508SpeedED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Motor&lang;M3508Speed&rang;::~Motor__sub_object() &rArr; M3508Speed::~M3508Speed__sub_object() &rArr; SpeedPidControl&lang;M3508&rang;::~SpeedPidControl__sub_object() &rArr; M3508::~M3508__sub_object() &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508Speed::~M3508Speed__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_dep::base_motor::~base_motor__sub_object()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_dep::extend_motor::~extend_motor__sub_object()
</UL>

<P><STRONG><a name="[3c1]"></a>Motor&lang;M2006DiffPos&rang;::Motor__sub_object&lang;Pid const&, Pid const&, unsigned int&&rang;(Pid const&, Pid const&, unsigned int&)</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, vari.o(.text._ZN5MotorI12M2006DiffPosEC2IJRK3PidS5_RjEEEDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = Motor&lang;M2006DiffPos&rang;::Motor__sub_object&lang;Pid const&, Pid const&, unsigned int&&rang;(Pid const&, Pid const&, unsigned int&) &rArr; M2006DiffPos::M2006DiffPos__sub_object&lang;Pid const&, Pid const&, unsigned int&&rang;(Pid const&, Pid const&, unsigned int&) &rArr; PosPidControl&lang;M2006Diff&rang;::PosPidControl__sub_object&lang;unsigned int&&rang;(Pid const&, Pid const&, unsigned int&) &rArr; M2006Diff::M2006Diff__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 720u, 1u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006DiffPos::M2006DiffPos__sub_object&lang;Pid const&, Pid const&, unsigned int&&rang;(Pid const&, Pid const&, unsigned int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::Differentiator::Differentiator__sub_object(float, unsigned int, Pid const&, Pid const&, unsigned int, Pid const&, Pid const&, __I2C_HandleTypeDef*)
</UL>

<P><STRONG><a name="[3c4]"></a>Motor&lang;M2006DiffPos&rang;::~Motor__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vari.o(.text._ZN5MotorI12M2006DiffPosED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Motor&lang;M2006DiffPos&rang;::~Motor__sub_object() &rArr; M2006DiffPos::~M2006DiffPos__sub_object() &rArr; PosPidControl&lang;M2006Diff&rang;::~PosPidControl__sub_object() &rArr; M2006Diff::~M2006Diff__sub_object() &rArr; default_motor&lang;8192u, 720u, 1u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006DiffPos::~M2006DiffPos__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::Differentiator::~Differentiator__sub_object()
</UL>

<P><STRONG><a name="[416]"></a>Motor&lang;LKMotorSingle&rang;::Motor__sub_object&lang;SuperCan*&, unsigned int&, unsigned int&, float const&&rang;(SuperCan*&, unsigned int&, unsigned int&, float const&)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, vari.o(.text._ZN5MotorI13LKMotorSingleEC2IJRP8SuperCanRjS6_RKfEEEDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Motor&lang;LKMotorSingle&rang;::Motor__sub_object&lang;SuperCan*&, unsigned int&, unsigned int&, float const&&rang;(SuperCan*&, unsigned int&, unsigned int&, float const&) &rArr; LKMotorSingle::LKMotorSingle__sub_object&lang;SuperCan*&, unsigned int&, unsigned int&, float const&&rang;(SuperCan*&, unsigned int&, unsigned int&, float const&) &rArr; LKControl&lang;LKMotor&rang;::LKControl__sub_object&lang;unsigned int&, float const&&rang;(SuperCan*, unsigned short, unsigned int&, float const&) &rArr; LKMotor::LKMotor__sub_object(unsigned short, unsigned int, float) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorSingle::LKMotorSingle__sub_object&lang;SuperCan*&, unsigned int&, unsigned int&, float const&&rang;(SuperCan*&, unsigned int&, unsigned int&, float const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::RoboArm__sub_object(SuperCan*, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, float, unsigned int, Pid const&, Pid const&, unsigned int, Pid const&, Pid const&, __I2C_HandleTypeDef*, roboarm_dep::offset&&)
</UL>

<P><STRONG><a name="[417]"></a>Motor&lang;LKMotorSingle&rang;::~Motor__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vari.o(.text._ZN5MotorI13LKMotorSingleED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Motor&lang;LKMotorSingle&rang;::~Motor__sub_object() &rArr; LKMotorSingle::~LKMotorSingle__sub_object() &rArr; LKControl&lang;LKMotor&rang;::~LKControl__sub_object() &rArr; LKMotor::~LKMotor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorSingle::~LKMotorSingle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::'unnamed'::~__sub_object()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::~RoboArm__sub_object()
</UL>

<P><STRONG><a name="[3a0]"></a>Motor&lang;M3508Pos&rang;::Motor__sub_object&lang;Pid const&, Pid const&, unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&)</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, vari.o(.text._ZN5MotorI8M3508PosEC2IJRK3PidS5_RKtEEEDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = Motor&lang;M3508Pos&rang;::Motor__sub_object&lang;Pid const&, Pid const&, unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&) &rArr; M3508Pos::M3508Pos__sub_object&lang;Pid const&, Pid const&, unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&) &rArr; PosPidControl&lang;M3508&rang;::PosPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&) &rArr; M3508::M3508__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508Pos::M3508Pos__sub_object&lang;Pid const&, Pid const&, unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::OneStepGet__sub_object(Pid const&, unsigned short, Pid const&, Pid const&, unsigned short)
</UL>

<P><STRONG><a name="[3a1]"></a>Motor&lang;M3508Pos&rang;::~Motor__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vari.o(.text._ZN5MotorI8M3508PosED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Motor&lang;M3508Pos&rang;::~Motor__sub_object() &rArr; M3508Pos::~M3508Pos__sub_object() &rArr; PosPidControl&lang;M3508&rang;::~PosPidControl__sub_object() &rArr; M3508::~M3508__sub_object() &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508Pos::~M3508Pos__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::~OneStepGet__sub_object()
</UL>

<P><STRONG><a name="[430]"></a>Slope::update()</STRONG> (Thumb, 236 bytes, Stack size 12 bytes, slope.o(.text._ZN5Slope6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Slope::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::update_slope(interact_dep::chassis_mode)
</UL>

<P><STRONG><a name="[3b4]"></a>Slope::Slope__sub_object(slope_cfg const&)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vari.o(.text._ZN5SlopeC2ERK9slope_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Slope::Slope__sub_object(slope_cfg const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_dep::move::move__sub_object(std::__2::array&lang;slope_cfg, 4u&rang; const&)
</UL>

<P><STRONG><a name="[2ff]"></a>bool Buzzer::StartMusic&lang;(Buzzer::delay_pl)0&rang;()</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, buzzertask.o(.text._ZN6Buzzer10StartMusicILNS_8delay_plE0EEEbv))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = bool Buzzer::StartMusic&lang;(Buzzer::delay_pl)0&rang;() &rArr; void Buzzer::delay&lang;(Buzzer::delay_pl)0&rang;(unsigned int) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::SetFreq(unsigned short, unsigned short)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Buzzer::delay&lang;(Buzzer::delay_pl)0&rang;(unsigned int)
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBuffer&lang;unsigned short, 50u&rang;::pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerTask()
</UL>

<P><STRONG><a name="[354]"></a>void Buzzer::StartMusic&lang;(unsigned short)8, (Buzzer::delay_pl)1&rang;(std::__2::array&lang;unsigned short, (unsigned short)8&rang; const&)</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, errortask.o(.text._ZN6Buzzer10StartMusicILt8ELNS_8delay_plE1EEEvRKNSt3__25arrayItXT_EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = void Buzzer::StartMusic&lang;(unsigned short)8, (Buzzer::delay_pl)1&rang;(std::__2::array&lang;unsigned short, (unsigned short)8&rang; const&) &rArr; Buzzer::SetFreq(unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Buzzer::delay&lang;(Buzzer::delay_pl)1&rang;(unsigned int)
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::SetFreq(unsigned short, unsigned short)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;unsigned short, 8u&rang;::end[abi:v180000]() const
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;unsigned short, 8u&rang;::begin[abi:v180000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorTask()
</UL>

<P><STRONG><a name="[35e]"></a>Buzzer::Start()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, starttask.o(.text._ZN6Buzzer5StartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Buzzer::Start() &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask()
</UL>

<P><STRONG><a name="[41c]"></a>void Buzzer::delay&lang;(Buzzer::delay_pl)0&rang;(unsigned int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, buzzertask.o(.text._ZN6Buzzer5delayILNS_8delay_plE0EEEvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = void Buzzer::delay&lang;(Buzzer::delay_pl)0&rang;(unsigned int) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool Buzzer::StartMusic&lang;(Buzzer::delay_pl)0&rang;()
</UL>

<P><STRONG><a name="[41d]"></a>void Buzzer::delay&lang;(Buzzer::delay_pl)1&rang;(unsigned int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, errortask.o(.text._ZN6Buzzer5delayILNS_8delay_plE1EEEvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = void Buzzer::delay&lang;(Buzzer::delay_pl)1&rang;(unsigned int) &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Buzzer::StartMusic&lang;(unsigned short)8, (Buzzer::delay_pl)1&rang;(std::__2::array&lang;unsigned short, (unsigned short)8&rang; const&)
</UL>

<P><STRONG><a name="[41b]"></a>Buzzer::SetFreq(unsigned short, unsigned short)</STRONG> (Thumb, 440 bytes, Stack size 44 bytes, errortask.o(.text._ZN6Buzzer7SetFreqEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Buzzer::SetFreq(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Buzzer::StartMusic&lang;(unsigned short)8, (Buzzer::delay_pl)1&rang;(std::__2::array&lang;unsigned short, (unsigned short)8&rang; const&)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool Buzzer::StartMusic&lang;(Buzzer::delay_pl)0&rang;()
</UL>

<P><STRONG><a name="[307]"></a>void Buzzer::PushMusic&lang;(unsigned short)24&rang;(std::__2::array&lang;unsigned short, (unsigned short)24&rang; const&)</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, arminittask.o(.text._ZN6Buzzer9PushMusicILt24EEEvRKNSt3__25arrayItXT_EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = void Buzzer::PushMusic&lang;(unsigned short)24&rang;(std::__2::array&lang;unsigned short, (unsigned short)24&rang; const&) &rArr; void RoundBuffer&lang;unsigned short, 50u&rang;::push&lang;24u&rang;(std::__2::array&lang;unsigned short, 24u&rang; const&) &rArr; std::__2::array&lang;unsigned short, 24u&rang;::end[abi:v180000]() const &rArr; std::__2::array&lang;unsigned short, 24u&rang;::data[abi:v180000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBuffer&lang;unsigned short, 50u&rang;::push(unsigned short const&)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void RoundBuffer&lang;unsigned short, 50u&rang;::push&lang;24u&rang;(std::__2::array&lang;unsigned short, 24u&rang; const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmInitTask()
</UL>

<P><STRONG><a name="[32b]"></a>void Buzzer::PushMusic&lang;(unsigned short)8&rang;(std::__2::array&lang;unsigned short, (unsigned short)8&rang; const&)</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, interact.o(.text._ZN6Buzzer9PushMusicILt8EEEvRKNSt3__25arrayItXT_EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = void Buzzer::PushMusic&lang;(unsigned short)8&rang;(std::__2::array&lang;unsigned short, (unsigned short)8&rang; const&) &rArr; void RoundBuffer&lang;unsigned short, 50u&rang;::push&lang;8u&rang;(std::__2::array&lang;unsigned short, 8u&rang; const&) &rArr; std::__2::array&lang;unsigned short, 8u&rang;::end[abi:v180000]() const &rArr; std::__2::array&lang;unsigned short, 8u&rang;::data[abi:v180000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBuffer&lang;unsigned short, 50u&rang;::push(unsigned short const&)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void RoundBuffer&lang;unsigned short, 50u&rang;::push&lang;8u&rang;(std::__2::array&lang;unsigned short, 8u&rang; const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_ctrl_recover()
</UL>

<P><STRONG><a name="[41e]"></a>Buzzer::Buzzer__sub_object(TIM_HandleTypeDef*, unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, vari.o(.text._ZN6BuzzerC2EP17TIM_HandleTypeDeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Buzzer::Buzzer__sub_object(TIM_HandleTypeDef*, unsigned short) &rArr; RoundBuffer&lang;unsigned short, 50u&rang;::RoundBuffer__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundBuffer&lang;unsigned short, 50u&rang;::RoundBuffer__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.11
</UL>

<P><STRONG><a name="[420]"></a>Detect::getSysTime()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, detect.o(.text._ZN6Detect10getSysTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Detect::getSysTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::JudgeLost()
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::update()
</UL>

<P><STRONG><a name="[3f3]"></a>Detect::update()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, detect.o(.text._ZN6Detect6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Detect::update() &rArr; Detect::getSysTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::getSysTime()
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 3591u, 187u&rang;::get_feedback(unsigned char const*)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 36u, 1u&rang;::get_feedback(unsigned char const*)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 720u, 1u&rang;::get_feedback(unsigned char const*)
</UL>

<P><STRONG><a name="[3d8]"></a>Detect::JudgeLost()</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, detect.o(.text._ZN6Detect9JudgeLostEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Detect::JudgeLost() &rArr; Detect::getSysTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::getSysTime()
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;Detect&rang;::JudgeLost()
</UL>

<P><STRONG><a name="[3f5]"></a>Detect::Detect(unsigned int, void (*)(), void (*)())</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, detect.o(.text._ZN6DetectC2EjPFvvES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;Detect&rang;::Register(Detect*)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManagerInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 36u, 1u&rang;::default_motor__sub_object(unsigned short)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotor::LKMotor__sub_object(unsigned short, unsigned int, float)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 720u, 1u&rang;::default_motor__sub_object(unsigned short)
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short)
</UL>

<P><STRONG><a name="[4ff]"></a>Detect::Detect__sub_object(unsigned int, void (*)(), void (*)())</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, detect.o(.text._ZN6DetectC2EjPFvvES1_), UNUSED)

<P><STRONG><a name="[3f7]"></a>Detect::~Detect()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, detect.o(.text._ZN6DetectD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;Detect&rang;::Unregister(Detect*)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManagerInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 36u, 1u&rang;::~default_motor__sub_object()
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 720u, 1u&rang;::~default_motor__sub_object()
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotor::~LKMotor__sub_object()
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 3591u, 187u&rang;::~default_motor__sub_object()
</UL>

<P><STRONG><a name="[500]"></a>Detect::~Detect__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, detect.o(.text._ZN6DetectD2Ev), UNUSED)

<P><STRONG><a name="[421]"></a>RGBLED::load()</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rgbled.o(.text._ZN6RGBLED4loadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = RGBLED::load() &rArr; SuperSPI::transmit_dma(unsigned char const*, unsigned short) &rArr; HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperSPI::transmit_dma(unsigned char const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLED::SetColor(unsigned char, unsigned char, unsigned char)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLED::SetColor()
</UL>

<P><STRONG><a name="[423]"></a>RGBLED::delay(unsigned int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ledtask.o(.text._ZN6RGBLED5delayEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = RGBLED::delay(unsigned int) &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLED::update()
</UL>

<P><STRONG><a name="[349]"></a>RGBLED::update()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ledtask.o(.text._ZN6RGBLED6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = RGBLED::update() &rArr; RGBLED::SetColor() &rArr; RGBLED::load() &rArr; SuperSPI::transmit_dma(unsigned char const*, unsigned short) &rArr; HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLED::delay(unsigned int)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLED::SetColor()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTask()
</UL>

<P><STRONG><a name="[355]"></a>RGBLED::SetColor(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rgbled.o(.text._ZN6RGBLED8SetColorEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RGBLED::SetColor(unsigned char, unsigned char, unsigned char) &rArr; RGBLED::load() &rArr; SuperSPI::transmit_dma(unsigned char const*, unsigned short) &rArr; HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLED::load()
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorTask()
</UL>

<P><STRONG><a name="[424]"></a>RGBLED::SetColor()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ledtask.o(.text._ZN6RGBLED8SetColorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RGBLED::SetColor() &rArr; RGBLED::load() &rArr; SuperSPI::transmit_dma(unsigned char const*, unsigned short) &rArr; HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLED::load()
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLED::update()
</UL>

<P><STRONG><a name="[425]"></a>RGBLED::RGBLED__sub_object(__SPI_HandleTypeDef*)</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, vari.o(.text._ZN6RGBLEDC2EP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RGBLED::RGBLED__sub_object(__SPI_HandleTypeDef*) &rArr; SuperSPI::SuperSPI__sub_object(__SPI_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperSPI::SuperSPI__sub_object(__SPI_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.10
</UL>

<P><STRONG><a name="[427]"></a>W25Q64::write_page(unsigned int, unsigned char*, unsigned int)</STRONG> (Thumb, 178 bytes, Stack size 120 bytes, w25q64.o(.text._ZN6W25Q6410write_pageEjPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = W25Q64::write_page(unsigned int, unsigned char*, unsigned int) &rArr; W25Q64::write_enable() &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Transmit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::write_enable()
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::OSPI_W25Qxx_AutoPollingMemReady()
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::write_buffer(unsigned int, unsigned char*, unsigned int)
</UL>

<P><STRONG><a name="[345]"></a>W25Q64::raed_buffer(unsigned int, unsigned char*, unsigned int)</STRONG> (Thumb, 162 bytes, Stack size 120 bytes, w25q64.o(.text._ZN6W25Q6411raed_bufferEjPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = W25Q64::raed_buffer(unsigned int, unsigned char*, unsigned int) &rArr; W25Q64::OSPI_W25Qxx_AutoPollingMemReady() &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::OSPI_W25Qxx_AutoPollingMemReady()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUTask()
</UL>

<P><STRONG><a name="[347]"></a>W25Q64::write_buffer(unsigned int, unsigned char*, unsigned int)</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, w25q64.o(.text._ZN6W25Q6412write_bufferEjPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = W25Q64::write_buffer(unsigned int, unsigned char*, unsigned int) &rArr; W25Q64::write_page(unsigned int, unsigned char*, unsigned int) &rArr; W25Q64::write_enable() &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::write_page(unsigned int, unsigned char*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUTask()
</UL>

<P><STRONG><a name="[428]"></a>W25Q64::write_enable()</STRONG> (Thumb, 206 bytes, Stack size 128 bytes, w25q64.o(.text._ZN6W25Q6412write_enableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = W25Q64::write_enable() &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AutoPolling
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::write_page(unsigned int, unsigned char*, unsigned int)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::erase_sector_4(unsigned int)
</UL>

<P><STRONG><a name="[346]"></a>W25Q64::erase_sector_4(unsigned int)</STRONG> (Thumb, 138 bytes, Stack size 112 bytes, w25q64.o(.text._ZN6W25Q6414erase_sector_4Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = W25Q64::erase_sector_4(unsigned int) &rArr; W25Q64::write_enable() &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::write_enable()
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::OSPI_W25Qxx_AutoPollingMemReady()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUTask()
</UL>

<P><STRONG><a name="[429]"></a>W25Q64::OSPI_W25Qxx_AutoPollingMemReady()</STRONG> (Thumb, 146 bytes, Stack size 128 bytes, w25q64.o(.text._ZN6W25Q6431OSPI_W25Qxx_AutoPollingMemReadyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = W25Q64::OSPI_W25Qxx_AutoPollingMemReady() &rArr; HAL_OSPI_Command &rArr; OSPI_ConfigCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AutoPolling
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::raed_buffer(unsigned int, unsigned char*, unsigned int)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::write_page(unsigned int, unsigned char*, unsigned int)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::erase_sector_4(unsigned int)
</UL>

<P><STRONG><a name="[35b]"></a>W25Q64::init()</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, w25q64.o(.text._ZN6W25Q644initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = W25Q64::init() &rArr; W25Q64::read_id() &rArr; HAL_OSPI_Receive &rArr; OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::read_id()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask()
</UL>

<P><STRONG><a name="[42a]"></a>W25Q64::read_id()</STRONG> (Thumb, 126 bytes, Stack size 112 bytes, w25q64.o(.text._ZN6W25Q647read_idEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = W25Q64::read_id() &rArr; HAL_OSPI_Receive &rArr; OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::init()
</UL>

<P><STRONG><a name="[461]"></a>W25Q64::W25Q64__sub_object(OSPI_HandleTypeDef*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vari.o(.text._ZN6W25Q64C2EP18OSPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = W25Q64::W25Q64__sub_object(OSPI_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
</UL>

<P><STRONG><a name="[42c]"></a>ui_dep::ui_control::init(unsigned char const*, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, judgetask.o(.text._ZN6ui_dep10ui_control4initEPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ui_dep::ui_control::init(unsigned char const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_dep::ui_control::ui_control__sub_object(unsigned char const*, unsigned char)
</UL>

<P><STRONG><a name="[42b]"></a>ui_dep::ui_control::ui_control__sub_object(unsigned char const*, unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, judgetask.o(.text._ZN6ui_dep10ui_controlC2EPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ui_dep::ui_control::ui_control__sub_object(unsigned char const*, unsigned char) &rArr; ui_dep::ui_control::init(unsigned char const*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_dep::ui_control::init(unsigned char const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[42d]"></a>Chassis::load_speed(interact_dep::chassis_mode)</STRONG> (Thumb, 812 bytes, Stack size 120 bytes, chassis.o(.text._ZN7Chassis10load_speedEN12interact_dep12chassis_modeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Chassis::load_speed(interact_dep::chassis_mode) &rArr; float my_abs&lang;float&rang;(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float my_abs&lang;float&rang;(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::update_slope(interact_dep::chassis_mode)
</UL>

<P><STRONG><a name="[188]"></a>Chassis::UpdateMotor()</STRONG> (Thumb, 242 bytes, Stack size 72 bytes, chassis.o(.text._ZN7Chassis11UpdateMotorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Chassis::UpdateMotor() &rArr; M3508Speed::get_feedback(unsigned short, unsigned char const*) &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::get_feedback(unsigned char const*) &rArr; Detect::update() &rArr; Detect::getSysTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508Speed::get_feedback(unsigned short, unsigned char const*)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::read()
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::read_header()
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[309]"></a>Chassis::update_slope(interact_dep::chassis_mode)</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, chassis.o(.text._ZN7Chassis12update_slopeEN12interact_dep12chassis_modeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Chassis::update_slope(interact_dep::chassis_mode) &rArr; Chassis::load_speed(interact_dep::chassis_mode) &rArr; float my_abs&lang;float&rang;(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::load_speed(interact_dep::chassis_mode)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slope::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisTask()
</UL>

<P><STRONG><a name="[30b]"></a>Chassis::send_foc()</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, chassis.o(.text._ZN7Chassis8send_focEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Chassis::send_foc() &rArr; SuperCan::transmit(unsigned int, short, short, short, short) &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPidControl&lang;M3508&rang;::output() const
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::transmit(unsigned int, short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisTask()
</UL>

<P><STRONG><a name="[30a]"></a>Chassis::UpdatePid()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, chassis.o(.text._ZN7Chassis9UpdatePidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Chassis::UpdatePid() &rArr; SpeedPidControl&lang;M3508&rang;::set_speed(float) &rArr; Pid::update(float, float) &rArr; float limited&lang;float&rang;(float&&, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPidControl&lang;M3508&rang;::set_speed(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisTask()
</UL>

<P><STRONG><a name="[432]"></a>Chassis::Chassis__sub_object(SuperCan*, std::__2::array&lang;slope_cfg, 4u&rang; const&, std::__2::array&lang;chassis_dep::ChassisMotorCfg, 4u&rang; const&, std::__2::array&lang;chassis_dep::ChassisMotorCfg, 2u&rang; const&)</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, vari.o(.text._ZN7ChassisC2EP8SuperCanRKNSt3__25arrayI9slope_cfgLj4EEERKNS3_IN11chassis_dep15ChassisMotorCfgELj4EEERKNS3_IS9_Lj2EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Chassis::Chassis__sub_object(SuperCan*, std::__2::array&lang;slope_cfg, 4u&rang; const&, std::__2::array&lang;chassis_dep::ChassisMotorCfg, 4u&rang; const&, std::__2::array&lang;chassis_dep::ChassisMotorCfg, 2u&rang; const&) &rArr; chassis_dep::base_motor::base_motor__sub_object(std::__2::array&lang;chassis_dep::ChassisMotorCfg, 4u&rang; const&) &rArr; Motor&lang;M3508Speed&rang;::Motor__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; M3508Speed::M3508Speed__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; SpeedPidControl&lang;M3508&rang;::SpeedPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; M3508::M3508__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_dep::key::key__sub_object()
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_dep::move::move__sub_object(std::__2::array&lang;slope_cfg, 4u&rang; const&)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_dep::extend_motor::extend_motor__sub_object(std::__2::array&lang;chassis_dep::ChassisMotorCfg, 2u&rang; const&)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_dep::base_motor::base_motor__sub_object(std::__2::array&lang;chassis_dep::ChassisMotorCfg, 4u&rang; const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
</UL>

<P><STRONG><a name="[da]"></a>Chassis::~Chassis__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vari.o(.text._ZN7ChassisD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = Chassis::~Chassis__sub_object() &rArr; chassis_dep::base_motor::~base_motor__sub_object() &rArr; Motor&lang;M3508Speed&rang;::~Motor__sub_object() &rArr; M3508Speed::~M3508Speed__sub_object() &rArr; SpeedPidControl&lang;M3508&rang;::~SpeedPidControl__sub_object() &rArr; M3508::~M3508__sub_object() &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_dep::base_motor::~base_motor__sub_object()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_dep::extend_motor::~extend_motor__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vari.o(.text.__cxx_global_var_init.8)
</UL>
<P><STRONG><a name="[3e2]"></a>LKMotor::get_feedback(unsigned char*)</STRONG> (Thumb, 1128 bytes, Stack size 56 bytes, lkmotor.o(.text._ZN7LKMotor12get_feedbackEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LKMotor::get_feedback(unsigned char*) &rArr; float whileLimit&lang;float&rang;(float&, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float whileLimit&lang;float&rang;(float&, float, float)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::operator++()
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorSingle::get_feedback(unsigned short, unsigned char*)
</UL>

<P><STRONG><a name="[436]"></a>LKMotor::LKMotor__sub_object(unsigned short, unsigned int, float)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, vari.o(.text._ZN7LKMotorC2Etjf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = LKMotor::LKMotor__sub_object(unsigned short, unsigned int, float) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::Detect(unsigned int, void (*)(), void (*)())
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::Count__sub_object()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::LKControl__sub_object&lang;unsigned int&, float const&&rang;(SuperCan*, unsigned short, unsigned int&, float const&)
</UL>

<P><STRONG><a name="[437]"></a>LKMotor::~LKMotor__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vari.o(.text._ZN7LKMotorD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = LKMotor::~LKMotor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect::~Detect()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::~Count__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::~LKControl__sub_object()
</UL>

<P><STRONG><a name="[303]"></a>RoboArm::init_offset(std::__2::array&lang;float, 6u&rang;&)</STRONG> (Thumb, 608 bytes, Stack size 48 bytes, roboarm.o(.text._ZN7RoboArm11init_offsetERNSt3__25arrayIfLj6EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RoboArm::init_offset(std::__2::array&lang;float, 6u&rang;&) &rArr; LKControl&lang;LKMotor&rang;::read_totalposition() &rArr; SuperCan::transmit_pdata(unsigned int, unsigned char*) &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::read_totalposition()
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmInitTask()
</UL>

<P><STRONG><a name="[304]"></a>RoboArm::load_target(std::__2::array&lang;float, 6u&rang; const&)</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, roboarm.o(.text._ZN7RoboArm11load_targetERKNSt3__25arrayIfLj6EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RoboArm::load_target(std::__2::array&lang;float, 6u&rang; const&) &rArr; std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int) const
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmTask()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmInitTask()
</UL>

<P><STRONG><a name="[305]"></a>RoboArm::update_relative_pos()</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, roboarm.o(.text._ZN7RoboArm19update_relative_posEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = RoboArm::update_relative_pos() &rArr; roboarm_dep::Differentiator::update_relative_pos(float&, float&) &rArr; M2006DiffPos::total_position()
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::Differentiator::update_relative_pos(float&, float&)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmTask()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmInitTask()
</UL>

<P><STRONG><a name="[353]"></a>RoboArm::close()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, roboarm.o(.text._ZN7RoboArm5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RoboArm::close() &rArr; LKControl&lang;LKMotor&rang;::close() &rArr; SuperCan::transmit_pdata(unsigned int, unsigned char*) &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorTask()
</UL>

<P><STRONG><a name="[439]"></a>RoboArm::fkine(std::__2::array&lang;float, 3u&rang;&)</STRONG> (Thumb, 384 bytes, Stack size 96 bytes, roboarm.o(.text._ZN7RoboArm5fkineERNSt3__25arrayIfLj3EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RoboArm::fkine(std::__2::array&lang;float, 3u&rang;&) &rArr; std::__2::array&lang;float, 3u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;float, 3u&rang;::operator[][abi:v180000](unsigned int)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::update_roboArm(RoboArm&)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_xyz(RoboArm&)
</UL>

<P><STRONG><a name="[43b]"></a>RoboArm::ikine(std::__2::array&lang;float, 3u&rang; const&)</STRONG> (Thumb, 2984 bytes, Stack size 496 bytes, roboarm.o(.text._ZN7RoboArm5ikineERKNSt3__25arrayIfLj3EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = RoboArm::ikine(std::__2::array&lang;float, 3u&rang; const&) &rArr; slove_q2(float, float, float, float, float) &rArr; roboarm_dep::arm_atan2_f32(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float my_abs&lang;float&rang;(float)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool isInRange&lang;float&rang;(float, float, float, float)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slove_q2(float, float, float, float, float)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::arm_acos_f32(float)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::arm_atan_f32(float, float)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::is_zero(float)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;float, 3u&rang;::operator[][abi:v180000](unsigned int) const
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_xyz(RoboArm&)
</UL>

<P><STRONG><a name="[301]"></a>RoboArm::enable()</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, roboarm.o(.text._ZN7RoboArm6enableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RoboArm::enable() &rArr; auto RoboArm::enable()::$_2::operator()&lang;Motor&lang;LKMotorSingle&rang;&rang;(Motor&lang;LKMotorSingle&rang;&) const &rArr; LKControl&lang;LKMotor&rang;::enable() &rArr; SuperCan::transmit_pdata(unsigned int, unsigned char*) &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto RoboArm::enable()::$_2::operator()&lang;Motor&lang;LKMotorSingle&rang;&rang;(Motor&lang;LKMotorSingle&rang;&) const
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto RoboArm::enable()::$_1::operator()&lang;Motor&lang;LKMotorSingle&rang;&rang;(Motor&lang;LKMotorSingle&rang;&) const
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto RoboArm::enable()::$_0::operator()&lang;Motor&lang;LKMotorSingle&rang;&rang;(Motor&lang;LKMotorSingle&rang;&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmInitTask()
</UL>

<P><STRONG><a name="[441]"></a>RoboArm::RoboArm__sub_object(SuperCan*, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, float, unsigned int, Pid const&, Pid const&, unsigned int, Pid const&, Pid const&, __I2C_HandleTypeDef*, roboarm_dep::offset&&)</STRONG> (Thumb, 418 bytes, Stack size 96 bytes, vari.o(.text._ZN7RoboArmC2EP8SuperCanjjfjjfjjfjjfjjffjRK3PidS4_jS4_S4_P19__I2C_HandleTypeDefON11roboarm_dep6offsetE))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = RoboArm::RoboArm__sub_object(SuperCan*, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, float, unsigned int, Pid const&, Pid const&, unsigned int, Pid const&, Pid const&, __I2C_HandleTypeDef*, roboarm_dep::offset&&) &rArr; roboarm_dep::Differentiator::Differentiator__sub_object(float, unsigned int, Pid const&, Pid const&, unsigned int, Pid const&, Pid const&, __I2C_HandleTypeDef*) &rArr; Motor&lang;M2006DiffPos&rang;::Motor__sub_object&lang;Pid const&, Pid const&, unsigned int&&rang;(Pid const&, Pid const&, unsigned int&) &rArr; M2006DiffPos::M2006DiffPos__sub_object&lang;Pid const&, Pid const&, unsigned int&&rang;(Pid const&, Pid const&, unsigned int&) &rArr; PosPidControl&lang;M2006Diff&rang;::PosPidControl__sub_object&lang;unsigned int&&rang;(Pid const&, Pid const&, unsigned int&) &rArr; M2006Diff::M2006Diff__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 720u, 1u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;LKMotorSingle&rang;::Motor__sub_object&lang;SuperCan*&, unsigned int&, unsigned int&, float const&&rang;(SuperCan*&, unsigned int&, unsigned int&, float const&)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::Differentiator::Differentiator__sub_object(float, unsigned int, Pid const&, Pid const&, unsigned int, Pid const&, Pid const&, __I2C_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
</UL>

<P><STRONG><a name="[db]"></a>RoboArm::~RoboArm__sub_object()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, vari.o(.text._ZN7RoboArmD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = RoboArm::~RoboArm__sub_object() &rArr; roboarm_dep::Differentiator::~Differentiator__sub_object() &rArr; Motor&lang;M2006DiffPos&rang;::~Motor__sub_object() &rArr; M2006DiffPos::~M2006DiffPos__sub_object() &rArr; PosPidControl&lang;M2006Diff&rang;::~PosPidControl__sub_object() &rArr; M2006Diff::~M2006Diff__sub_object() &rArr; default_motor&lang;8192u, 720u, 1u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::Differentiator::~Differentiator__sub_object()
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::'unnamed'::~__sub_object()
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;LKMotorSingle&rang;::~Motor__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vari.o(.text.__cxx_global_var_init.9)
</UL>
<P><STRONG><a name="[442]"></a>RoboArm::'unnamed'::~__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, vari.o(.text._ZN7RoboArmUt_D2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = RoboArm::'unnamed'::~__sub_object() &rArr; Motor&lang;LKMotorSingle&rang;::~Motor__sub_object() &rArr; LKMotorSingle::~LKMotorSingle__sub_object() &rArr; LKControl&lang;LKMotor&rang;::~LKControl__sub_object() &rArr; LKMotor::~LKMotor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;LKMotorSingle&rang;::~Motor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::~RoboArm__sub_object()
</UL>

<P><STRONG><a name="[443]"></a>Interact::receive_rc()</STRONG> (Thumb, 716 bytes, Stack size 168 bytes, interact.o(.text._ZN8Interact10receive_rcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Interact::receive_rc() &rArr; float limited&lang;float&rang;(float&&, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float limited&lang;float&rang;(float&&, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::update_roboArm(RoboArm&)
</UL>

<P><STRONG><a name="[13e]"></a>Interact::receive_cdc(unsigned char*)</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, interact.o(.text._ZN8Interact11receive_cdcEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Interact::receive_cdc(unsigned char*) &rArr; std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_ReceiveCallBack
</UL>

<P><STRONG><a name="[444]"></a>Interact::receive_xyz(RoboArm&)</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, interact.o(.text._ZN8Interact11receive_xyzER7RoboArm))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = Interact::receive_xyz(RoboArm&) &rArr; RoboArm::ikine(std::__2::array&lang;float, 3u&rang; const&) &rArr; slove_q2(float, float, float, float, float) &rArr; roboarm_dep::arm_atan2_f32(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float limited&lang;float&rang;(float&, float, float)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::ikine(std::__2::array&lang;float, 3u&rang; const&)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;float, 3u&rang;::operator[][abi:v180000](unsigned int)
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::fkine(std::__2::array&lang;float, 3u&rang;&)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float limited&lang;float&rang;(float&&, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::update_roboArm(RoboArm&)
</UL>

<P><STRONG><a name="[446]"></a>Interact::receive_reset()</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, interact.o(.text._ZN8Interact13receive_resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Interact::receive_reset() &rArr; std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::update_roboArm(RoboArm&)
</UL>

<P><STRONG><a name="[232]"></a>Interact::receive_custom(unsigned char*)</STRONG> (Thumb, 444 bytes, Stack size 88 bytes, interact.o(.text._ZN8Interact14receive_customEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Interact::receive_custom(unsigned char*) &rArr; std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::read_map_back() const
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::set_pump(unsigned char)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::set_valve5(unsigned char)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;short, 6u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[327]"></a>Interact::update_chassis(Chassis&)</STRONG> (Thumb, 964 bytes, Stack size 224 bytes, interact.o(.text._ZN8Interact14update_chassisER7Chassis))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Interact::update_chassis(Chassis&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlTask()
</UL>

<P><STRONG><a name="[328]"></a>Interact::update_roboArm(RoboArm&)</STRONG> (Thumb, 872 bytes, Stack size 128 bytes, interact.o(.text._ZN8Interact14update_roboArmER7RoboArm))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = Interact::update_roboArm(RoboArm&) &rArr; Interact::receive_xyz(RoboArm&) &rArr; RoboArm::ikine(std::__2::array&lang;float, 3u&rang; const&) &rArr; slove_q2(float, float, float, float, float) &rArr; roboarm_dep::arm_atan2_f32(float, float) &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_actions(bool)
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool isApproxEqual&lang;float&rang;(float, float, float)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_reset()
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_xyz(RoboArm&)
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_rc()
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::fkine(std::__2::array&lang;float, 3u&rang;&)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlTask()
</UL>

<P><STRONG><a name="[449]"></a>Interact::receive_actions(bool)</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, interact.o(.text._ZN8Interact15receive_actionsEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Interact::receive_actions(bool) &rArr; std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::update_roboArm(RoboArm&)
</UL>

<P><STRONG><a name="[336]"></a>Interact::transmit_relative_pos(std::__2::array&lang;float, 6u&rang; const&)</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, interact.o(.text._ZN8Interact21transmit_relative_posERKNSt3__25arrayIfLj6EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Interact::transmit_relative_pos(std::__2::array&lang;float, 6u&rang; const&) &rArr; CDC_Transmit_HS &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Transmit_HS
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCTask()
</UL>

<P><STRONG><a name="[44a]"></a>Interact::Interact__sub_object(unsigned char const&, unsigned char const&, __UART_HandleTypeDef*, __UART_HandleTypeDef*, __UART_HandleTypeDef*)</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, vari.o(.text._ZN8InteractC2ERKhS1_P20__UART_HandleTypeDefS3_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = Interact::Interact__sub_object(unsigned char const&, unsigned char const&, __UART_HandleTypeDef*, __UART_HandleTypeDef*, __UART_HandleTypeDef*) &rArr; ImageTrans::ImageTrans__sub_object(__UART_HandleTypeDef*) &rArr; SuperUart::SuperUart(__UART_HandleTypeDef*, unsigned short, unsigned short) &rArr; Count::Count__sub_object() &rArr; CountManager::register_item(Count*) &rArr; CustomList&lang;Count*&rang;::push_back(Count* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key::Key__sub_object(unsigned int, unsigned int)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::SubBoard__sub_object(__UART_HandleTypeDef*)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC::PC__sub_object(unsigned char, unsigned char)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::ImageTrans__sub_object(__UART_HandleTypeDef*)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl::RemoteControl__sub_object(__UART_HandleTypeDef*, unsigned short, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.13
</UL>

<P><STRONG><a name="[d6]"></a>Interact::~Interact__sub_object()</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, vari.o(.text._ZN8InteractD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Interact::~Interact__sub_object() &rArr; RemoteControl::~RemoteControl__sub_object() &rArr; SuperUart::~SuperUart() &rArr; Count::~Count__sub_object() &rArr; CountManager::unregister_item(Count*) &rArr; CustomList&lang;Count*&rang;::remove(Count* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl::~RemoteControl__sub_object()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::~ImageTrans__sub_object()
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::~SubBoard__sub_object()
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key::~Key__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vari.o(.text.__cxx_global_var_init.13)
</UL>
<P><STRONG><a name="[18a]"></a>M3508Pos::get_feedback(unsigned short, unsigned char const*)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, cancallback.o(.text._ZN8M3508Pos12get_feedbackEtPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = M3508Pos::get_feedback(unsigned short, unsigned char const*) &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::get_feedback(unsigned char const*) &rArr; Detect::update() &rArr; Detect::getSysTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 3591u, 187u&rang;::get_feedback(unsigned char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[39d]"></a>M3508Pos::total_position()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, onestepget.o(.text._ZN8M3508Pos14total_positionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = M3508Pos::total_position()
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::move_down(float&, bool)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::move_upward(float&)
</UL>

<P><STRONG><a name="[39c]"></a>M3508Pos::is_block(short)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, onestepget.o(.text._ZN8M3508Pos8is_blockEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = M3508Pos::is_block(short) &rArr; double std::__2::__math::fabs[abi:v180000]&lang;short, 0&rang;(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double std::__2::__math::fabs[abi:v180000]&lang;short, 0&rang;(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::move_down(float&, bool)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::move_upward(float&)
</UL>

<P><STRONG><a name="[418]"></a>M3508Pos::M3508Pos__sub_object&lang;Pid const&, Pid const&, unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&)</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, vari.o(.text._ZN8M3508PosC2IJRK3PidS3_RKtEEEDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = M3508Pos::M3508Pos__sub_object&lang;Pid const&, Pid const&, unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&) &rArr; PosPidControl&lang;M3508&rang;::PosPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&) &rArr; M3508::M3508__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosPidControl&lang;M3508&rang;::PosPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;M3508Pos&rang;::Motor__sub_object&lang;Pid const&, Pid const&, unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&)
</UL>

<P><STRONG><a name="[419]"></a>M3508Pos::~M3508Pos__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vari.o(.text._ZN8M3508PosD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = M3508Pos::~M3508Pos__sub_object() &rArr; PosPidControl&lang;M3508&rang;::~PosPidControl__sub_object() &rArr; M3508::~M3508__sub_object() &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosPidControl&lang;M3508&rang;::~PosPidControl__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor&lang;M3508Pos&rang;::~Motor__sub_object()
</UL>

<P><STRONG><a name="[30e]"></a>SubBoard::set_valve1(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, keycallback.o(.text._ZN8SubBoard10set_valve1Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SubBoard::set_valve1(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoardTask()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;air_left_callback(KeyEventType)
</UL>

<P><STRONG><a name="[30f]"></a>SubBoard::set_valve2(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, keycallback.o(.text._ZN8SubBoard10set_valve2Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SubBoard::set_valve2(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoardTask()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;one_step_get_ctrl_z_callback(KeyEventType)
</UL>

<P><STRONG><a name="[310]"></a>SubBoard::set_valve3(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, keycallback.o(.text._ZN8SubBoard10set_valve3Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SubBoard::set_valve3(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoardTask()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;one_step_get_ctrl_x_callback(KeyEventType)
</UL>

<P><STRONG><a name="[311]"></a>SubBoard::set_valve4(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, keycallback.o(.text._ZN8SubBoard10set_valve4Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SubBoard::set_valve4(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoardTask()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;one_step_get_ctrl_c_callback(KeyEventType)
</UL>

<P><STRONG><a name="[312]"></a>SubBoard::set_valve5(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, keycallback.o(.text._ZN8SubBoard10set_valve5Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SubBoard::set_valve5(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoardTask()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;one_step_get_ctrl_v_callback(KeyEventType)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_custom(unsigned char*)
</UL>

<P><STRONG><a name="[235]"></a>SubBoard::get_feedback()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, subboard.o(.text._ZN8SubBoard12get_feedbackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SubBoard::get_feedback()
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[236]"></a>SubBoard::start_receive()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, subboard.o(.text._ZN8SubBoard13start_receiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = SubBoard::start_receive() &rArr; SuperUart::receive_dma_idle(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::receive_dma_idle(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[44e]"></a>SubBoard::write()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, subboard.o(.text._ZN8SubBoard5writeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SubBoard::write()
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::transmit()
</UL>

<P><STRONG><a name="[30d]"></a>SubBoard::set_pump(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, keycallback.o(.text._ZN8SubBoard8set_pumpEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SubBoard::set_pump(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoardTask()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;air_right_callback(KeyEventType)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_custom(unsigned char*)
</UL>

<P><STRONG><a name="[313]"></a>SubBoard::transmit()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, subboard.o(.text._ZN8SubBoard8transmitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SubBoard::transmit() &rArr; SuperUart::transmit(unsigned short) &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::transmit(unsigned short)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::write()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoardTask()
</UL>

<P><STRONG><a name="[44c]"></a>SubBoard::SubBoard__sub_object(__UART_HandleTypeDef*)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, vari.o(.text._ZN8SubBoardC2EP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = SubBoard::SubBoard__sub_object(__UART_HandleTypeDef*) &rArr; SuperUart::SuperUart(__UART_HandleTypeDef*, unsigned short, unsigned short) &rArr; Count::Count__sub_object() &rArr; CountManager::register_item(Count*) &rArr; CustomList&lang;Count*&rang;::push_back(Count* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::SuperUart(__UART_HandleTypeDef*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::Interact__sub_object(unsigned char const&, unsigned char const&, __UART_HandleTypeDef*, __UART_HandleTypeDef*, __UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[44d]"></a>SubBoard::~SubBoard__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vari.o(.text._ZN8SubBoardD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = SubBoard::~SubBoard__sub_object() &rArr; SuperUart::~SuperUart() &rArr; Count::~Count__sub_object() &rArr; CountManager::unregister_item(Count*) &rArr; CustomList&lang;Count*&rang;::remove(Count* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperUart::~SuperUart()
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::~Interact__sub_object()
</UL>

<P><STRONG><a name="[42e]"></a>SuperCan::read_header()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, chassis.o(.text._ZN8SuperCan11read_headerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SuperCan::read_header()
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::UpdateMotor()
</UL>

<P><STRONG><a name="[35c]"></a>SuperCan::filter_config(unsigned short, can_dep::filter_mode, unsigned int, unsigned int)</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, supercan.o(.text._ZN8SuperCan13filter_configEtN7can_dep11filter_modeEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SuperCan::filter_config(unsigned short, can_dep::filter_mode, unsigned int, unsigned int) &rArr; HAL_FDCAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigFifoWatermark
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigGlobalFilter
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask()
</UL>

<P><STRONG><a name="[453]"></a>SuperCan::transmit_pdata(unsigned int, unsigned char*)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, supercan.o(.text._ZN8SuperCan14transmit_pdataEjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SuperCan::transmit_pdata(unsigned int, unsigned char*) &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::operator++()
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::read_totalposition()
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::close()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::enable()
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::clear_error()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::totalposition2Control(unsigned short, int)
</UL>

<P><STRONG><a name="[42f]"></a>SuperCan::read()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, chassis.o(.text._ZN8SuperCan4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SuperCan::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::UpdateMotor()
</UL>

<P><STRONG><a name="[35d]"></a>SuperCan::start()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, supercan.o(.text._ZN8SuperCan5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SuperCan::start() &rArr; HAL_FDCAN_ActivateNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ActivateNotification
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask()
</UL>

<P><STRONG><a name="[184]"></a>SuperCan::receive()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cancallback.o(.text._ZN8SuperCan7receiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SuperCan::receive() &rArr; HAL_FDCAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetRxMessage
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::operator++()
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[325]"></a>SuperCan::transmit(unsigned int, short, short, short, short)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, supercan.o(.text._ZN8SuperCan8transmitEjssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SuperCan::transmit(unsigned int, short, short, short, short) &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::operator++()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGetTask()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmTask()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorTask()
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::send_foc()
</UL>

<P><STRONG><a name="[457]"></a>SuperCan::SuperCan(FDCAN_HandleTypeDef*, unsigned int, unsigned int)</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, supercan.o(.text._ZN8SuperCanC2EP19FDCAN_HandleTypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = SuperCan::SuperCan(FDCAN_HandleTypeDef*, unsigned int, unsigned int) &rArr; Count::Count__sub_object() &rArr; CountManager::register_item(Count*) &rArr; CustomList&lang;Count*&rang;::push_back(Count* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::Count__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
</UL>

<P><STRONG><a name="[501]"></a>SuperCan::SuperCan__sub_object(FDCAN_HandleTypeDef*, unsigned int, unsigned int)</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, supercan.o(.text._ZN8SuperCanC2EP19FDCAN_HandleTypeDefjj), UNUSED)

<P><STRONG><a name="[d9]"></a>SuperCan::~SuperCan__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, vari.o(.text._ZN8SuperCanD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = SuperCan::~SuperCan__sub_object() &rArr; Count::~Count__sub_object() &rArr; CountManager::unregister_item(Count*) &rArr; CustomList&lang;Count*&rang;::remove(Count* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::~Count__sub_object()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> vari.o(.text.__cxx_global_var_init.5)
<LI> vari.o(.text.__cxx_global_var_init.6)
<LI> vari.o(.text.__cxx_global_var_init.7)
</UL>
<P><STRONG><a name="[358]"></a>SuperDWT::get_tick()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, starttask.o(.text._ZN8SuperDWT8get_tickEv))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask()
</UL>

<P><STRONG><a name="[413]"></a>SuperIIC::mem_block_read_bytes(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short, unsigned int)</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, roboarm_dep.o(.text._ZN8SuperIIC20mem_block_read_bytesEtttPhtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SuperIIC::mem_block_read_bytes(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short, unsigned int) &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fram::block_read(unsigned short, unsigned char*, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[414]"></a>SuperIIC::mem_block_write_bytes(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short, unsigned int)</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, roboarm_dep.o(.text._ZN8SuperIIC21mem_block_write_bytesEtttPhtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SuperIIC::mem_block_write_bytes(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short, unsigned int) &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fram::block_write(unsigned short, unsigned char*, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[415]"></a>SuperIIC::SuperIIC__sub_object(__I2C_HandleTypeDef*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vari.o(.text._ZN8SuperIICC2EP19__I2C_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SuperIIC::SuperIIC__sub_object(__I2C_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fram::Fram__sub_object(__I2C_HandleTypeDef*)
</UL>

<P><STRONG><a name="[422]"></a>SuperSPI::transmit_dma(unsigned char const*, unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, superspi.o(.text._ZN8SuperSPI12transmit_dmaEPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SuperSPI::transmit_dma(unsigned char const*, unsigned short) &rArr; HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLED::load()
</UL>

<P><STRONG><a name="[426]"></a>SuperSPI::SuperSPI__sub_object(__SPI_HandleTypeDef*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vari.o(.text._ZN8SuperSPIC2EP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SuperSPI::SuperSPI__sub_object(__SPI_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLED::RGBLED__sub_object(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[458]"></a>LKControl&lang;LKMotor&rang;::clear_error()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, roboarm.o(.text._ZN9LKControlI7LKMotorE11clear_errorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LKControl&lang;LKMotor&rang;::clear_error() &rArr; SuperCan::transmit_pdata(unsigned int, unsigned char*) &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::transmit_pdata(unsigned int, unsigned char*)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::operator++()
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto RoboArm::enable()::$_1::operator()&lang;Motor&lang;LKMotorSingle&rang;&rang;(Motor&lang;LKMotorSingle&rang;&) const
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto RoboArm::enable()::$_0::operator()&lang;Motor&lang;LKMotorSingle&rang;&rang;(Motor&lang;LKMotorSingle&rang;&) const
</UL>

<P><STRONG><a name="[33c]"></a>LKControl&lang;LKMotor&rang;::set_position(float, float)</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, armtask.o(.text._ZN9LKControlI7LKMotorE12set_positionEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LKControl&lang;LKMotor&rang;::set_position(float, float) &rArr; LKControl&lang;LKMotor&rang;::totalposition2Control(unsigned short, int) &rArr; SuperCan::transmit_pdata(unsigned int, unsigned char*) &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float my_abs&lang;float&rang;(float)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float limited&lang;float&rang;(float&&, float, float)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::operator++()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::totalposition2Control(unsigned short, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmTask()
</UL>

<P><STRONG><a name="[33d]"></a>LKControl&lang;LKMotor&rang;::set_position_near(float, float)</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, armtask.o(.text._ZN9LKControlI7LKMotorE17set_position_nearEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LKControl&lang;LKMotor&rang;::set_position_near(float, float) &rArr; LKControl&lang;LKMotor&rang;::totalposition2Control(unsigned short, int) &rArr; SuperCan::transmit_pdata(unsigned int, unsigned char*) &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float my_abs&lang;float&rang;(float)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float limited&lang;float&rang;(float&&, float, float)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::operator++()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::totalposition2Control(unsigned short, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmTask()
</UL>

<P><STRONG><a name="[33e]"></a>LKControl&lang;LKMotor&rang;::read_totalposition()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, roboarm.o(.text._ZN9LKControlI7LKMotorE18read_totalpositionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LKControl&lang;LKMotor&rang;::read_totalposition() &rArr; SuperCan::transmit_pdata(unsigned int, unsigned char*) &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::transmit_pdata(unsigned int, unsigned char*)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::operator++()
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmTask()
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::init_offset(std::__2::array&lang;float, 6u&rang;&)
</UL>

<P><STRONG><a name="[459]"></a>LKControl&lang;LKMotor&rang;::totalposition2Control(unsigned short, int)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, armtask.o(.text._ZN9LKControlI7LKMotorE21totalposition2ControlEti))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LKControl&lang;LKMotor&rang;::totalposition2Control(unsigned short, int) &rArr; SuperCan::transmit_pdata(unsigned int, unsigned char*) &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::transmit_pdata(unsigned int, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::set_position_near(float, float)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::set_position(float, float)
</UL>

<P><STRONG><a name="[438]"></a>LKControl&lang;LKMotor&rang;::close()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, roboarm.o(.text._ZN9LKControlI7LKMotorE5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LKControl&lang;LKMotor&rang;::close() &rArr; SuperCan::transmit_pdata(unsigned int, unsigned char*) &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::transmit_pdata(unsigned int, unsigned char*)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::operator++()
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::close()
</UL>

<P><STRONG><a name="[45a]"></a>LKControl&lang;LKMotor&rang;::enable()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, roboarm.o(.text._ZN9LKControlI7LKMotorE6enableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LKControl&lang;LKMotor&rang;::enable() &rArr; SuperCan::transmit_pdata(unsigned int, unsigned char*) &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::transmit_pdata(unsigned int, unsigned char*)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::operator++()
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto RoboArm::enable()::$_2::operator()&lang;Motor&lang;LKMotorSingle&rang;&rang;(Motor&lang;LKMotorSingle&rang;&) const
</UL>

<P><STRONG><a name="[3e4]"></a>LKControl&lang;LKMotor&rang;::LKControl__sub_object&lang;unsigned int&, float const&&rang;(SuperCan*, unsigned short, unsigned int&, float const&)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, vari.o(.text._ZN9LKControlI7LKMotorEC2IJRjRKfEEEP8SuperCantDpOT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = LKControl&lang;LKMotor&rang;::LKControl__sub_object&lang;unsigned int&, float const&&rang;(SuperCan*, unsigned short, unsigned int&, float const&) &rArr; LKMotor::LKMotor__sub_object(unsigned short, unsigned int, float) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::Count__sub_object()
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotor::LKMotor__sub_object(unsigned short, unsigned int, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorSingle::LKMotorSingle__sub_object&lang;SuperCan*&, unsigned int&, unsigned int&, float const&&rang;(SuperCan*&, unsigned int&, unsigned int&, float const&)
</UL>

<P><STRONG><a name="[3e6]"></a>LKControl&lang;LKMotor&rang;::~LKControl__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, vari.o(.text._ZN9LKControlI7LKMotorED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = LKControl&lang;LKMotor&rang;::~LKControl__sub_object() &rArr; LKMotor::~LKMotor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::~Count__sub_object()
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotor::~LKMotor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotorSingle::~LKMotorSingle__sub_object()
</UL>

<P><STRONG><a name="[3ce]"></a>M2006Diff::total_cnt()</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, cancallback.o(.text._ZN9M2006Diff9total_cntEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = M2006Diff::total_cnt()
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006DiffPos::get_feedback(unsigned short, unsigned char*)
</UL>

<P><STRONG><a name="[3ec]"></a>M2006Diff::M2006Diff__sub_object(unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vari.o(.text._ZN9M2006DiffC2Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = M2006Diff::M2006Diff__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 720u, 1u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 720u, 1u&rang;::default_motor__sub_object(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosPidControl&lang;M2006Diff&rang;::PosPidControl__sub_object&lang;unsigned int&&rang;(Pid const&, Pid const&, unsigned int&)
</UL>

<P><STRONG><a name="[3ed]"></a>M2006Diff::~M2006Diff__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vari.o(.text._ZN9M2006DiffD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = M2006Diff::~M2006Diff__sub_object() &rArr; default_motor&lang;8192u, 720u, 1u&rang;::~default_motor__sub_object() &rArr; Detect::~Detect() &rArr; DetectManager&lang;Detect&rang;::Unregister(Detect*) &rArr; CustomList&lang;Detect*&rang;::remove(Detect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_motor&lang;8192u, 720u, 1u&rang;::~default_motor__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosPidControl&lang;M2006Diff&rang;::~PosPidControl__sub_object()
</UL>

<P><STRONG><a name="[35a]"></a>SuperGPIO::WriteUp()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, starttask.o(.text._ZN9SuperGPIO7WriteUpEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SuperGPIO::WriteUp() &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask()
</UL>

<P><STRONG><a name="[359]"></a>SuperGPIO::WriteDown()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, starttask.o(.text._ZN9SuperGPIO9WriteDownEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SuperGPIO::WriteDown() &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask()
</UL>

<P><STRONG><a name="[460]"></a>SuperGPIO::SuperGPIO__sub_object(GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, vari.o(.text._ZN9SuperGPIOC2EP12GPIO_TypeDeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SuperGPIO::SuperGPIO__sub_object(GPIO_TypeDef*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.16
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.15
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.14
</UL>

<P><STRONG><a name="[350]"></a>SuperIWDG::GotInstance()</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, errortask.o(.text._ZN9SuperIWDG11GotInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SuperIWDG::GotInstance() &rArr; __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperIWDG::SuperIWDG__sub_object(IWDG_HandleTypeDef*)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugTask()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorTask()
</UL>

<P><STRONG><a name="[45b]"></a>SuperIWDG::SuperIWDG__sub_object(IWDG_HandleTypeDef*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, errortask.o(.text._ZN9SuperIWDGC2EP18IWDG_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SuperIWDG::SuperIWDG__sub_object(IWDG_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperIWDG::GotInstance()
</UL>

<P><STRONG><a name="[234]"></a>SuperUart::receive_dma_idle(unsigned short)</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, superuart.o(.text._ZN9SuperUart16receive_dma_idleEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SuperUart::receive_dma_idle(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl::start()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::start_receive()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::start_receive()
</UL>

<P><STRONG><a name="[382]"></a>SuperUart::transmit_dma_pdata(unsigned char*, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, superuart.o(.text._ZN9SuperUart18transmit_dma_pdataEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SuperUart::transmit_dma_pdata(unsigned char*, unsigned short) &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::operator++()
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::transmit()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::update()
</UL>

<P><STRONG><a name="[44f]"></a>SuperUart::transmit(unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, superuart.o(.text._ZN9SuperUart8transmitEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SuperUart::transmit(unsigned short) &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::operator++()
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::transmit()
</UL>

<P><STRONG><a name="[387]"></a>SuperUart::SuperUart(__UART_HandleTypeDef*, unsigned short, unsigned short)</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, superuart.o(.text._ZN9SuperUartC2EP20__UART_HandleTypeDeftt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = SuperUart::SuperUart(__UART_HandleTypeDef*, unsigned short, unsigned short) &rArr; Count::Count__sub_object() &rArr; CountManager::register_item(Count*) &rArr; CustomList&lang;Count*&rang;::push_back(Count* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHeap::malloc(unsigned int)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::Count__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::UI__sub_object(unsigned short, unsigned short, __UART_HandleTypeDef*)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::SubBoard__sub_object(__UART_HandleTypeDef*)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::ImageTrans__sub_object(__UART_HandleTypeDef*)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl::RemoteControl__sub_object(__UART_HandleTypeDef*, unsigned short, unsigned int)
</UL>

<P><STRONG><a name="[502]"></a>SuperUart::SuperUart__sub_object(__UART_HandleTypeDef*, unsigned short, unsigned short)</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, superuart.o(.text._ZN9SuperUartC2EP20__UART_HandleTypeDeftt), UNUSED)

<P><STRONG><a name="[38c]"></a>SuperUart::~SuperUart()</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, superuart.o(.text._ZN9SuperUartD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = SuperUart::~SuperUart() &rArr; Count::~Count__sub_object() &rArr; CountManager::unregister_item(Count*) &rArr; CustomList&lang;Count*&rang;::remove(Count* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count::~Count__sub_object()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHeap::free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::~UI__sub_object()
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl::~RemoteControl__sub_object()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::~ImageTrans__sub_object()
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoard::~SubBoard__sub_object()
</UL>

<P><STRONG><a name="[503]"></a>SuperUart::~SuperUart__sub_object()</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, superuart.o(.text._ZN9SuperUartD2Ev), UNUSED)

<P><STRONG><a name="[45c]"></a>TimDetect::getSysTime()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, detect.o(.text._ZN9TimDetect10getSysTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimDetect::getSysTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetect::update()
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetect::JudgeLost()
</UL>

<P><STRONG><a name="[3ee]"></a>TimDetect::update()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, detect.o(.text._ZN9TimDetect6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimDetect::update() &rArr; TimDetect::getSysTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetect::getSysTime()
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl::update(KeyBoard&)
</UL>

<P><STRONG><a name="[3df]"></a>TimDetect::JudgeLost()</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, detect.o(.text._ZN9TimDetect9JudgeLostEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TimDetect::JudgeLost() &rArr; TimDetect::getSysTime()
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetect::getSysTime()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;TimDetect&rang;::JudgeLost()
</UL>

<P><STRONG><a name="[3f0]"></a>TimDetect::TimDetect(unsigned int, void (*)(), void (*)())</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, detect.o(.text._ZN9TimDetectC2EjPFvvES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TimDetect::TimDetect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;TimDetect&rang;::Register(TimDetect*) &rArr; CustomList&lang;TimDetect*&rang;::push_back(TimDetect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;TimDetect&rang;::Register(TimDetect*)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetectManagerInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl::RemoteControl__sub_object(__UART_HandleTypeDef*, unsigned short, unsigned int)
</UL>

<P><STRONG><a name="[504]"></a>TimDetect::TimDetect__sub_object(unsigned int, void (*)(), void (*)())</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, detect.o(.text._ZN9TimDetectC2EjPFvvES1_), UNUSED)

<P><STRONG><a name="[3f2]"></a>TimDetect::~TimDetect()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, detect.o(.text._ZN9TimDetectD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = TimDetect::~TimDetect() &rArr; DetectManager&lang;TimDetect&rang;::Unregister(TimDetect*) &rArr; CustomList&lang;TimDetect*&rang;::remove(TimDetect* const&) &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;TimDetect&rang;::Unregister(TimDetect*)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetectManagerInstance()
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl::~RemoteControl__sub_object()
</UL>

<P><STRONG><a name="[505]"></a>TimDetect::~TimDetect__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, detect.o(.text._ZN9TimDetectD2Ev), UNUSED)

<P><STRONG><a name="[31a]"></a>CustomList&lang;Key::key_callback&rang;::empty() const</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, key.o(.text._ZNK10CustomListIN3Key12key_callbackEE5emptyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CustomList&lang;Key::key_callback&rang;::empty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardUpdate(Key*, KeyBoard&)
</UL>

<P><STRONG><a name="[31d]"></a>CustomList&lang;Key::key_callback&rang;::Iterator::operator!=(CustomList&lang;Key::key_callback&rang;::Iterator const&) const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, key.o(.text._ZNK10CustomListIN3Key12key_callbackEE8IteratorneERKS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CustomList&lang;Key::key_callback&rang;::Iterator::operator!=(CustomList&lang;Key::key_callback&rang;::Iterator const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyBoardUpdate(Key*, KeyBoard&)
</UL>

<P><STRONG><a name="[3c8]"></a>CustomList&lang;Count*&rang;::Iterator::operator!=(CustomList&lang;Count*&rang;::Iterator const&) const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, debugtask.o(.text._ZNK10CustomListIP5CountE8IteratorneERKS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CustomList&lang;Count*&rang;::Iterator::operator!=(CustomList&lang;Count*&rang;::Iterator const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManager::mark()
</UL>

<P><STRONG><a name="[3d6]"></a>CustomList&lang;Detect*&rang;::Iterator::operator!=(CustomList&lang;Detect*&rang;::Iterator const&) const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, debugtask.o(.text._ZNK10CustomListIP6DetectE8IteratorneERKS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CustomList&lang;Detect*&rang;::Iterator::operator!=(CustomList&lang;Detect*&rang;::Iterator const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;Detect&rang;::JudgeLost()
</UL>

<P><STRONG><a name="[3dd]"></a>CustomList&lang;TimDetect*&rang;::Iterator::operator!=(CustomList&lang;TimDetect*&rang;::Iterator const&) const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timcallback.o(.text._ZNK10CustomListIP9TimDetectE8IteratorneERKS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CustomList&lang;TimDetect*&rang;::Iterator::operator!=(CustomList&lang;TimDetect*&rang;::Iterator const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManager&lang;TimDetect&rang;::JudgeLost()
</UL>

<P><STRONG><a name="[447]"></a>ImageTrans::read_map_back() const</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, interact.o(.text._ZNK10ImageTrans13read_map_backEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ImageTrans::read_map_back() const
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_custom(unsigned char*)
</UL>

<P><STRONG><a name="[431]"></a>SpeedPidControl&lang;M3508&rang;::output() const</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, chassis.o(.text._ZNK15SpeedPidControlI5M3508E6outputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SpeedPidControl&lang;M3508&rang;::output() const
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::send_foc()
</UL>

<P><STRONG><a name="[3ff]"></a>ui_dep::int_data::set_features(ui_dep::basic_graphic*) const</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, judgetask.o(.text._ZNK6ui_dep8int_data12set_featuresEPNS_13basic_graphicE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ui_dep::int_data::set_features(ui_dep::basic_graphic*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void UI::operate_fig&lang;ui_dep::int_data&rang;(ui_dep::ui_control&, ui_dep::layer, ui_dep::color, unsigned short, unsigned short, unsigned short, ui_dep::int_data const&)
</UL>

<P><STRONG><a name="[3b3]"></a>std::__2::array&lang;slope_cfg, 4u&rang;::operator[][abi:v180000](unsigned int) const</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, vari.o(.text._ZNKSt3__25arrayI9slope_cfgLj4EEixB7v180000Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::array&lang;slope_cfg, 4u&rang;::operator[][abi:v180000](unsigned int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_dep::move::move__sub_object(std::__2::array&lang;slope_cfg, 4u&rang; const&)
</UL>

<P><STRONG><a name="[3b0]"></a>std::__2::array&lang;chassis_dep::ChassisMotorCfg, 2u&rang;::operator[][abi:v180000](unsigned int) const</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, vari.o(.text._ZNKSt3__25arrayIN11chassis_dep15ChassisMotorCfgELj2EEixB7v180000Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::array&lang;chassis_dep::ChassisMotorCfg, 2u&rang;::operator[][abi:v180000](unsigned int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_dep::extend_motor::extend_motor__sub_object(std::__2::array&lang;chassis_dep::ChassisMotorCfg, 2u&rang; const&)
</UL>

<P><STRONG><a name="[3ab]"></a>std::__2::array&lang;chassis_dep::ChassisMotorCfg, 4u&rang;::operator[][abi:v180000](unsigned int) const</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, vari.o(.text._ZNKSt3__25arrayIN11chassis_dep15ChassisMotorCfgELj4EEixB7v180000Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::array&lang;chassis_dep::ChassisMotorCfg, 4u&rang;::operator[][abi:v180000](unsigned int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_dep::base_motor::base_motor__sub_object(std::__2::array&lang;chassis_dep::ChassisMotorCfg, 4u&rang; const&)
</UL>

<P><STRONG><a name="[43c]"></a>std::__2::array&lang;float, 3u&rang;::operator[][abi:v180000](unsigned int) const</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, roboarm.o(.text._ZNKSt3__25arrayIfLj3EEixB7v180000Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::array&lang;float, 3u&rang;::operator[][abi:v180000](unsigned int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::ikine(std::__2::array&lang;float, 3u&rang; const&)
</UL>

<P><STRONG><a name="[383]"></a>std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int) const</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, imagetrans.o(.text._ZNKSt3__25arrayIfLj6EEixB7v180000Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int) const
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::transmit_relative_pos(std::__2::array&lang;float, 6u&rang; const&)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::load_target(std::__2::array&lang;float, 6u&rang; const&)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::get_angle(std::__2::array&lang;float, 6u&rang; const&)
</UL>

<P><STRONG><a name="[3a5]"></a>std::__2::array&lang;unsigned short, 24u&rang;::end[abi:v180000]() const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, arminittask.o(.text._ZNKSt3__25arrayItLj24EE3endB7v180000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = std::__2::array&lang;unsigned short, 24u&rang;::end[abi:v180000]() const &rArr; std::__2::array&lang;unsigned short, 24u&rang;::data[abi:v180000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;unsigned short, 24u&rang;::data[abi:v180000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void RoundBuffer&lang;unsigned short, 50u&rang;::push&lang;24u&rang;(std::__2::array&lang;unsigned short, 24u&rang; const&)
</UL>

<P><STRONG><a name="[45d]"></a>std::__2::array&lang;unsigned short, 24u&rang;::data[abi:v180000]() const</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, arminittask.o(.text._ZNKSt3__25arrayItLj24EE4dataB7v180000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::array&lang;unsigned short, 24u&rang;::data[abi:v180000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;unsigned short, 24u&rang;::end[abi:v180000]() const
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;unsigned short, 24u&rang;::begin[abi:v180000]() const
</UL>

<P><STRONG><a name="[3a4]"></a>std::__2::array&lang;unsigned short, 24u&rang;::begin[abi:v180000]() const</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, arminittask.o(.text._ZNKSt3__25arrayItLj24EE5beginB7v180000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = std::__2::array&lang;unsigned short, 24u&rang;::begin[abi:v180000]() const &rArr; std::__2::array&lang;unsigned short, 24u&rang;::data[abi:v180000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;unsigned short, 24u&rang;::data[abi:v180000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void RoundBuffer&lang;unsigned short, 50u&rang;::push&lang;24u&rang;(std::__2::array&lang;unsigned short, 24u&rang; const&)
</UL>

<P><STRONG><a name="[3a9]"></a>std::__2::array&lang;unsigned short, 8u&rang;::end[abi:v180000]() const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, interact.o(.text._ZNKSt3__25arrayItLj8EE3endB7v180000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = std::__2::array&lang;unsigned short, 8u&rang;::end[abi:v180000]() const &rArr; std::__2::array&lang;unsigned short, 8u&rang;::data[abi:v180000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;unsigned short, 8u&rang;::data[abi:v180000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Buzzer::StartMusic&lang;(unsigned short)8, (Buzzer::delay_pl)1&rang;(std::__2::array&lang;unsigned short, (unsigned short)8&rang; const&)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void RoundBuffer&lang;unsigned short, 50u&rang;::push&lang;8u&rang;(std::__2::array&lang;unsigned short, 8u&rang; const&)
</UL>

<P><STRONG><a name="[45e]"></a>std::__2::array&lang;unsigned short, 8u&rang;::data[abi:v180000]() const</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, interact.o(.text._ZNKSt3__25arrayItLj8EE4dataB7v180000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = std::__2::array&lang;unsigned short, 8u&rang;::data[abi:v180000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;unsigned short, 8u&rang;::end[abi:v180000]() const
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;unsigned short, 8u&rang;::begin[abi:v180000]() const
</UL>

<P><STRONG><a name="[3a8]"></a>std::__2::array&lang;unsigned short, 8u&rang;::begin[abi:v180000]() const</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, interact.o(.text._ZNKSt3__25arrayItLj8EE5beginB7v180000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = std::__2::array&lang;unsigned short, 8u&rang;::begin[abi:v180000]() const &rArr; std::__2::array&lang;unsigned short, 8u&rang;::data[abi:v180000]() const
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::array&lang;unsigned short, 8u&rang;::data[abi:v180000]() const
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Buzzer::StartMusic&lang;(unsigned short)8, (Buzzer::delay_pl)1&rang;(std::__2::array&lang;unsigned short, (unsigned short)8&rang; const&)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void RoundBuffer&lang;unsigned short, 50u&rang;::push&lang;8u&rang;(std::__2::array&lang;unsigned short, 8u&rang; const&)
</UL>

<P><STRONG><a name="[43a]"></a>std::__2::array&lang;float, 3u&rang;::operator[][abi:v180000](unsigned int)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, roboarm.o(.text._ZNSt3__25arrayIfLj3EEixB7v180000Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::array&lang;float, 3u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_xyz(RoboArm&)
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::fkine(std::__2::array&lang;float, 3u&rang;&)
</UL>

<P><STRONG><a name="[3be]"></a>std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, roboarm.o(.text._ZNSt3__25arrayIfLj6EEixB7v180000Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::array&lang;float, 6u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::Differentiator::init(std::__2::array&lang;float, 6u&rang;&)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_actions(bool)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::update_roboArm(RoboArm&)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_reset()
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_xyz(RoboArm&)
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_rc()
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::ikine(std::__2::array&lang;float, 3u&rang; const&)
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::fkine(std::__2::array&lang;float, 3u&rang;&)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::update_relative_pos()
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::init_offset(std::__2::array&lang;float, 6u&rang;&)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_custom(unsigned char*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_cdc(unsigned char*)
</UL>

<P><STRONG><a name="[384]"></a>std::__2::array&lang;short, 6u&rang;::operator[][abi:v180000](unsigned int)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, imagetrans.o(.text._ZNSt3__25arrayIsLj6EEixB7v180000Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::array&lang;short, 6u&rang;::operator[][abi:v180000](unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::receive_custom(unsigned char*)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTrans::get_angle(std::__2::array&lang;float, 6u&rang; const&)
</UL>

<P><STRONG><a name="[390]"></a>double std::__2::__math::fabs[abi:v180000]&lang;short, 0&rang;(short)</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, onestepget.o(.text._ZNSt3__26__math4fabsB7v180000IsLi0EEEdT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = double std::__2::__math::fabs[abi:v180000]&lang;short, 0&rang;(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M3508Pos::is_block(short)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2006Speed::is_block(short)
</UL>

<P><STRONG><a name="[45f]"></a>operator delete(void*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, redifine.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHeap::free(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>

<P><STRONG><a name="[36a]"></a>operator delete(void*, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; CustomHeap::free(void*) &rArr; osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Count*&rang;::~CustomList__sub_object()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;TimDetect*&rang;::remove(TimDetect* const&)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Detect*&rang;::remove(Detect* const&)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;TimDetect*&rang;::~CustomList__sub_object()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Detect*&rang;::~CustomList__sub_object()
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Count*&rang;::remove(Count* const&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Key::key_callback&rang;::~CustomList__sub_object()
</UL>

<P><STRONG><a name="[367]"></a>operator new(unsigned int)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, redifine.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHeap::malloc(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Key::key_callback&rang;::push_back(Key::key_callback const&)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;TimDetect*&rang;::push_back(TimDetect* const&)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Detect*&rang;::push_back(Detect* const&)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomList&lang;Count*&rang;::push_back(Count* const&)
</UL>

<P><STRONG><a name="[462]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[25d]"></a>arm_atan2_f32</STRONG> (Thumb, 548 bytes, Stack size 0 bytes, fastmathfunctions.o(.text.arm_atan2_f32))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mahony_computeAngles
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update
</UL>

<P><STRONG><a name="[263]"></a>arm_cos_f32</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, fastmathfunctions.o(.text.arm_cos_f32))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slove_q2(float, float, float, float, float)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::ikine(std::__2::array&lang;float, 3u&rang; const&)
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::fkine(std::__2::array&lang;float, 3u&rang;&)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
</UL>

<P><STRONG><a name="[261]"></a>arm_mat_add_f32</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, matrixfunctions.o(.text.arm_mat_add_f32))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatUpdate
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_PminusUpdate
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatMinusUpdate
</UL>

<P><STRONG><a name="[25a]"></a>arm_mat_init_f32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, matrixfunctions.o(.text.arm_mat_init_f32))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init
</UL>

<P><STRONG><a name="[262]"></a>arm_mat_inverse_f32</STRONG> (Thumb, 872 bytes, Stack size 112 bytes, matrixfunctions.o(.text.arm_mat_inverse_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK
</UL>

<P><STRONG><a name="[260]"></a>arm_mat_mult_f32</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, matrixfunctions.o(.text.arm_mat_mult_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_P_Update
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatUpdate
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_PminusUpdate
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatMinusUpdate
</UL>

<P><STRONG><a name="[264]"></a>arm_mat_sub_f32</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, matrixfunctions.o(.text.arm_mat_sub_f32))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_P_Update
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_xhatUpdate
</UL>

<P><STRONG><a name="[25f]"></a>arm_mat_trans_f32</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, matrixfunctions.o(.text.arm_mat_trans_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arm_mat_trans_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_PminusUpdate
</UL>

<P><STRONG><a name="[34b]"></a>arm_sin_f32</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, fastmathfunctions.o(.text.arm_sin_f32))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slove_q2(float, float, float, float, float)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::ikine(std::__2::array&lang;float, 3u&rang; const&)
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::fkine(std::__2::array&lang;float, 3u&rang;&)
</UL>

<P><STRONG><a name="[133]"></a>bmi088_accel_init</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, bmi088driver.o(.text.bmi088_accel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bmi088_accel_init &rArr; BMI088_write_single_reg &rArr; BMI088_read_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_delay_ms
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_delay_us
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_ACCEL_NS_H
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_read_write_byte
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_ACCEL_NS_L
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_write_single_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_init
</UL>

<P><STRONG><a name="[134]"></a>bmi088_gyro_init</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, bmi088driver.o(.text.bmi088_gyro_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bmi088_gyro_init &rArr; BMI088_read_single_reg &rArr; BMI088_read_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_GYRO_NS_H
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_GYRO_NS_L
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_delay_ms
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_delay_us
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_read_single_reg
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_write_single_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_init
</UL>

<P><STRONG><a name="[102]"></a>main</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG1_Init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN3_Init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OCTOSPI2_Init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART10_UART_Init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI6_Init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_BDMA_Init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[300]"></a>osDelay</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cmsis_os.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLED::delay(unsigned int)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGetTask()
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerTask()
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBoardTask()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KbTask()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeTask()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCTask()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUTask()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisTask()
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTask()
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::init_offset(std::__2::array&lang;float, 6u&rang;&)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto RoboArm::enable()::$_2::operator()&lang;Motor&lang;LKMotorSingle&rang;&rang;(Motor&lang;LKMotorSingle&rang;&) const
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto RoboArm::enable()::$_1::operator()&lang;Motor&lang;LKMotorSingle&rang;&rang;(Motor&lang;LKMotorSingle&rang;&) const
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto RoboArm::enable()::$_0::operator()&lang;Motor&lang;LKMotorSingle&rang;&rang;(Motor&lang;LKMotorSingle&rang;&) const
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void Buzzer::delay&lang;(Buzzer::delay_pl)0&rang;(unsigned int)
</UL>

<P><STRONG><a name="[318]"></a>osDelayUntil</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, cmsis_os.o(.text.osDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = osDelayUntil &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmTask()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTransTask()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlTask()
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugTask()
</UL>

<P><STRONG><a name="[463]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[326]"></a>osKernelSysTick</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cmsis_os.o(.text.osKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmTask()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlTask()
</UL>

<P><STRONG><a name="[275]"></a>osMutexCreate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cmsis_os.o(.text.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = osMutexCreate &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[362]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHeadPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHeap::malloc(unsigned int)
</UL>

<P><STRONG><a name="[360]"></a>osRtxMemoryFree</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxMemoryFree &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHeadPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHeap::free(void*)
</UL>

<P><STRONG><a name="[364]"></a>osRtxMemoryInit</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxMemoryInit &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHeadPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHeap::CustomHeap__sub_object(unsigned long long*, unsigned int)
</UL>

<P><STRONG><a name="[276]"></a>osThreadCreate</STRONG> (Thumb, 172 bytes, Stack size 80 bytes, cmsis_os.o(.text.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[230]"></a>osThreadResume</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cmsis_os.o(.text.osThreadResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osThreadResume &rArr; xTaskResumeFromISR &rArr; prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[352]"></a>osThreadSuspend</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmsis_os.o(.text.osThreadSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = osThreadSuspend &rArr; vTaskSuspend &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorTask()
</UL>

<P><STRONG><a name="[49c]"></a>pvPortMalloc</STRONG> (Thumb, 492 bytes, Stack size 48 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_malloc
</UL>

<P><STRONG><a name="[4b6]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tasks.o(.text.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[48a]"></a>pxPortInitialiseStack</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[2b0]"></a>start_c</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cppport.o(.text.start_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = start_c &rArr; start() &rArr; RemoteControl::start() &rArr; SuperUart::receive_dma_idle(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start()
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[32e]"></a>__cxa_guard_acquire</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperIWDG::GotInstance()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManagerInstance()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetectManagerInstance()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManagerInstance()
</UL>

<P><STRONG><a name="[330]"></a>__cxa_guard_release</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_release))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperIWDG::GotInstance()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectManagerInstance()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimDetectManagerInstance()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountManagerInstance()
</UL>

<P><STRONG><a name="[265]"></a>user_malloc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, kalman_filter.o(.text.user_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = user_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init
</UL>

<P><STRONG><a name="[474]"></a>uxListRemove</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, list.o(.text.uxListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[30c]"></a>uxTaskGetStackHighWaterMark</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, tasks.o(.text.uxTaskGetStackHighWaterMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uxTaskGetStackHighWaterMark &rArr; prvTaskCheckFreeStackSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmTask()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUTask()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCtrlTask()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChassisTask()
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugTask()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorTask()
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTask()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask()
</UL>

<P><STRONG><a name="[4ad]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, tasks.o(.text.uxTaskResetEventItemValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uxTaskResetEventItemValue
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[4a7]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, freertos.o(.text.vApplicationGetIdleTaskMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vApplicationGetIdleTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[4b9]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, freertos.o(.text.vApplicationGetTimerTaskMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vApplicationGetTimerTaskMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[de]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, event_groups.o(.text.vEventGroupSetBitsCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = vEventGroupSetBitsCallback &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_groups.o(.text.xEventGroupSetBitsFromISR)
</UL>
<P><STRONG><a name="[47c]"></a>vListInitialise</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, list.o(.text.vListInitialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[489]"></a>vListInitialiseItem</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[476]"></a>vListInsert</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[475]"></a>vListInsertEnd</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[478]"></a>vPortEnterCritical</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[47a]"></a>vPortExitCritical</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[484]"></a>vPortFree</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[4ae]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[4b5]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, port.o(.text.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[47e]"></a>vQueueAddToRegistry</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, queue.o(.text.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[496]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[464]"></a>vTaskDelay</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[465]"></a>vTaskDelayUntil</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, tasks.o(.text.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayUntil
</UL>

<P><STRONG><a name="[308]"></a>vTaskDelete</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, tasks.o(.text.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmInitTask()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask()
</UL>

<P><STRONG><a name="[4b2]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[49b]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[4a2]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[4a0]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[4a3]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, tasks.o(.text.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[4a4]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, tasks.o(.text.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[4a5]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, tasks.o(.text.vTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskRemoveFromUnorderedEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[471]"></a>vTaskResume</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, tasks.o(.text.vTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskResume &rArr; prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
</UL>

<P><STRONG><a name="[466]"></a>vTaskStartScheduler</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[472]"></a>vTaskSuspend</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, tasks.o(.text.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskSuspend &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
</UL>

<P><STRONG><a name="[494]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[2aa]"></a>vTaskSwitchContext</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[274]"></a>xEventGroupCreate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, event_groups.o(.text.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[306]"></a>xEventGroupSetBits</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, event_groups.o(.text.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUTask()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmInitTask()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask()
</UL>

<P><STRONG><a name="[187]"></a>xEventGroupSetBitsFromISR</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, event_groups.o(.text.xEventGroupSetBitsFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[299]"></a>xEventGroupWaitBits</STRONG> (Thumb, 442 bytes, Stack size 72 bytes, event_groups.o(.text.xEventGroupWaitBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xEventGroupWaitBits &rArr; vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_OneStepGetTask
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ArmTask
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_BuzzerTask
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SubBoardTask
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_KbTask
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_JudgeTask
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ImageTransTask
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PCTask
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RemoteCtrlTask
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ChassisTask
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DebugTask
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LedTask
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmInitTask()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ArmInitTask
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask()
</UL>

<P><STRONG><a name="[4a9]"></a>xPortStartScheduler</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnableVFP
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[46a]"></a>xQueueCreateMutex</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, queue.o(.text.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>

<P><STRONG><a name="[469]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, queue.o(.text.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>

<P><STRONG><a name="[4b1]"></a>xQueueGenericCreate</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[47d]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, queue.o(.text.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>

<P><STRONG><a name="[487]"></a>xQueueGenericReset</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[33a]"></a>xQueueGenericSend</STRONG> (Thumb, 556 bytes, Stack size 80 bytes, queue.o(.text.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmTask()
</UL>

<P><STRONG><a name="[4b4]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 332 bytes, Stack size 80 bytes, queue.o(.text.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>

<P><STRONG><a name="[491]"></a>xQueueReceive</STRONG> (Thumb, 476 bytes, Stack size 64 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[338]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 556 bytes, Stack size 72 bytes, queue.o(.text.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArmTask()
</UL>

<P><STRONG><a name="[4b3]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[46f]"></a>xTaskCreate</STRONG> (Thumb, 158 bytes, Stack size 64 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[46e]"></a>xTaskCreateStatic</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, tasks.o(.text.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[4ab]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[315]"></a>xTaskGetTickCount</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageTransTask()
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugTask()
</UL>

<P><STRONG><a name="[468]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tasks.o(.text.xTaskGetTickCountFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[2ae]"></a>xTaskIncrementTick</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[483]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[4b7]"></a>xTaskPriorityInherit</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(.text.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xTaskPriorityInherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[49a]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[495]"></a>xTaskResumeAll</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[470]"></a>xTaskResumeFromISR</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, tasks.o(.text.xTaskResumeFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeFromISR &rArr; prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
</UL>

<P><STRONG><a name="[4a8]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[48f]"></a>xTimerGenericCommand</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, timers.o(.text.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[4aa]"></a>xTimerPendFunctionCallFromISR</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, timers.o(.text.xTimerPendFunctionCallFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBitsFromISR
</UL>

<P><STRONG><a name="[4bd]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[3b6]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::arm_acos_f32(float)
</UL>

<P><STRONG><a name="[25e]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mahony_computeAngles
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update
</UL>

<P><STRONG><a name="[291]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSinit
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::arm_atan2_f32(float, float)
</UL>

<P><STRONG><a name="[3b8]"></a>__hardfp_atanf</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, atanf.o(i.__hardfp_atanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atanf
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roboarm_dep::arm_atan_f32(float, float)
</UL>

<P><STRONG><a name="[293]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSinit
</UL>

<P><STRONG><a name="[292]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSinit
</UL>

<P><STRONG><a name="[298]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mahony_update
</UL>

<P><STRONG><a name="[4bb]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[4bf]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[4bc]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[4be]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[4c0]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[4ba]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[434]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKMotor::get_feedback(unsigned char*)
</UL>

<P><STRONG><a name="[506]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[f7]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[507]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[508]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[144]"></a>Get_SerialNum</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, usbd_desc.o(.text.Get_SerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HS_SerialStrDescriptor
</UL>

<P><STRONG><a name="[145]"></a>IntToUnicode</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, usbd_desc.o(.text.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[11]"></a>CDC_Init_HS</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_cdc_if.o(.text.CDC_Init_HS))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CDC_Init_HS &rArr; USBD_CDC_SetTxBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.USBD_Interface_fops_HS)
</UL>
<P><STRONG><a name="[12]"></a>CDC_DeInit_HS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(.text.CDC_DeInit_HS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.USBD_Interface_fops_HS)
</UL>
<P><STRONG><a name="[13]"></a>CDC_Control_HS</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbd_cdc_if.o(.text.CDC_Control_HS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CDC_Control_HS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.USBD_Interface_fops_HS)
</UL>
<P><STRONG><a name="[14]"></a>CDC_Receive_HS</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usbd_cdc_if.o(.text.CDC_Receive_HS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CDC_Receive_HS &rArr; USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_ReceiveCallBack
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.USBD_Interface_fops_HS)
</UL>
<P><STRONG><a name="[15]"></a>CDC_TransmitCplt_HS</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, usbd_cdc_if.o(.text.CDC_TransmitCplt_HS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CDC_TransmitCplt_HS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data.USBD_Interface_fops_HS)
</UL>
<P><STRONG><a name="[1d0]"></a>PCD_EP_OutXfrComplete_int</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, stm32h7xx_hal_pcd.o(.text.PCD_EP_OutXfrComplete_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = PCD_EP_OutXfrComplete_int &rArr; HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1d1]"></a>PCD_EP_OutSetupPacket_int</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32h7xx_hal_pcd.o(.text.PCD_EP_OutSetupPacket_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = PCD_EP_OutSetupPacket_int &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1d7]"></a>PCD_WriteEmptyTxFifo</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, stm32h7xx_hal_pcd.o(.text.PCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PCD_WriteEmptyTxFifo &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2e5]"></a>USB_CoreReset</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, stm32h7xx_ll_usb.o(.text.USB_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[1fd]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 458 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1fe]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 458 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[163]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 240 bytes, Stack size 20 bytes, stm32h7xx_hal_dma.o(.text.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[164]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 458 bytes, Stack size 12 bytes, stm32h7xx_hal_dma.o(.text.DMA_CalcBaseAndBitshift))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[165]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, stm32h7xx_hal_dma.o(.text.DMA_CalcDMAMUXChannelBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[166]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 298 bytes, Stack size 12 bytes, stm32h7xx_hal_dma.o(.text.DMA_CalcDMAMUXRequestGenBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_CalcDMAMUXRequestGenBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[168]"></a>DMA_SetConfig</STRONG> (Thumb, 1300 bytes, Stack size 36 bytes, stm32h7xx_hal_dma.o(.text.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1a6]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[1a3]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1a4]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32h7xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1a5]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1a2]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[1a8]"></a>__NVIC_SystemReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>

<P><STRONG><a name="[191]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, stm32h7xx_hal_i2c.o(.text.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[193]"></a>I2C_TransferConfig</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(.text.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[197]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32h7xx_hal_i2c.o(.text.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[194]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32h7xx_hal_i2c.o(.text.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[254]"></a>I2C_IsErrorOccurred</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, stm32h7xx_hal_i2c.o(.text.I2C_IsErrorOccurred))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[24c]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, stm32h7xx_hal_i2c.o(.text.I2C_Flush_TXDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>

<P><STRONG><a name="[18d]"></a>I2C_ITError</STRONG> (Thumb, 498 bytes, Stack size 24 bytes, stm32h7xx_hal_i2c.o(.text.I2C_ITError))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TreatErrorCallback
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetState
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[b3]"></a>I2C_Slave_ISR_IT</STRONG> (Thumb, 584 bytes, Stack size 32 bytes, stm32h7xx_hal_i2c.o(.text.I2C_Slave_ISR_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2C_Slave_ISR_IT &rArr; I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_i2c.o(.text.I2C_ITError)
</UL>
<P><STRONG><a name="[250]"></a>I2C_ITSlaveCplt</STRONG> (Thumb, 1440 bytes, Stack size 40 bytes, stm32h7xx_hal_i2c.o(.text.I2C_ITSlaveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C_ITSlaveCplt &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[24e]"></a>I2C_ITListenCplt</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(.text.I2C_ITListenCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_ITListenCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[251]"></a>I2C_ITSlaveSeqCplt</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(.text.I2C_ITSlaveSeqCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_ITSlaveSeqCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[249]"></a>I2C_ITAddrCplt</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, stm32h7xx_hal_i2c.o(.text.I2C_ITAddrCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_ITAddrCplt &rArr; I2C_Disable_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AddrCallback
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ISR_IT
</UL>

<P><STRONG><a name="[196]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, stm32h7xx_hal_i2c.o(.text.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[192]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, stm32h7xx_hal_i2c.o(.text.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[24b]"></a>I2C_Disable_IRQ</STRONG> (Thumb, 204 bytes, Stack size 12 bytes, stm32h7xx_hal_i2c.o(.text.I2C_Disable_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_Disable_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITAddrCplt
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveSeqCplt
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITListenCplt
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITSlaveCplt
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[b4]"></a>I2C_DMAAbort</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(.text.I2C_DMAAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_DMAAbort &rArr; I2C_TreatErrorCallback &rArr; HAL_I2C_AbortCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TreatErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_i2c.o(.text.I2C_ITError)
</UL>
<P><STRONG><a name="[248]"></a>I2C_TreatErrorCallback</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(.text.I2C_TreatErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TreatErrorCallback &rArr; HAL_I2C_AbortCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[158]"></a>LL_ADC_IsDeepPowerDownEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_IsDeepPowerDownEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsDeepPowerDownEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[159]"></a>LL_ADC_DisableDeepPowerDown</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_DisableDeepPowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_DisableDeepPowerDown
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[15a]"></a>LL_ADC_IsInternalRegulatorEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_IsInternalRegulatorEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsInternalRegulatorEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[15b]"></a>LL_ADC_EnableInternalRegulator</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_EnableInternalRegulator))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_EnableInternalRegulator
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[147]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[152]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[15c]"></a>LL_ADC_SetCommonClock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_SetCommonClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetCommonClock
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[149]"></a>LL_ADC_INJ_IsConversionOngoing</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_INJ_IsConversionOngoing))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_INJ_IsConversionOngoing
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[148]"></a>LL_ADC_REG_SetSequencerRanks</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_REG_SetSequencerRanks))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_REG_SetSequencerRanks
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[14a]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_SetChannelSamplingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_SetChannelSamplingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[14b]"></a>LL_ADC_SetOffset</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_SetOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_ADC_SetOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[14c]"></a>LL_ADC_SetOffsetSign</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_SetOffsetSign))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_SetOffsetSign
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[14d]"></a>LL_ADC_SetOffsetSaturation</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_SetOffsetSaturation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_SetOffsetSaturation
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[14e]"></a>LL_ADC_SetOffsetSignedSaturation</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_SetOffsetSignedSaturation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_SetOffsetSignedSaturation
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[14f]"></a>LL_ADC_SetDataRightShift</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_SetDataRightShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_ADC_SetDataRightShift
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[150]"></a>LL_ADC_GetOffsetChannel</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_GetOffsetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_ADC_GetOffsetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[151]"></a>LL_ADC_SetOffsetState</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_SetOffsetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_ADC_SetOffsetState
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[153]"></a>LL_ADC_SetChannelSingleDiff</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_SetChannelSingleDiff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_ADC_SetChannelSingleDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[154]"></a>LL_ADC_GetCommonPathInternalCh</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_GetCommonPathInternalCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_GetCommonPathInternalCh
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[155]"></a>LL_ADC_SetCommonPathInternalCh</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_hal_adc.o(.text.LL_ADC_SetCommonPathInternalCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetCommonPathInternalCh
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[180]"></a>FDCAN_CalcultateRamBlockAddresses</STRONG> (Thumb, 706 bytes, Stack size 16 bytes, stm32h7xx_hal_fdcan.o(.text.FDCAN_CalcultateRamBlockAddresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FDCAN_CalcultateRamBlockAddresses
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[16b]"></a>FDCAN_CopyMessageToRAM</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, stm32h7xx_hal_fdcan.o(.text.FDCAN_CopyMessageToRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FDCAN_CopyMessageToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
</UL>

<P><STRONG><a name="[1ac]"></a>OSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, stm32h7xx_hal_ospi.o(.text.OSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OSPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_AutoPolling
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Receive
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Transmit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
</UL>

<P><STRONG><a name="[1ae]"></a>OSPI_ConfigCmd</STRONG> (Thumb, 780 bytes, Stack size 40 bytes, stm32h7xx_hal_ospi.o(.text.OSPI_ConfigCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OSPI_ConfigCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPI_Command
</UL>

<P><STRONG><a name="[1aa]"></a>OSPIM_GetConfig</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, stm32h7xx_hal_ospi.o(.text.OSPIM_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OSPIM_GetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_OSPIM_Config
</UL>

<P><STRONG><a name="[20f]"></a>SPI_GetPacketSize</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32h7xx_hal_spi.o(.text.SPI_GetPacketSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_GetPacketSize
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[208]"></a>SPI_CloseTransfer</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, stm32h7xx_hal_spi.o(.text.SPI_CloseTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
</UL>

<P><STRONG><a name="[211]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, stm32h7xx_hal_spi.o(.text.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[ac]"></a>SPI_DMAHalfTransmitCplt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32h7xx_hal_spi.o(.text.SPI_DMAHalfTransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_DMAHalfTransmitCplt &rArr; HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[ad]"></a>SPI_DMATransmitCplt</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32h7xx_hal_spi.o(.text.SPI_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_DMATransmitCplt &rArr; HAL_SPI_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[ae]"></a>SPI_DMAError</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32h7xx_hal_spi.o(.text.SPI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_DMAError &rArr; SPI_CloseTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_spi.o(.text.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[ab]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32h7xx_hal_spi.o(.text.SPI_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_DMAAbortOnError &rArr; HAL_SPI_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_spi.o(.text.HAL_SPI_IRQHandler)
</UL>
<P><STRONG><a name="[220]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 336 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(.text.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[222]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 362 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(.text.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[223]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 218 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(.text.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[224]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 208 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(.text.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[225]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 210 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(.text.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[23e]"></a>UART_EndRxTransfer</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[b0]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(.text.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[b1]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_DMATxHalfCplt &rArr; HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[b2]"></a>UART_DMAError</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(.text.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = UART_DMAError &rArr; HAL_UART_ErrorCallback &rArr; SubBoard::start_receive() &rArr; SuperUart::receive_dma_idle(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
<LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[2b2]"></a>UART_EndTxTransfer</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, stm32h7xx_hal_uart.o(.text.UART_EndTxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_EndTxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[b9]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UARTEx_RxEventCallback &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[ba]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = UART_DMARxHalfCplt &rArr; HAL_UARTEx_RxEventCallback &rArr; xEventGroupSetBitsFromISR &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[af]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback &rArr; SubBoard::start_receive() &rArr; SuperUart::receive_dma_idle(unsigned short) &rArr; HAL_UARTEx_ReceiveToIdle_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[240]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[239]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32h7xx_hal_uart_ex.o(.text.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
</UL>

<P><STRONG><a name="[4ac]"></a>prvTestWaitCondition</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, event_groups.o(.text.prvTestWaitCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[486]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, queue.o(.text.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>

<P><STRONG><a name="[485]"></a>prvInitialiseMutex</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, queue.o(.text.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[482]"></a>prvCopyDataToQueue</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, queue.o(.text.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[48d]"></a>prvIsQueueFull</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, queue.o(.text.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[499]"></a>prvUnlockQueue</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[48c]"></a>prvIsQueueEmpty</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, queue.o(.text.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[4b8]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(.text.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvGetDisinheritPriorityAfterTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[481]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, queue.o(.text.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[488]"></a>prvInitialiseNewTask</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[477]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[479]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tasks.o(.text.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[480]"></a>prvDeleteTCB</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(.text.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[4a1]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, tasks.o(.text.prvResetNextTaskUnblockTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[473]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[4a6]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tasks.o(.text.prvTaskIsTaskSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvTaskIsTaskSuspended
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[dd]"></a>prvIdleTask</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[47f]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(.text.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[49f]"></a>prvTaskCheckFreeStackSpace</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tasks.o(.text.prvTaskCheckFreeStackSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
</UL>

<P><STRONG><a name="[47b]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, timers.o(.text.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[df]"></a>prvTimerTask</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[498]"></a>prvGetNextExpireTime</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timers.o(.text.prvGetNextExpireTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvGetNextExpireTime
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[493]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, timers.o(.text.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[490]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 402 bytes, Stack size 64 bytes, timers.o(.text.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[492]"></a>prvSampleTimeNow</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[48e]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, timers.o(.text.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[48b]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, timers.o(.text.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[497]"></a>prvSwitchTimerLists</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, timers.o(.text.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[467]"></a>inHandlerMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, cmsis_os.o(.text.inHandlerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = inHandlerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[46d]"></a>makeFreeRtosPriority</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cmsis_os.o(.text.makeFreeRtosPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = makeFreeRtosPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[49d]"></a>prvHeapInit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, heap_4.o(.text.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[49e]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, heap_4.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[dc]"></a>prvTaskExitError</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[4af]"></a>vPortEnableVFP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.text.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[4b0]"></a>prvPortStartFirstTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[2ca]"></a>USBD_GetDescriptor</STRONG> (Thumb, 798 bytes, Stack size 40 bytes, usbd_ctlreq.o(.text.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2df]"></a>USBD_SetAddress</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, usbd_ctlreq.o(.text.USBD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBD_SetAddress &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2e0]"></a>USBD_SetConfig</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, usbd_ctlreq.o(.text.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2c9]"></a>USBD_GetConfig</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usbd_ctlreq.o(.text.USBD_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBD_GetConfig &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2cc]"></a>USBD_GetStatus</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, usbd_ctlreq.o(.text.USBD_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBD_GetStatus &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2e3]"></a>USBD_SetFeature</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_ctlreq.o(.text.USBD_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USBD_SetFeature &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2c3]"></a>USBD_ClrFeature</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbd_ctlreq.o(.text.USBD_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USBD_ClrFeature &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2de]"></a>SWAPBYTE</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbd_ctlreq.o(.text.SWAPBYTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SWAPBYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>

<P><STRONG><a name="[2ce]"></a>USBD_GetLen</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, usbd_ctlreq.o(.text.USBD_GetLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_GetLen
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>

<P><STRONG><a name="[7]"></a>USBD_CDC_Init</STRONG> (Thumb, 540 bytes, Stack size 72 bytes, usbd_cdc.o(.text.USBD_CDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = USBD_CDC_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_malloc
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[8]"></a>USBD_CDC_DeInit</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, usbd_cdc.o(.text.USBD_CDC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_CDC_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_free
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[9]"></a>USBD_CDC_Setup</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, usbd_cdc.o(.text.USBD_CDC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBD_CDC_Setup &rArr; USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[a]"></a>USBD_CDC_EP0_RxReady</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, usbd_cdc.o(.text.USBD_CDC_EP0_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_CDC_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[b]"></a>USBD_CDC_DataIn</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, usbd_cdc.o(.text.USBD_CDC_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USBD_CDC_DataIn &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[c]"></a>USBD_CDC_DataOut</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, usbd_cdc.o(.text.USBD_CDC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_CDC_DataOut &rArr; USBD_LL_GetRxDataSize &rArr; HAL_PCD_EP_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[d]"></a>USBD_CDC_GetHSCfgDesc</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, usbd_cdc.o(.text.USBD_CDC_GetHSCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_CDC_GetHSCfgDesc &rArr; USBD_GetEpDesc &rArr; USBD_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[e]"></a>USBD_CDC_GetFSCfgDesc</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, usbd_cdc.o(.text.USBD_CDC_GetFSCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_CDC_GetFSCfgDesc &rArr; USBD_GetEpDesc &rArr; USBD_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[f]"></a>USBD_CDC_GetOtherSpeedCfgDesc</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, usbd_cdc.o(.text.USBD_CDC_GetOtherSpeedCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_CDC_GetOtherSpeedCfgDesc &rArr; USBD_GetEpDesc &rArr; USBD_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data.USBD_CDC)
</UL>
<P><STRONG><a name="[43e]"></a>auto RoboArm::enable()::$_0::operator()&lang;Motor&lang;LKMotorSingle&rang;&rang;(Motor&lang;LKMotorSingle&rang;&) const</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, roboarm.o(.text._ZZN7RoboArm6enableEvENK3$_0clI5MotorI13LKMotorSingleEEEDaRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = auto RoboArm::enable()::$_0::operator()&lang;Motor&lang;LKMotorSingle&rang;&rang;(Motor&lang;LKMotorSingle&rang;&) const &rArr; LKControl&lang;LKMotor&rang;::clear_error() &rArr; SuperCan::transmit_pdata(unsigned int, unsigned char*) &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::clear_error()
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::enable()
</UL>

<P><STRONG><a name="[43f]"></a>auto RoboArm::enable()::$_1::operator()&lang;Motor&lang;LKMotorSingle&rang;&rang;(Motor&lang;LKMotorSingle&rang;&) const</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, roboarm.o(.text._ZZN7RoboArm6enableEvENK3$_1clI5MotorI13LKMotorSingleEEEDaRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = auto RoboArm::enable()::$_1::operator()&lang;Motor&lang;LKMotorSingle&rang;&rang;(Motor&lang;LKMotorSingle&rang;&) const &rArr; LKControl&lang;LKMotor&rang;::clear_error() &rArr; SuperCan::transmit_pdata(unsigned int, unsigned char*) &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::clear_error()
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::enable()
</UL>

<P><STRONG><a name="[440]"></a>auto RoboArm::enable()::$_2::operator()&lang;Motor&lang;LKMotorSingle&rang;&rang;(Motor&lang;LKMotorSingle&rang;&) const</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, roboarm.o(.text._ZZN7RoboArm6enableEvENK3$_2clI5MotorI13LKMotorSingleEEEDaRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = auto RoboArm::enable()::$_2::operator()&lang;Motor&lang;LKMotorSingle&rang;&rang;(Motor&lang;LKMotorSingle&rang;&) const &rArr; LKControl&lang;LKMotor&rang;::enable() &rArr; SuperCan::transmit_pdata(unsigned int, unsigned char*) &rArr; HAL_FDCAN_AddMessageToTxFifoQ &rArr; FDCAN_CopyMessageToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LKControl&lang;LKMotor&rang;::enable()
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::enable()
</UL>

<P><STRONG><a name="[46c]"></a>MemHeadPtr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, rtx_memory.o(.text.MemHeadPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MemHeadPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[46b]"></a>MemBlockPtr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_memory.o(.text.MemBlockPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[2eb]"></a>__cxx_global_var_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, vari.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __cxx_global_var_init &rArr; CustomHeap::CustomHeap__sub_object(unsigned long long*, unsigned int) &rArr; osRtxMemoryInit &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHeap::CustomHeap__sub_object(unsigned long long*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[365]"></a>MemHeadPtr(void*)</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, vari.o(.text._ZL10MemHeadPtrPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MemHeadPtr(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHeap::CustomHeap__sub_object(unsigned long long*, unsigned int)
</UL>

<P><STRONG><a name="[2ec]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, vari.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __cxx_global_var_init.1 &rArr; CustomHeap::CustomHeap__sub_object(unsigned long long*, unsigned int) &rArr; osRtxMemoryInit &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHeap::CustomHeap__sub_object(unsigned long long*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[2ed]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, vari.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __cxx_global_var_init.2 &rArr; CustomHeap::CustomHeap__sub_object(unsigned long long*, unsigned int) &rArr; osRtxMemoryInit &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHeap::CustomHeap__sub_object(unsigned long long*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[2ee]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, vari.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __cxx_global_var_init.3 &rArr; CustomHeap::CustomHeap__sub_object(unsigned long long*, unsigned int) &rArr; osRtxMemoryInit &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CustomHeap::CustomHeap__sub_object(unsigned long long*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[2ef]"></a>__cxx_global_var_init.4</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, vari.o(.text.__cxx_global_var_init.4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cxx_global_var_init.4 &rArr; W25Q64::W25Q64__sub_object(OSPI_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q64::W25Q64__sub_object(OSPI_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[2f0]"></a>__cxx_global_var_init.5</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, vari.o(.text.__cxx_global_var_init.5))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.5 &rArr; SuperCan::SuperCan(FDCAN_HandleTypeDef*, unsigned int, unsigned int) &rArr; Count::Count__sub_object() &rArr; CountManager::register_item(Count*) &rArr; CustomList&lang;Count*&rang;::push_back(Count* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::SuperCan(FDCAN_HandleTypeDef*, unsigned int, unsigned int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[2f1]"></a>__cxx_global_var_init.6</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, vari.o(.text.__cxx_global_var_init.6))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.6 &rArr; SuperCan::SuperCan(FDCAN_HandleTypeDef*, unsigned int, unsigned int) &rArr; Count::Count__sub_object() &rArr; CountManager::register_item(Count*) &rArr; CustomList&lang;Count*&rang;::push_back(Count* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::SuperCan(FDCAN_HandleTypeDef*, unsigned int, unsigned int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[2f2]"></a>__cxx_global_var_init.7</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, vari.o(.text.__cxx_global_var_init.7))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.7 &rArr; SuperCan::SuperCan(FDCAN_HandleTypeDef*, unsigned int, unsigned int) &rArr; Count::Count__sub_object() &rArr; CountManager::register_item(Count*) &rArr; CustomList&lang;Count*&rang;::push_back(Count* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCan::SuperCan(FDCAN_HandleTypeDef*, unsigned int, unsigned int)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[2f3]"></a>__cxx_global_var_init.8</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, vari.o(.text.__cxx_global_var_init.8))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.8 &rArr; Chassis::Chassis__sub_object(SuperCan*, std::__2::array&lang;slope_cfg, 4u&rang; const&, std::__2::array&lang;chassis_dep::ChassisMotorCfg, 4u&rang; const&, std::__2::array&lang;chassis_dep::ChassisMotorCfg, 2u&rang; const&) &rArr; chassis_dep::base_motor::base_motor__sub_object(std::__2::array&lang;chassis_dep::ChassisMotorCfg, 4u&rang; const&) &rArr; Motor&lang;M3508Speed&rang;::Motor__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; M3508Speed::M3508Speed__sub_object&lang;Pid const&, unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; SpeedPidControl&lang;M3508&rang;::SpeedPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, unsigned short const&) &rArr; M3508::M3508__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis::Chassis__sub_object(SuperCan*, std::__2::array&lang;slope_cfg, 4u&rang; const&, std::__2::array&lang;chassis_dep::ChassisMotorCfg, 4u&rang; const&, std::__2::array&lang;chassis_dep::ChassisMotorCfg, 2u&rang; const&)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[2f4]"></a>__cxx_global_var_init.9</STRONG> (Thumb, 384 bytes, Stack size 400 bytes, vari.o(.text.__cxx_global_var_init.9))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.9 &rArr; RoboArm::RoboArm__sub_object(SuperCan*, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, float, unsigned int, Pid const&, Pid const&, unsigned int, Pid const&, Pid const&, __I2C_HandleTypeDef*, roboarm_dep::offset&&) &rArr; roboarm_dep::Differentiator::Differentiator__sub_object(float, unsigned int, Pid const&, Pid const&, unsigned int, Pid const&, Pid const&, __I2C_HandleTypeDef*) &rArr; Motor&lang;M2006DiffPos&rang;::Motor__sub_object&lang;Pid const&, Pid const&, unsigned int&&rang;(Pid const&, Pid const&, unsigned int&) &rArr; M2006DiffPos::M2006DiffPos__sub_object&lang;Pid const&, Pid const&, unsigned int&&rang;(Pid const&, Pid const&, unsigned int&) &rArr; PosPidControl&lang;M2006Diff&rang;::PosPidControl__sub_object&lang;unsigned int&&rang;(Pid const&, Pid const&, unsigned int&) &rArr; M2006Diff::M2006Diff__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 720u, 1u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboArm::RoboArm__sub_object(SuperCan*, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, float, unsigned int, Pid const&, Pid const&, unsigned int, Pid const&, Pid const&, __I2C_HandleTypeDef*, roboarm_dep::offset&&)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid__sub_object(float, float, float, float, float, float)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[2f5]"></a>__cxx_global_var_init.10</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, vari.o(.text.__cxx_global_var_init.10))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxx_global_var_init.10 &rArr; RGBLED::RGBLED__sub_object(__SPI_HandleTypeDef*) &rArr; SuperSPI::SuperSPI__sub_object(__SPI_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLED::RGBLED__sub_object(__SPI_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[2f6]"></a>__cxx_global_var_init.11</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vari.o(.text.__cxx_global_var_init.11))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __cxx_global_var_init.11 &rArr; Buzzer::Buzzer__sub_object(TIM_HandleTypeDef*, unsigned short) &rArr; RoundBuffer&lang;unsigned short, 50u&rang;::RoundBuffer__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::Buzzer__sub_object(TIM_HandleTypeDef*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[2f7]"></a>__cxx_global_var_init.12</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, vari.o(.text.__cxx_global_var_init.12))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __cxx_global_var_init.12 &rArr; Imu::Imu__sub_object(MEASURE_ABLE) &rArr; Pid::Pid__sub_object(float, float, float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu::Imu__sub_object(MEASURE_ABLE)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[2f8]"></a>__cxx_global_var_init.13</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, vari.o(.text.__cxx_global_var_init.13))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.13 &rArr; Interact::Interact__sub_object(unsigned char const&, unsigned char const&, __UART_HandleTypeDef*, __UART_HandleTypeDef*, __UART_HandleTypeDef*) &rArr; ImageTrans::ImageTrans__sub_object(__UART_HandleTypeDef*) &rArr; SuperUart::SuperUart(__UART_HandleTypeDef*, unsigned short, unsigned short) &rArr; Count::Count__sub_object() &rArr; CountManager::register_item(Count*) &rArr; CustomList&lang;Count*&rang;::push_back(Count* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interact::Interact__sub_object(unsigned char const&, unsigned char const&, __UART_HandleTypeDef*, __UART_HandleTypeDef*, __UART_HandleTypeDef*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[2f9]"></a>__cxx_global_var_init.14</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, vari.o(.text.__cxx_global_var_init.14))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __cxx_global_var_init.14 &rArr; SuperGPIO::SuperGPIO__sub_object(GPIO_TypeDef*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperGPIO::SuperGPIO__sub_object(GPIO_TypeDef*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[2fa]"></a>__cxx_global_var_init.15</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, vari.o(.text.__cxx_global_var_init.15))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __cxx_global_var_init.15 &rArr; SuperGPIO::SuperGPIO__sub_object(GPIO_TypeDef*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperGPIO::SuperGPIO__sub_object(GPIO_TypeDef*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[2fb]"></a>__cxx_global_var_init.16</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, vari.o(.text.__cxx_global_var_init.16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __cxx_global_var_init.16 &rArr; SuperGPIO::SuperGPIO__sub_object(GPIO_TypeDef*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperGPIO::SuperGPIO__sub_object(GPIO_TypeDef*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[2fc]"></a>__cxx_global_var_init.17</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, vari.o(.text.__cxx_global_var_init.17))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.17 &rArr; UI::UI__sub_object(unsigned short, unsigned short, __UART_HandleTypeDef*) &rArr; SuperUart::SuperUart(__UART_HandleTypeDef*, unsigned short, unsigned short) &rArr; Count::Count__sub_object() &rArr; CountManager::register_item(Count*) &rArr; CustomList&lang;Count*&rang;::push_back(Count* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI::UI__sub_object(unsigned short, unsigned short, __UART_HandleTypeDef*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[2fd]"></a>__cxx_global_var_init.18</STRONG> (Thumb, 176 bytes, Stack size 232 bytes, vari.o(.text.__cxx_global_var_init.18))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.18 &rArr; OneStepGet::OneStepGet__sub_object(Pid const&, unsigned short, Pid const&, Pid const&, unsigned short) &rArr; Motor&lang;M3508Pos&rang;::Motor__sub_object&lang;Pid const&, Pid const&, unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&) &rArr; M3508Pos::M3508Pos__sub_object&lang;Pid const&, Pid const&, unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&) &rArr; PosPidControl&lang;M3508&rang;::PosPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&) &rArr; M3508::M3508__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::OneStepGet__sub_object(Pid const&, unsigned short, Pid const&, Pid const&, unsigned short)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid__sub_object(float, float, float, float, float, float)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[2fe]"></a>__cxx_global_var_init.19</STRONG> (Thumb, 184 bytes, Stack size 240 bytes, vari.o(.text.__cxx_global_var_init.19))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = __cxx_global_var_init.19 &rArr; OneStepGet::OneStepGet__sub_object(Pid const&, unsigned short, Pid const&, Pid const&, unsigned short) &rArr; Motor&lang;M3508Pos&rang;::Motor__sub_object&lang;Pid const&, Pid const&, unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&) &rArr; M3508Pos::M3508Pos__sub_object&lang;Pid const&, Pid const&, unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&) &rArr; PosPidControl&lang;M3508&rang;::PosPidControl__sub_object&lang;unsigned short const&&rang;(Pid const&, Pid const&, unsigned short const&) &rArr; M3508::M3508__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 3591u, 187u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneStepGet::OneStepGet__sub_object(Pid const&, unsigned short, Pid const&, Pid const&, unsigned short)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pid::Pid__sub_object(float, float, float, float, float, float)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Vari.cpp
</UL>

<P><STRONG><a name="[f0]"></a>_GLOBAL__sub_I_Vari.cpp</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, vari.o(.text._GLOBAL__sub_I_Vari.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_Vari.cpp &rArr; __cxx_global_var_init.9 &rArr; RoboArm::RoboArm__sub_object(SuperCan*, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, unsigned int, unsigned int, float, float, unsigned int, Pid const&, Pid const&, unsigned int, Pid const&, Pid const&, __I2C_HandleTypeDef*, roboarm_dep::offset&&) &rArr; roboarm_dep::Differentiator::Differentiator__sub_object(float, unsigned int, Pid const&, Pid const&, unsigned int, Pid const&, Pid const&, __I2C_HandleTypeDef*) &rArr; Motor&lang;M2006DiffPos&rang;::Motor__sub_object&lang;Pid const&, Pid const&, unsigned int&&rang;(Pid const&, Pid const&, unsigned int&) &rArr; M2006DiffPos::M2006DiffPos__sub_object&lang;Pid const&, Pid const&, unsigned int&&rang;(Pid const&, Pid const&, unsigned int&) &rArr; PosPidControl&lang;M2006Diff&rang;::PosPidControl__sub_object&lang;unsigned int&&rang;(Pid const&, Pid const&, unsigned int&) &rArr; M2006Diff::M2006Diff__sub_object(unsigned short) &rArr; default_motor&lang;8192u, 720u, 1u&rang;::default_motor__sub_object(unsigned short) &rArr; Detect::Detect(unsigned int, void (*)(), void (*)()) &rArr; DetectManager&lang;Detect&rang;::Register(Detect*) &rArr; CustomList&lang;Detect*&rang;::push_back(Detect* const&) &rArr; operator new(unsigned int) &rArr; CustomHeap::malloc(unsigned int) &rArr; osRtxMemoryAlloc &rArr; MemBlockPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.19
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.18
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.17
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.16
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.15
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.14
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.13
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.12
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.11
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.10
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.9
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.8
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vari.o(.init_array)
</UL>
<P><STRONG><a name="[2ea]"></a>__cxx_global_var_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, judgetask.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __cxx_global_var_init &rArr; ui_dep::ui_control::ui_control__sub_object(unsigned char const*, unsigned char) &rArr; ui_dep::ui_control::init(unsigned char const*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_dep::ui_control::ui_control__sub_object(unsigned char const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_JudgeTask.cpp
</UL>

<P><STRONG><a name="[f1]"></a>_GLOBAL__sub_I_JudgeTask.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, judgetask.o(.text._GLOBAL__sub_I_JudgeTask.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _GLOBAL__sub_I_JudgeTask.cpp &rArr; __cxx_global_var_init &rArr; ui_dep::ui_control::ui_control__sub_object(unsigned char const*, unsigned char) &rArr; ui_dep::ui_control::init(unsigned char const*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> judgetask.o(.init_array)
</UL>
<P><STRONG><a name="[290]"></a>invSqrt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mahonyahrs.o(.text.invSqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = invSqrt &rArr; Mahony_invSqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mahony_invSqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mahony_update
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSinit
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdateIMU
</UL>

<P><STRONG><a name="[13a]"></a>BMI088_write_single_reg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bmi088driver.o(.text.BMI088_write_single_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BMI088_write_single_reg &rArr; BMI088_read_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088_gyro_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088_accel_init
</UL>

<P><STRONG><a name="[138]"></a>BMI088_read_single_reg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bmi088driver.o(.text.BMI088_read_single_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BMI088_read_single_reg &rArr; BMI088_read_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088_gyro_init
</UL>

<P><STRONG><a name="[137]"></a>BMI088_read_muli_reg</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bmi088driver.o(.text.BMI088_read_muli_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BMI088_read_muli_reg &rArr; BMI088_read_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_read_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI088_read
</UL>

<P><STRONG><a name="[245]"></a>H_K_R_Adjustment</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, kalman_filter.o(.text.H_K_R_Adjustment))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = H_K_R_Adjustment &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Measure
</UL>

<P><STRONG><a name="[b5]"></a>IMU_QuaternionEKF_Observe</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_Observe))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IMU_QuaternionEKF_Observe &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternionekf.o(.text.IMU_QuaternionEKF_Init)
</UL>
<P><STRONG><a name="[b6]"></a>IMU_QuaternionEKF_F_Linearization_P_Fading</STRONG> (Thumb, 544 bytes, Stack size 48 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_F_Linearization_P_Fading))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IMU_QuaternionEKF_F_Linearization_P_Fading &rArr; invSqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternionekf.o(.text.IMU_QuaternionEKF_Init)
</UL>
<P><STRONG><a name="[b7]"></a>IMU_QuaternionEKF_SetH</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_SetH))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = IMU_QuaternionEKF_SetH
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternionekf.o(.text.IMU_QuaternionEKF_Init)
</UL>
<P><STRONG><a name="[b8]"></a>IMU_QuaternionEKF_xhatUpdate</STRONG> (Thumb, 1592 bytes, Stack size 56 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_xhatUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = IMU_QuaternionEKF_xhatUpdate &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternionekf.o(.text.IMU_QuaternionEKF_Init)
</UL>
<P><STRONG><a name="[257]"></a>invSqrt</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, quaternionekf.o(.text.invSqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = invSqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_F_Linearization_P_Fading
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
